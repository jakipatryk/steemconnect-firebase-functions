{
    "docs": [
        {
            "location": "/",
            "text": "Welcome\n to the documentation of...\n\n\nsteemconnect-firebase-function\n - a TypeScript library that can help you build applications with \nSteemConnect\n and \nFirebase\n.\n\n\nWhat can you do with this tool?\n\n\n\n\nimplement\n OAuth2 Authorization Code Grant\n\n\nbroadcast\n operations to the Steem blockchain\n\n\ncheck\n OAuth2 error types\n\n\nmint\n Firebase Custom Tokens\n\n\ncreate\n Firebase Auth accounts for your users with additional data\n\n\nstore\n tokens in the Firebase Cloud Firestore\n\n\n\n\nQuick start\n\n\nTo get started started, you simply have to install it via \nNPM\n:\n\n\nnpm i steemconnect-firebase-functions",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-the-documentation-of",
            "text": "steemconnect-firebase-function  - a TypeScript library that can help you build applications with  SteemConnect  and  Firebase .",
            "title": "Welcome to the documentation of..."
        },
        {
            "location": "/#what-can-you-do-with-this-tool",
            "text": "implement  OAuth2 Authorization Code Grant  broadcast  operations to the Steem blockchain  check  OAuth2 error types  mint  Firebase Custom Tokens  create  Firebase Auth accounts for your users with additional data  store  tokens in the Firebase Cloud Firestore",
            "title": "What can you do with this tool?"
        },
        {
            "location": "/#quick-start",
            "text": "To get started started, you simply have to install it via  NPM :  npm i steemconnect-firebase-functions",
            "title": "Quick start"
        },
        {
            "location": "/getting-started/",
            "text": "Not only on the Firebase?\n\n\nsteemconnect-firebase-functions was designed specifically to work on the \nFirebase Cloud Functions\n environment.\n\n\nHowever, \n4\n of \n5\n modules are platform agnostic, so you can use them in any NodeJS application. Only the \nFirebase\n module is platform specific.\n\n\nTypeScript or JavaScript?\n\n\nThe library was written in \nTypeScript\n and compiled down to \nES2015\n for production.\n\n\nIn some cases, it doesn't matter which language you choose, but in case you use \nsteemconnect-firebase-functions\n on Firebase Cloud Functions environment, I highly recommend using \nTypeScript\n.\n\n\nFirebase Cloud Functions run on \nNode v6.11.5\n, so without TypeScript compiler (or Babel) you won't be able to use \nES7\n and \nES8\n features such as \nasync/await\n in your functions. Using them can improve readability of your code.\n\n\nAlso, if you choose TypeScript you will be able to use a bunch of interfaces and types I created for this library. Believe me, it increases \ndeveloper experience\n a lot!\n\n\nInstallation\n\n\nBefore installing library itself, make sure you have \nNodeJS\n and \nNPM\n installed:\n\n\nnode --version\n# v8.5.0\nnpm --version\n# 5.7.1\n\n\n\n\n\nOnce ensured, you can install the library with a single command:\n\n\nnpm i steemconnect-firebase-functions\n\n\n\n\n\nExample usage\n\n\nimport\n \n{\n \ngetAuthorizationUrl\n,\n \nScope\n \n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \nclientId\n: \nstring\n \n=\n \n'strimi.app'\n;\n\n\nconst\n \nredirectUri\n: \nstring\n \n=\n \n'https://strimi.it/redirect'\n;\n\n\nconst\n \nscope\n: \nArray\n<\nScope\n>\n \n=\n \n[\n'vote'\n,\n \n'comment'\n];\n\n\nconst\n \nstate\n: \nstring\n \n=\n \n'state342343243242'\n;\n\n\n\nconst\n \nauthorizationUrl\n \n=\n \ngetAuthorizationUrl\n({\n\n  \nclientId\n,\n\n  \nredirectUri\n,\n\n  \nscope\n,\n\n  \nstate\n\n\n});\n\n\n// 'https://steemconnect.com/oauth2/authorize?client_id=strimi.app&response_type=code&redirect_uri=https%3A%2F%2Fstrimi.it%2Fredirect&scope=vote&state=state342343243242'\n\n\n\n\n\n\nGlossary\n\n\nHere are a few terms widely used in this documentation that might be confusing at first:\n\n\nbroadcast\n\n\n\n\nEvent where signed transaction is broadcasted to the network, so that witnesses could validate and include in block.\n\n\n\n\nSource\n: \nSteem Developer Portal\n\n\n\n\nbroadcastable\n\n\nA \nfunction\n which takes \nAccessTokenResponse\n object as a parameter and broadcasts any type of operations to the Steem blockchain.\n\n\nAlways returns \nPromise\n which resolves with the \nBroadcastResult\n object or rejects with the \nOAuth2Error\n object.\n\n\nTypically used as an \ninner function\n for other functions.\n\n\n\n\noperation\n\n\nAn object (to be more precise, an array) which holds information about \ndata\n we want to include in a transaction.",
            "title": "Getting Started"
        },
        {
            "location": "/getting-started/#not-only-on-the-firebase",
            "text": "steemconnect-firebase-functions was designed specifically to work on the  Firebase Cloud Functions  environment.  However,  4  of  5  modules are platform agnostic, so you can use them in any NodeJS application. Only the  Firebase  module is platform specific.",
            "title": "Not only on the Firebase?"
        },
        {
            "location": "/getting-started/#typescript-or-javascript",
            "text": "The library was written in  TypeScript  and compiled down to  ES2015  for production.  In some cases, it doesn't matter which language you choose, but in case you use  steemconnect-firebase-functions  on Firebase Cloud Functions environment, I highly recommend using  TypeScript .  Firebase Cloud Functions run on  Node v6.11.5 , so without TypeScript compiler (or Babel) you won't be able to use  ES7  and  ES8  features such as  async/await  in your functions. Using them can improve readability of your code.  Also, if you choose TypeScript you will be able to use a bunch of interfaces and types I created for this library. Believe me, it increases  developer experience  a lot!",
            "title": "TypeScript or JavaScript?"
        },
        {
            "location": "/getting-started/#installation",
            "text": "Before installing library itself, make sure you have  NodeJS  and  NPM  installed:  node --version\n# v8.5.0\nnpm --version\n# 5.7.1  Once ensured, you can install the library with a single command:  npm i steemconnect-firebase-functions",
            "title": "Installation"
        },
        {
            "location": "/getting-started/#example-usage",
            "text": "import   {   getAuthorizationUrl ,   Scope   }   from   'steemconnect-firebase-functions' ;  const   clientId :  string   =   'strimi.app' ;  const   redirectUri :  string   =   'https://strimi.it/redirect' ;  const   scope :  Array < Scope >   =   [ 'vote' ,   'comment' ];  const   state :  string   =   'state342343243242' ;  const   authorizationUrl   =   getAuthorizationUrl ({ \n   clientId , \n   redirectUri , \n   scope , \n   state  });  // 'https://steemconnect.com/oauth2/authorize?client_id=strimi.app&response_type=code&redirect_uri=https%3A%2F%2Fstrimi.it%2Fredirect&scope=vote&state=state342343243242'",
            "title": "Example usage"
        },
        {
            "location": "/getting-started/#glossary",
            "text": "Here are a few terms widely used in this documentation that might be confusing at first:",
            "title": "Glossary"
        },
        {
            "location": "/getting-started/#broadcast",
            "text": "Event where signed transaction is broadcasted to the network, so that witnesses could validate and include in block.   Source :  Steem Developer Portal",
            "title": "broadcast"
        },
        {
            "location": "/getting-started/#broadcastable",
            "text": "A  function  which takes  AccessTokenResponse  object as a parameter and broadcasts any type of operations to the Steem blockchain.  Always returns  Promise  which resolves with the  BroadcastResult  object or rejects with the  OAuth2Error  object.  Typically used as an  inner function  for other functions.",
            "title": "broadcastable"
        },
        {
            "location": "/getting-started/#operation",
            "text": "An object (to be more precise, an array) which holds information about  data  we want to include in a transaction.",
            "title": "operation"
        },
        {
            "location": "/authentication/",
            "text": "What will you learn?\n\n\n\n\nhow OAuth2 authorization code grant works\n\n\nhow to use \nsteemconnect-firebase-functions\n library to set up user authentication via SteemConnect in the Firebase Cloud Functions\n\n\nhow to build simple frontend with Angular and AngularFire2 to complete OAuth2 code flow and make operations on the Firebase Cloud Firestore database\n\n\n\n\nRequirements\n\n\n\n\nTypeScript knowledge\n\n\nsome experience with Angular\n\n\nAngular CLI\n installed\n\n\n\n\nDifficulty\n\n\n\n\nbasic\n\n\n\n\nWhat is Firebase?\n\n\nFirebase is a platform which \ngives you the ability to create applications\n that use database or authentication \nwithout writing any backend code\n...\n\n\nWell, this is true as long as we don't want to implement an auth system based on SteemConnect :) Firebase Authentication comes with a few auth providers built-in, such as Facebook or Twitter, but \nif we want to use SteemConnect we will have to write some backend code\n.\n\n\nThe backend code runs on the \nCloud Functions\n triggerable by events such as \nHTTP requests\n.\n\n\nImportant note\n: if you want to use Firebase on production (it's about deploying Cloud Functions), you will have to choose a paid pricing plan. Why? Our \nCloud Functions are going to make requests to external API\n (SteemConnect) and \nthis kind of operations are not included in the free\n (Spark) \nplan\n. Fortunately, \nwe still can run Functions locally\n, so to follow this tutorial you won't have to pay anything. For more information check \npricing\n.\n\n\nWhat is OAuth2?\n\n\nHave you ever signed into any app using your \nexternal account\n, maybe the one you have on Google or Facebook? You click 'Login with Facebook' and then the popup window is being opened. You see Facebook which asks you if you want to give this third-party app access to the listed resources. You probably accept it and then magically you become logged in to the app.\n\n\nYou are the \nresource owner\n, you operate via \nuser-agent\n (in this case a browser) and the application that wants you to give it an access to resources is the \nclient\n.\n\n\nThis process is possible thanks to \nOAuth2\n - an authorization framework which enables third-party applications to get limited access to the service.\n\n\nIt's all about the \naccess tokens\n. These strings are used to access resources protected by the service and the entire \nOAuth2 flow\n is oriented on getting them. The protected resource can be almost anything, from user data to ability to broadcast operations such as publishing a post.\n\n\nEven though there are a few OAuth2 flows, all of them are similar due to the fact that access token is the end goal.\n\n\nAuthorization Code Grant\n\n\nThe type of OAuth2 flow we will use in this tutorial is authorization code grant. This flow is split into two parts:\n\n\n\n\nauthentication of the resource owner\n - purple arrows on the diagram below\n\n\ngetting access token\n - blue arrows\n\n\n\n\n\n\nThis process can be tricky, so let me explain each step:\n\n\n\n\nResource owner\n (via \nuser-agent\n) opens a popup window which \nredirects\n him to the Firebase Cloud Function.\n\n\nThe Firebase Cloud Function \nredirects to SteemConnect endpoint\n with the client (application) information along with the scope of resources client wants to gain access to, and URI which SteemConnect will redirect to after success. At this point, the user is asked to give the third-party app access to the requested resources.\n\n\nSteemConnect redirects to provided URI with \ncode\n as a query parameter (for example, \nhttp://localhost:4200/redirect?code=fdt453534fds\n).\n\n\nUser-agent\n on the resource owner behalf makes a \nrequest\n to the Firebase Cloud Function along with the \ncode\n.\n\n\nFirebase Cloud Function \nmakes a request to SteemConnect token endpoint\n with client information and the code.\n\n\nSteemConnect responses with an access token\n and some additional info such as the resource owner username.\n\n\nBased on the username \nFirebase mints a custom auth token\n and sends it back to the resource owner. This step is not really OAuth2 related, but important for the Firebase Authentication system.\n\n\n\n\nDon't worry if you don't understand everything yet. It will become clear when we actually implement these steps in our app.\n\n\nCreating Firebase project\n\n\nThe \napp\n we are going to create is gonna use \nFirebase Authentication\n, \nFirebase Cloud Functions\n and \nFirebase Cloud Firestore\n... so we have to create Firebase project.\n\n\nThis process is really simple, one just has to go to the \nFirebase Console\n and click \nAdd project\n. You will see a modal, where you choose your project name and your country. The last step for now is to click \nCreate project\n and wait a few seconds.\n\n\nThat's all for now, but we will come back here a few times later.\n\n\nCreating SteemConnect project\n\n\nCreating SteemConnect project is nothing fancy once again. To do so, one simply has to go to https://steemconnect.com/dashboard and navigate to \nMy apps\n and click \nNew app\n.\n\n\nWarning\n: the username for your app you choose at this point is not changeable! So make sure you typed it correctly before clicking \nCreate account\n.\n\n\nIn the next step, fill the form as you wish, but make sure to add \nhttp://localhost:4200/redirect\n to \nRedirect URI(s)\n section:\n\n\n\n\nWe will come back to the dashboard later for \nclient id\n and \nclient secret\n.\n\n\nCreating Angular project\n\n\nAlthough we won't write any code for the frontend yet, creating an Angular project using Angular CLI is always a good start. Let's do it then!\n\n\nng new your-project-name\ncd your-project-name\n\n\n\n\n\nBackend\n\n\nThe backend we are going to create is, of course, based on Firebase Cloud Functions. However, before we start coding, we have to install \nfirebase-tools\n:\n\n\nnpm install firebase-tools -g\n\n\n\n\n\nOnce installed, initialize Firebase Cloud Functions project:\n\n\nfirebase init functions\n\n\n\n\n\nDuring this process you will be asked for a default project for this directory, select project which you have created in the \nCreating Firebase project\n section. Later, when asked \nWhat language would you like to use to write Cloud Functions\n, pick \nTypeScript\n. Also, you \nwant\n to both \nuse TSLint to catch probable bugs and enforce style\n and \ninstall dependencies with npm now\n.\n\n\nOur backend code is now in the \nfunctions\n directory, let's move there:\n\n\ncd functions\n\n\n\n\n\nWe will need some dependencies, first of all \nsteemconnect-firebase-functions\n:\n\n\nnpm install steemconnect-firebase-functions --save\n\n\n\n\n\nand \nCORS\n:\n\n\nnpm install cors --save\nnpm install @types/cors --save-dev\n\n\n\n\n\nNext, go back to \nFirebase Console\n. We are going to mint Custom Firebase Auth Tokens, so we need service account credentials:\n\n\n\n\nand then click \nGENERATE NEW PRIVATE KEY\n.\n\n\n\n\nMove downloaded file to our backend root folder (\nfunctions\n) and rename it to \nserviceAccountKey.json\n. Also, make sure you \ndon't expose it\n (add this file to .gitignore etc.).\n\n\nOnce done, open your favorite code editor and paste the code below to \nsrc/index.ts\n:\n\n\n// IMPORTS\n\n\n\nimport\n \n{\n\n  \ngetAuthorizationUrl\n,\n\n  \ngetAccessToken\n,\n\n  \nmintFirebaseToken\n,\n\n  \nScope\n\n\n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nimport\n \n*\n \nas\n \nfunctions\n \nfrom\n \n'firebase-functions'\n;\n\n\nimport\n \n*\n \nas\n \nadmin\n \nfrom\n \n'firebase-admin'\n;\n\n\n\nimport\n \n*\n \nas\n \nCORS\n \nfrom\n \n'cors'\n;\n\n\n\nconst\n \nserviceAccount\n \n=\n \nrequire\n(\n'../serviceAccountKey.json'\n);\n\n\n\n// CONFIGURATION\n\n\n\nconst\n \ncors\n \n=\n \nCORS\n({\n \norigin\n: \ntrue\n \n});\n\n\n\nadmin\n.\ninitializeApp\n({\n\n  \ncredential\n: \nadmin.credential.cert\n(\nserviceAccount\n)\n\n\n});\n\n\n\nconst\n \nredirectUri\n \n=\n \n'http://localhost:4200/redirect'\n;\n\n\nconst\n \nscope\n: \nArray\n<\nScope\n>\n \n=\n \n[\n'login'\n];\n\n\n\nconst\n \nclientId\n \n=\n \n'YOUR_CLIENT_ID'\n;\n\n\nconst\n \nclientSecret\n \n=\n \n'YOUR_CLIENT_SECRET'\n;\n\n\n\n// FUNCTIONS\n\n\n\nexport\n \nconst\n \nredirect\n \n=\n \nfunctions\n.\nhttps\n.\nonRequest\n((\nreq\n,\n \nres\n)\n \n=>\n \n{\n\n  \nconst\n \nendpoint\n \n=\n \ngetAuthorizationUrl\n({\n \nclientId\n,\n \nredirectUri\n,\n \nscope\n \n});\n\n  \nres\n.\nredirect\n(\nendpoint\n);\n\n\n});\n\n\n\nexport\n \nconst\n \ncallback\n \n=\n \nfunctions\n.\nhttps\n.\nonRequest\n((\nreq\n,\n \nres\n)\n \n=>\n \n{\n\n  \ncors\n(\nreq\n,\n \nres\n,\n \n()\n \n=>\n \n{\n\n    \nhandleCallback\n(\nreq\n)\n\n      \n.\nthen\n(\ntoken\n \n=>\n \nres\n.\nstatus\n(\n200\n).\nsend\n({\n \ntoken\n \n}))\n\n      \n.\ncatch\n(\nerr\n \n=>\n \nres\n.\nstatus\n(\n400\n).\nsend\n(\nerr\n));\n\n  \n});\n\n\n});\n\n\n\n// HELPER FUNCTION\n\n\n\nasync\n \nfunction\n \nhandleCallback\n(\nreq\n)\n \n{\n\n  \nconst\n \ncode\n \n=\n \nreq\n.\nquery\n.\ncode\n;\n\n\n  \nconst\n \naccessToken\n \n=\n \nawait\n \ngetAccessToken\n({\n\n    \nclientId\n,\n\n    \nclientSecret\n,\n\n    \nredirectUri\n,\n\n    \ncode\n\n  \n});\n\n  \nconst\n \nuid\n \n=\n \n`steemconnect:\n${\naccessToken\n.\nusername\n}\n`\n;\n\n\n  \nconst\n \nfirebaseToken\n \n=\n \nawait\n \nmintFirebaseToken\n(\nadmin\n,\n \nuid\n);\n\n\n  \nreturn\n \nfirebaseToken\n;\n\n\n}\n\n\n\n\n\n\nWhat's going on there?\n\n\nImports\n\n\nNothing fancy there, we are just importing modules we will need later in this file. The worth to mention is fact that we import \nonly three functions\n from \nsteemconnect-firebase-functions\n, but \nthere are more of them\n, and \nwill be even more\n ;)\n\n\nWe just don't need more for this app - we will only identify user identity and then mint custom auth token based on his username.\n\n\nConfiguration\n\n\nIn this section you have to paste your own \nclientId\n and \nclientSecret\n. To get them, go back to \nSteemConnect dashboard\n, then go to \nMy apps\n and click on your app name. There you have both of these values.\n\n\nAlso, make sure you don't expose this file - \nclient secret is a sensitive value\n! We paste them as they are only for the purpose of local running. If you decide to deploy your app you will have another way to insert them into your code. More information in the last section of this post.\n\n\nFunctions\n\n\nThis is the part of the file where magic happens. We have defined two Cloud Functions - \nredirect\n and \ncallback\n. Both react to any \nhttp requests\n. It means that each time we make a request or simply navigate to URL dedicated to each function, the code inside it is gonna run.\n\n\nThe \nredirect\n function is responsible for handling the \nstep 2\n of OAuth2 Authorization Code Grant (see diagram above). It uses \ngetAuthorizationUrl\n function from \nsteemconnect-firebase-functions\n library.\n\n\nOn the other hand, the \ncallback\n function doesn't handle just one step. It actually handles two - \nstep 5 and 7\n. To do so, it uses a helper async function \nhandleCallback\n.\n\n\nHelper function\n\n\nThe \nhandleCallback\n async function uses two functions from \nsteemconnect-firebase-functions\n library - \ngetAccessToken\n (\nstep 5\n) and \nmintFirebaseToken\n (\nstep 7\n).\n\n\nIt's quite obvious what they do, but fortunately you don't have to worry how to implement functionality they provide. Cool, isn't it?\n\n\nAlso, at this point, you have an access to \naccess token\n. Based on the scope, access token enables client to do different operations on the behalf of the user.\n\n\nSo, in this helper function, we also could save this token in the Cloud Firestore for a later use - \nsaveAccessToken\n function from \nsteemconnect-firebase-functions\n would do the job, but make sure to \ndeny access to each document of the \nsteemconnectToken\n collection\n later with the Firestore security rules! More about them in a separate section and in the references.\n\n\nWe could also get more user details than just a username using the \ngetUserData\n function, again from my library.\n\n\nBroadcasting operations to the blockchain isn't anything fancy too - as we have access token at this point (remember it requires different scope than \nlogin\n) we could use the \nbroadcastOperations\n function.\n\n\nRunning functions locally\n\n\nWe have almost everything set up to run our backend locally. There are actually two more commands you have to run in the backend root folder:\n\n\nnpm run build\n\n\n\n\n\nand then:\n\n\nfirebase serve --only functions\n\n\n\n\n\nKeep them running, because we will need them in the frontend app, which we are going to start building right now.\n\n\nFrontend\n\n\nOur frontend application has two important roles in the OAuth2 flow - handle \nstep 1\n and \nstep 4\n. In addition, it has to make use of the token that \ncallback\n Cloud Function responses with if minting custom auth token succeed. Quite a lot of work to do, so let's start!\n\n\nIf you are in the \nfunctions\n directory, go back to Angular project:\n\n\ncd ../\n\n\n\n\n\nbut make sure functions are still running!\n\n\nThe first step in building Firebase frontend in Angular is usually configuring \nAngularFire2\n:\n\n\nnpm install angularfire2 firebase --save\n\n\n\n\n\nonce installed, go back to \nFirebase Console\n, choose your project and click \nAdd Firebase to your web app\n. Copy all properties of config object and paste them inside \nsrc/environments/environment.ts\n file like that:\n\n\nexport\n \nconst\n \nenvironment\n \n=\n \n{\n\n  \nproduction\n:\n \nfalse\n,\n\n  \nfirebaseConfig\n:\n \n{\n\n    \napiKey\n:\n \n'<your-key>'\n,\n\n    \nauthDomain\n:\n \n'<your-project-authdomain>'\n,\n\n    \ndatabaseURL\n:\n \n'<your-database-URL>'\n,\n\n    \nprojectId\n:\n \n'<your-project-id>'\n,\n\n    \nstorageBucket\n:\n \n'<your-storage-bucket>'\n,\n\n    \nmessagingSenderId\n:\n \n'<your-messaging-sender-id>'\n\n  \n}\n\n\n};\n\n\n\n\n\n\nWe also have to import a few AngularFire2 modules. Our AppModule should look like that for now:\n\n\nimport\n \n{\n \nBrowserModule\n \n}\n \nfrom\n \n'@angular/platform-browser'\n;\n\n\nimport\n \n{\n \nNgModule\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\nimport\n \n{\n \nAngularFireModule\n \n}\n \nfrom\n \n'angularfire2'\n;\n\n\nimport\n \n{\n \nAngularFireAuthModule\n \n}\n \nfrom\n \n'angularfire2/auth'\n;\n\n\nimport\n \n{\n \nAngularFirestoreModule\n \n}\n \nfrom\n \n'angularfire2/firestore'\n;\n\n\n\nimport\n \n{\n \nAppComponent\n \n}\n \nfrom\n \n'./app.component'\n;\n\n\n\nimport\n \n{\n \nenvironment\n \n}\n \nfrom\n \n'./../environments/environment'\n;\n\n\n\n@\nNgModule\n({\n\n  \ndeclarations\n:\n \n[\nAppComponent\n],\n\n  \nimports\n:\n \n[\n\n    \nBrowserModule\n,\n\n    \nAngularFireModule\n.\ninitializeApp\n(\nenvironment\n.\nfirebaseConfig\n),\n\n    \nAngularFireAuthModule\n,\n\n    \nAngularFirestoreModule\n\n  \n],\n\n  \nproviders\n:\n \n[],\n\n  \nbootstrap\n:\n \n[\nAppComponent\n]\n\n\n})\n\n\nexport\n \nclass\n \nAppModule\n \n{}\n\n\n\n\n\n\nNext let's create an AuthService, which will handle most of the user authentication:\n\n\nng g s auth -m app\n\n\n\n\n\nnow fill \nauth.service.ts\n with the following code:\n\n\nimport\n \n{\n \nInjectable\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\nimport\n \n{\n \nObservable\n \n}\n \nfrom\n \n'rxjs/Observable'\n;\n\n\nimport\n \n{\n \nswitchMap\n \n}\n \nfrom\n \n'rxjs/operators'\n;\n\n\n\nimport\n \n{\n \nAngularFireAuth\n \n}\n \nfrom\n \n'angularfire2/auth'\n;\n\n\n\n@Injectable\n()\n\n\nexport\n \nclass\n \nAuthService\n \n{\n\n  \nuser\n: \nObservable\n<\nany\n>\n;\n\n\n  \nconstructor\n(\nprivate\n \nafAuth\n: \nAngularFireAuth\n)\n \n{\n\n    \nthis\n.\nuser\n \n=\n \nthis\n.\nafAuth\n.\nauthState\n;\n\n  \n}\n\n\n  \nlogin() {\n\n    \nconst\n \npopup\n \n=\n \nwindow\n.\nopen\n(\n\n      \n'redirect_function_url'\n,\n\n      \n'_blank'\n,\n\n      \n'height=700,width=800'\n\n    \n);\n\n  \n}\n\n\n  \nsignIn\n(\ntoken\n)\n \n{\n\n    \nreturn\n \nthis\n.\nafAuth\n.\nauth\n\n      \n.\nsignInWithCustomToken\n(\ntoken\n)\n\n      \n.\nthen\n(()\n \n=>\n \nwindow\n.\nclose\n());\n\n  \n}\n\n\n  \nsignout() {\n\n    \nthis\n.\nafAuth\n.\nauth\n.\nsignOut\n();\n\n  \n}\n\n\n}\n\n\n\n\n\n\nand replace \nredirect_function_url\n in the \nlogin\n method with the actual URL to \nredirect Function\n.\n\n\nBefore we create components to complete our OAuth2 flow, let's ensure it will look pretty. \nBootstrap\n seems like a good choice, let's add it to \nsrc/index.html\n:\n\n\n<!doctype html>\n\n\n<\nhtml\n \nlang\n=\n\"en\"\n>\n\n\n\n<\nhead\n>\n\n  \n<\nmeta\n \ncharset\n=\n\"utf-8\"\n>\n\n  \n<\ntitle\n>\nSteemconnectFirebaseFunctionsExample\n</\ntitle\n>\n\n  \n<\nbase\n \nhref\n=\n\"/\"\n>\n\n\n  \n<\nmeta\n \nname\n=\n\"viewport\"\n \ncontent\n=\n\"width=device-width, initial-scale=1\"\n>\n\n  \n<\nlink\n \nrel\n=\n\"icon\"\n \ntype\n=\n\"image/x-icon\"\n \nhref\n=\n\"favicon.ico\"\n>\n\n\n  \n<\nlink\n \nrel\n=\n\"stylesheet\"\n \nhref\n=\n\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\"\n \nintegrity\n=\n\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\"\n\n    \ncrossorigin\n=\n\"anonymous\"\n>\n\n\n</\nhead\n>\n\n\n\n<\nbody\n>\n\n  \n<\napp-root\n></\napp-root\n>\n\n\n</\nbody\n>\n\n\n\n</\nhtml\n>\n\n\n\n\n\n\nAt this point, we need two more components - \nRedirectComponent\n and \nUserDetailsComponent\n. The first one will handle the \nstep 4\n and the second one will be responsible to provide the functionality of \nstep 1\n.\n\n\nRedirectComponent\n will be created each time user hit the \nhttp://localhost:4200/redirect\n URL. To be more precise - user won't navigate there, but SteemConnect will redirect there after successful login with the \ncode\n as a query parameter, and the job of RedirectComponent will be to deliver this code to \ncallback\n Cloud Function and make a use of its response - custom auth token.\n\n\nOn the other hand, \nUserDetailsComponent\n will display a \nLogin with SteemConnect\n button for not logged in users, and \nuid\n along with \nSignout\n button for logged in users.\n\n\nLet's generate them:\n\n\nng g c redirect\nng g c user-details\n\n\n\n\n\nThe \nredirect.component.ts\n should look like that:\n\n\nimport\n \n{\n \nComponent\n,\n \nOnInit\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nHttpClient\n \n}\n \nfrom\n \n'@angular/common/http'\n;\n\n\nimport\n \n{\n \nRouter\n,\n \nActivatedRoute\n,\n \nParams\n \n}\n \nfrom\n \n'@angular/router'\n;\n\n\n\nimport\n \n{\n \nswitchMap\n \n}\n \nfrom\n \n'rxjs/operators'\n;\n\n\nimport\n \n{\n \nfromPromise\n \n}\n \nfrom\n \n'rxjs/observable/fromPromise'\n;\n\n\n\nimport\n \n{\n \nAuthService\n \n}\n \nfrom\n \n'../auth.service'\n;\n\n\n\n@Component\n({\n\n  \nselector\n:\n \n'app-redirect'\n,\n\n  \ntemplateUrl\n:\n \n'./redirect.component.html'\n,\n\n  \nstyleUrls\n:\n \n[\n'./redirect.component.css'\n]\n\n\n})\n\n\nexport\n \nclass\n \nRedirectComponent\n \nimplements\n \nOnInit\n \n{\n\n  \nconstructor\n(\n\n    \nprivate\n \nhttp\n: \nHttpClient\n,\n\n    \nprivate\n \nroute\n: \nActivatedRoute\n,\n\n    \nprivate\n \nauth\n: \nAuthService\n\n  \n)\n \n{}\n\n\n  \nngOnInit() {\n\n    \nconst\n \ncode\n \n=\n \nthis\n.\nroute\n.\nsnapshot\n.\nqueryParamMap\n.\nget\n(\n'code'\n);\n\n    \nconst\n \nurl\n \n=\n \n`<CALLBACK-FUNCTION-URL>/callback?code=\n${\ncode\n}\n`\n;\n\n\n    \nif\n \n(\ncode\n)\n \n{\n\n      \nthis\n.\nhttp\n\n        \n.\npost\n<\nany\n>\n(\nurl\n,\n \n{})\n\n        \n.\npipe\n(\n\n          \nswitchMap\n(\nres\n \n=>\n \n{\n\n            \nreturn\n \nfromPromise\n(\nthis\n.\nauth\n.\nsignIn\n(\nres\n.\ntoken\n));\n\n          \n})\n\n        \n)\n\n        \n.\nsubscribe\n();\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\nMake sure to replace \n<CALLBACK-FUNCTION-URL>\n with the actual URL of the \ncallback\n Function.\n\n\nBoth \nredirect.component.html\n and \nredirect.component.css\n are not that important, because this component will be displayed only for short period of time, so you can leave it as it is, change text in the HTML to something like \nLoading...\n, or even make a fancy loading spinner on your own :)\n\n\nNow let's move to \nUserDetailsComponent\n; \nuser-details.component.ts\n is simple:\n\n\nimport\n \n{\n \nComponent\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\nimport\n \n{\n \nAuthService\n \n}\n \nfrom\n \n'./../auth.service'\n;\n\n\n\n@Component\n({\n\n  \nselector\n:\n \n'app-user-details'\n,\n\n  \ntemplateUrl\n:\n \n'./user-details.component.html'\n,\n\n  \nstyleUrls\n:\n \n[\n'./user-details.component.css'\n]\n\n\n})\n\n\nexport\n \nclass\n \nUserDetailsComponent\n \n{\n\n  \nconstructor\n(\npublic\n \nauth\n: \nAuthService\n)\n \n{}\n\n\n}\n\n\n\n\n\n\nthe entire magic happens in its template \nuser-details.component.html\n:\n\n\n<\ndiv\n \n*\nngIf\n=\n\"auth.user | async as user; else guest\"\n>\n\n  \n<\ndiv\n \nclass\n=\n\"card\"\n>\n\n    \n<\ndiv\n \nclass\n=\n\"card-body\"\n>\n\n      \n<\nh5\n \nclass\n=\n\"card-title\"\n>\nHello!\n</\nh5\n>\n\n      \n<\nh6\n \nclass\n=\n\"card-subtitle mb-2 text-muted\"\n>\nYou are logged into Firebase via SteemConnect!\n</\nh6\n>\n\n      \n<\np\n \nclass\n=\n\"card-text\"\n>\nThat's your uid:\n        \n<\nb\n>\n{{ user.uid }}\n</\nb\n>\n\n      \n</\np\n>\n\n      \n<\nbutton\n \n(\nclick\n)=\"\nauth\n.\nsignout\n()\"\n \nclass\n=\n\"btn btn-warning\"\n>\nSignout\n</\nbutton\n>\n\n    \n</\ndiv\n>\n\n  \n</\ndiv\n>\n\n\n</\ndiv\n>\n\n\n\n<\nng-template\n \n#\nguest\n>\n\n  \n<\nbutton\n \n(\nclick\n)=\"\nauth\n.\nlogin\n()\"\n \nclass\n=\n\"btn btn-primary\"\n>\nLogin with SteemConnect!\n</\nbutton\n>\n\n\n</\nng-template\n>\n\n\n\n\n\n\nTo make signing in feature work, we need to do one more thing - set up routing. Let's start with the \napp.component.html\n, where \nrouter-outlet\n is gonna be placed:\n\n\n<\nnav\n \nclass\n=\n\"navbar navbar-expand-lg navbar-light bg-light\"\n>\n\n  \n<\na\n \nclass\n=\n\"navbar-brand\"\n \nhref\n=\n\"\"\n>\nsteemconnect-firebase-functions\n</\na\n>\n\n  \n<\ndiv\n \nclass\n=\n\"navbar-nav\"\n>\n\n    \n<\na\n \nclass\n=\n\"nav-item nav-link\"\n \nhref\n=\n\"https://github.com/jakipatryk/steemconnect-firebase-functions-example\"\n>\nGithub\n</\na\n>\n\n  \n</\ndiv\n>\n\n\n</\nnav\n>\n\n\n\n<\ndiv\n \nclass\n=\n\"container\"\n>\n\n  \n<\ndiv\n \nclass\n=\n\"row\"\n>\n\n    \n<\ndiv\n \nclass\n=\n\"col-xs-12 col-md-4\"\n>\n\n      \n<\nrouter-outlet\n></\nrouter-outlet\n>\n\n    \n</\ndiv\n>\n\n\n    \n<\ndiv\n \nclass\n=\n\"col-xs-12 col-md-8\"\n>\n\n      We will add messages here later on.\n    \n</\ndiv\n>\n\n  \n</\ndiv\n>\n\n\n</\ndiv\n>\n\n\n\n\n\n\nThe last step for now is configuration of routes in \napp.module.ts\n, this file should look like following for now:\n\n\nimport\n \n{\n \nBrowserModule\n \n}\n \nfrom\n \n'@angular/platform-browser'\n;\n\n\nimport\n \n{\n \nNgModule\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nRoutes\n,\n \nRouterModule\n \n}\n \nfrom\n \n'@angular/router'\n;\n\n\nimport\n \n{\n \nHttpClientModule\n \n}\n \nfrom\n \n'@angular/common/http'\n;\n\n\n\nimport\n \n{\n \nAngularFireModule\n \n}\n \nfrom\n \n'angularfire2'\n;\n\n\nimport\n \n{\n \nAngularFireAuthModule\n \n}\n \nfrom\n \n'angularfire2/auth'\n;\n\n\nimport\n \n{\n \nAngularFirestoreModule\n \n}\n \nfrom\n \n'angularfire2/firestore'\n;\n\n\n\nimport\n \n{\n \nAppComponent\n \n}\n \nfrom\n \n'./app.component'\n;\n\n\nimport\n \n{\n \nRedirectComponent\n \n}\n \nfrom\n \n'./redirect/redirect.component'\n;\n\n\nimport\n \n{\n \nUserDetailsComponent\n \n}\n \nfrom\n \n'./user-details/user-details.component'\n;\n\n\n\nimport\n \n{\n \nAuthService\n \n}\n \nfrom\n \n'./auth.service'\n;\n\n\n\nimport\n \n{\n \nenvironment\n \n}\n \nfrom\n \n'./../environments/environment'\n;\n\n\n\nconst\n \nroutes\n: \nRoutes\n \n=\n \n[\n\n  \n{\n \npath\n:\n \n''\n,\n \ncomponent\n: \nUserDetailsComponent\n \n},\n\n  \n{\n \npath\n:\n \n'redirect'\n,\n \ncomponent\n: \nRedirectComponent\n \n}\n\n\n];\n\n\n\n@NgModule\n({\n\n  \ndeclarations\n:\n \n[\nAppComponent\n,\n \nRedirectComponent\n,\n \nUserDetailsComponent\n],\n\n  \nimports\n:\n \n[\n\n    \nBrowserModule\n,\n\n    \nRouterModule\n.\nforRoot\n(\nroutes\n),\n\n    \nHttpClientModule\n,\n\n    \nAngularFireModule\n.\ninitializeApp\n(\nenvironment\n.\nfirebaseConfig\n),\n\n    \nAngularFireAuthModule\n,\n\n    \nAngularFirestoreModule\n\n  \n],\n\n  \nproviders\n:\n \n[\nAuthService\n],\n\n  \nbootstrap\n:\n \n[\nAppComponent\n]\n\n\n})\n\n\nexport\n \nclass\n \nAppModule\n \n{}\n\n\n\n\n\n\nAaaand... we have implemented the entire OAuth2 Authorization Code Grant and the signing in with the Firebase custom auth token! Don't you believe? Ok, let's test it then!\n\n\nng serve\n\n\n\n\n\nnow just open up your browser and navigate to \nhttp://localhost:4200\n, that's what you are gonna see after successful sign in:\n\n\n\n\nalso, the \nAuthentication\n page in the Firebase Console has changed ;)\n\n\n\n\nI could have ended this tutorial here, but I want to show a really trivial example of what you can do now. Even though it is not gonna be complex, you will see that from this point making Steem-related apps that doesn't add anything to the blockchain is easy. Do you wonder why would anyone create an Steem-related app that don't publish anything to the blockchain? Check \nSteemProjects\n by @noisy.\n\n\nMessages\n\n\nIn this section we will add messages that any logged in user would be able to add. At the end our app will look like the \nexample app\n.\n\n\nBefore we move to the code, you have to turn on Cloud Firestore. To do so, simply go to the \nFirebase Console\n, choose your project, go to \nDatabase\n page and click \nTRY FIRESTORE BETA\n (select \nStart in test mode\n when asked).\n\n\nLet's start with generating two presentational components - \nMessageDetailsComponent\n and \nMessageFormComponent\n, one container component - \nMessageListComponent\n, a service to handle data flow between the Angular app and the Firestore - \nMessageService\n and the interface of \nMessage\n:\n\n\nng g c messages/message-details\nng g c messages/message-form\nng g c messages/message-list\nng g s messages/message -m app\nng g i messages/models/message\n\n\n\n\n\nOur \nMessage\n interface should look like that:\n\n\nexport\n \ninterface\n \nMessage\n \n{\n\n  \nauthor\n: \nstring\n;\n\n  \ntext\n: \nstring\n;\n\n\n}\n\n\n\n\n\n\nNow let's bring some life to our presentational components starting with \nMessageFormComponent\n. This kind of component shouldn't be aware of any data, so in \nmessage-form.component.ts\n we should use \n@Output\n decorator and \nEventEmmiter\n to emit values of our reactive form once submited:\n\n\nimport\n \n{\n \nComponent\n,\n \nOnInit\n,\n \nEventEmitter\n,\n \nOutput\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nFormBuilder\n,\n \nFormGroup\n,\n \nValidators\n \n}\n \nfrom\n \n'@angular/forms'\n;\n\n\n\nimport\n \n{\n \nMessage\n \n}\n \nfrom\n \n'../models/message'\n;\n\n\n\n@Component\n({\n\n  \nselector\n:\n \n'app-message-form'\n,\n\n  \ntemplateUrl\n:\n \n'./message-form.component.html'\n,\n\n  \nstyleUrls\n:\n \n[\n'./message-form.component.css'\n]\n\n\n})\n\n\nexport\n \nclass\n \nMessageFormComponent\n \nimplements\n \nOnInit\n \n{\n\n  \n@Output\n()\n \nmessageEmitter\n: \nEventEmitter\n<\nMessage\n>\n \n=\n \nnew\n \nEventEmitter\n<\nMessage\n>\n();\n\n\n  \nmessageForm\n: \nFormGroup\n;\n\n\n  \nconstructor\n(\nprivate\n \nformBuilder\n: \nFormBuilder\n)\n \n{}\n\n\n  \nngOnInit() {\n\n    \nthis\n.\ncreateMessageForm\n();\n\n  \n}\n\n\n  \naddMessage() {\n\n    \nthis\n.\nmessageEmitter\n.\nemit\n({\n\n      \n...\nthis\n.\nmessageForm\n.\nvalue\n\n    \n});\n\n  \n}\n\n\n  \nprivate\n \ncreateMessageForm() {\n\n    \nthis\n.\nmessageForm\n \n=\n \nthis\n.\nformBuilder\n.\ngroup\n({\n\n      \ntext\n:\n \n[\n''\n,\n \nValidators\n.\nrequired\n]\n\n    \n});\n\n  \n}\n\n\n}\n\n\n\n\n\n\nthe template of this component is nothing fancy, just a simple form:\n\n\n<\nform\n \n[\nformGroup\n]=\"\nmessageForm\n\"\n \n(\nngSubmit\n)=\"\naddMessage\n()\"\n>\n\n  \n<\ndiv\n \nclass\n=\n\"form-group\"\n>\n\n    \n<\nlabel\n \nfor\n=\n\"textInput\"\n>\nYour message:\n</\nlabel\n>\n\n    \n<\ninput\n \nformControlName\n=\n\"text\"\n \nid\n=\n\"textInput\"\n \nclass\n=\n\"form-control\"\n \naria-describedby\n=\n\"textHelper\"\n>\n\n    \n<\nsmall\n \nid\n=\n\"textHelper\"\n \nclass\n=\n\"form-text text-muted\"\n>\nIt's NOT gonna be published on the Steem blockchain.\n</\nsmall\n>\n\n  \n</\ndiv\n>\n\n  \n<\nbutton\n \ntype\n=\n\"submit\"\n \nclass\n=\n\"btn btn-primary\"\n>\nSubmit\n</\nbutton\n>\n\n\n</\nform\n>\n\n\n\n\n\n\nThe second presentational component is going to be responsible to display the details of a message (text, author); \nmessage-details.component.ts\n:\n\n\nimport\n \n{\n \nComponent\n,\n \nInput\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nMessage\n \n}\n \nfrom\n \n'../models/message'\n;\n\n\n\n@Component\n({\n\n  \nselector\n:\n \n'app-message-details'\n,\n\n  \ntemplateUrl\n:\n \n'./message-details.component.html'\n,\n\n  \nstyleUrls\n:\n \n[\n'./message-details.component.css'\n]\n\n\n})\n\n\nexport\n \nclass\n \nMessageDetailsComponent\n \n{\n\n  \n@Input\n()\n \nmessage\n: \nMessage\n;\n\n\n}\n\n\n\n\n\n\nand \nmessage-details.component.html\n:\n\n\n<\ndiv\n \nclass\n=\n\"card\"\n>\n\n  \n<\ndiv\n \nclass\n=\n\"card-body\"\n>\n\n    \n<\ndiv\n \nclass\n=\n\"card-title mb-2 text-muted\"\n>\n{{ message.author | uidToUsername }}\n</\ndiv\n>\n\n    \n<\ndiv\n \nclass\n=\n\"card-text\"\n>\n{{ message.text }}\n</\ndiv\n>\n\n  \n</\ndiv\n>\n\n\n</\ndiv\n>\n\n\n\n\n\n\nAs you can see, we use \nuidToUsername\n pipe, which is a custom pipe, so we have to generate it:\n\n\nng g p messages/pipes/uid-to-username\n\n\n\n\n\nIt transforms uid to username, for example \nsteemconnect:jakipatryk\n to \njakipatryk\n:\n\n\nimport\n \n{\n \nPipe\n,\n \nPipeTransform\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\n@Pipe\n({\n\n  \nname\n:\n \n'uidToUsername'\n\n\n})\n\n\nexport\n \nclass\n \nUidToUsernamePipe\n \nimplements\n \nPipeTransform\n \n{\n\n  \ntransform\n(\nvalue\n: \nstring\n,\n \nargs?\n: \nany\n)\n:\n \nstring\n \n{\n\n    \nconst\n \nusername\n \n=\n \nvalue\n.\nreplace\n(\n'steemconnect:'\n,\n \n''\n);\n\n    \nreturn\n \nusername\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\nWe are almost ready to power up our presentational components with data. Yes, almost. We have to complete two more tasks. Updating \nMessageService\n is a perfect choice now:\n\n\nimport\n \n{\n \nInjectable\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\nimport\n \n{\n\n  \nAngularFirestore\n,\n\n  \nAngularFirestoreDocument\n\n\n}\n \nfrom\n \n'angularfire2/firestore'\n;\n\n\n\nimport\n \n{\n \nObservable\n \n}\n \nfrom\n \n'rxjs/Observable'\n;\n\n\n\nimport\n \n{\n \nMessage\n \n}\n \nfrom\n \n'./models/message'\n;\n\n\n\n@Injectable\n()\n\n\nexport\n \nclass\n \nMessageService\n \n{\n\n  \nconstructor\n(\nprivate\n \nafs\n: \nAngularFirestore\n)\n \n{}\n\n\n  \naddMessage\n(\ndata\n: \nMessage\n)\n \n{\n\n    \nreturn\n \nthis\n.\nafs\n.\ncollection\n(\n'messages'\n).\nadd\n({\n \n...\ndata\n \n});\n\n  \n}\n\n\n  \ngetMessages\n()\n:\n \nObservable\n<\nMessage\n[]\n>\n \n{\n\n    \nreturn\n \nthis\n.\nafs\n.\ncollection\n(\n'messages'\n).\nvalueChanges\n()\n \nas\n \nObservable\n<\n\n      \nMessage\n[]\n\n    \n>\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\nNow we can use it in our container component - \nMessageListComponent\n:\n\n\nmessage-list.component.ts\n:\n\n\nimport\n \n{\n \nComponent\n,\n \nOnInit\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\nimport\n \n{\n \nMessageService\n \n}\n \nfrom\n \n'./../message.service'\n;\n\n\nimport\n \n{\n \nAuthService\n \n}\n \nfrom\n \n'../../auth.service'\n;\n\n\n\nimport\n \n{\n \nMessage\n \n}\n \nfrom\n \n'../models/message'\n;\n\n\n\nimport\n \n{\n \nObservable\n \n}\n \nfrom\n \n'rxjs/Observable'\n;\n\n\n\n@Component\n({\n\n  \nselector\n:\n \n'app-message-list'\n,\n\n  \ntemplateUrl\n:\n \n'./message-list.component.html'\n,\n\n  \nstyleUrls\n:\n \n[\n'./message-list.component.css'\n]\n\n\n})\n\n\nexport\n \nclass\n \nMessageListComponent\n \nimplements\n \nOnInit\n \n{\n\n  \ncurrentUser\n;\n\n  \nmessages\n: \nObservable\n<\nMessage\n[]\n>\n;\n\n\n  \nconstructor\n(\n\n    \nprivate\n \nmessageService\n: \nMessageService\n,\n\n    \npublic\n \nauth\n: \nAuthService\n\n  \n)\n \n{}\n\n\n  \nngOnInit() {\n\n    \nthis\n.\nauth\n.\nuser\n.\nsubscribe\n(\nuser\n \n=>\n \n{\n\n      \nthis\n.\ncurrentUser\n \n=\n \nuser\n;\n\n    \n});\n\n    \nthis\n.\nmessages\n \n=\n \nthis\n.\nmessageService\n.\ngetMessages\n();\n\n  \n}\n\n\n  \naddMessage\n(\ndata\n)\n \n{\n\n    \nconst\n \ndataWithAuthor\n \n=\n \n{\n \n...\ndata\n,\n \nauthor\n: \nthis.currentUser.uid\n \n};\n\n    \nthis\n.\nmessageService\n.\naddMessage\n(\ndataWithAuthor\n);\n\n  \n}\n\n\n}\n\n\n\n\n\n\nmessage-list.component.html\n:\n\n\n<\ndiv\n \n*\nngIf\n=\n\"auth.user | async as user\"\n>\n\n  \n<\napp-message-form\n \n(\nmessageEmitter\n)=\"\naddMessage\n($\nevent\n)\"\n></\napp-message-form\n>\n\n\n</\ndiv\n>\n\n\n\n\n<\ndiv\n \n*\nngIf\n=\n\"!(messages | async)\"\n>\n\n  Loading messages...\n\n</\ndiv\n>\n\n\n\n<\napp-message-details\n \n*\nngFor\n=\n\"let message of messages | async\"\n \n[\nmessage\n]=\"\nmessage\n\"\n></\napp-message-details\n>\n\n\n\n\n\n\nWe are almost done. Let's now add our container component to \nAppComponent\n, its template should have the following code:\n\n\n<\nnav\n \nclass\n=\n\"navbar navbar-expand-lg navbar-light bg-light\"\n>\n\n  \n<\na\n \nclass\n=\n\"navbar-brand\"\n \nhref\n=\n\"\"\n>\nsteemconnect-firebase-functions\n</\na\n>\n\n  \n<\ndiv\n \nclass\n=\n\"navbar-nav\"\n>\n\n    \n<\na\n \nclass\n=\n\"nav-item nav-link\"\n \nhref\n=\n\"https://github.com/jakipatryk/steemconnect-firebase-functions-example\"\n>\nGithub\n</\na\n>\n\n  \n</\ndiv\n>\n\n\n</\nnav\n>\n\n\n\n<\ndiv\n \nclass\n=\n\"container\"\n>\n\n  \n<\ndiv\n \nclass\n=\n\"row\"\n>\n\n    \n<\ndiv\n \nclass\n=\n\"col-xs-12 col-md-4\"\n>\n\n      \n<\nrouter-outlet\n></\nrouter-outlet\n>\n\n    \n</\ndiv\n>\n\n\n    \n<\ndiv\n \nclass\n=\n\"col-xs-12 col-md-8\"\n>\n\n      \n<\napp-message-list\n></\napp-message-list\n>\n\n    \n</\ndiv\n>\n\n  \n</\ndiv\n>\n\n\n</\ndiv\n>\n\n\n\n\n\n\nThe last step is to make sure we have included everything in the \nAppModule\n:\n\n\nimport\n \n{\n \nBrowserModule\n \n}\n \nfrom\n \n'@angular/platform-browser'\n;\n\n\nimport\n \n{\n \nNgModule\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nHttpClientModule\n \n}\n \nfrom\n \n'@angular/common/http'\n;\n\n\nimport\n \n{\n \nRoutes\n,\n \nRouterModule\n \n}\n \nfrom\n \n'@angular/router'\n;\n\n\nimport\n \n{\n \nReactiveFormsModule\n \n}\n \nfrom\n \n'@angular/forms'\n;\n\n\n\nimport\n \n{\n \nAngularFireModule\n \n}\n \nfrom\n \n'angularfire2'\n;\n\n\nimport\n \n{\n \nAngularFireAuthModule\n \n}\n \nfrom\n \n'angularfire2/auth'\n;\n\n\nimport\n \n{\n \nAngularFirestoreModule\n \n}\n \nfrom\n \n'angularfire2/firestore'\n;\n\n\n\nimport\n \n{\n \nAppComponent\n \n}\n \nfrom\n \n'./app.component'\n;\n\n\nimport\n \n{\n \nRedirectComponent\n \n}\n \nfrom\n \n'./redirect/redirect.component'\n;\n\n\nimport\n \n{\n \nUserDetailsComponent\n \n}\n \nfrom\n \n'./user-details/user-details.component'\n;\n\n\n\nimport\n \n{\n \nAuthService\n \n}\n \nfrom\n \n'./auth.service'\n;\n\n\nimport\n \n{\n \nMessageService\n \n}\n \nfrom\n \n'./messages/message.service'\n;\n\n\n\nimport\n \n{\n \nenvironment\n \n}\n \nfrom\n \n'./../environments/environment'\n;\n\n\nimport\n \n{\n \nMessageListComponent\n \n}\n \nfrom\n \n'./messages/message-list/message-list.component'\n;\n\n\nimport\n \n{\n \nMessageDetailsComponent\n \n}\n \nfrom\n \n'./messages/message-details/message-details.component'\n;\n\n\nimport\n \n{\n \nMessageFormComponent\n \n}\n \nfrom\n \n'./messages/message-form/message-form.component'\n;\n\n\nimport\n \n{\n \nUidToUsernamePipe\n \n}\n \nfrom\n \n'./messages/uid-to-username.pipe'\n;\n\n\n\nconst\n \nroutes\n: \nRoutes\n \n=\n \n[\n\n  \n{\n \npath\n:\n \n''\n,\n \ncomponent\n: \nUserDetailsComponent\n \n},\n\n  \n{\n \npath\n:\n \n'redirect'\n,\n \ncomponent\n: \nRedirectComponent\n \n}\n\n\n];\n\n\n\n@NgModule\n({\n\n  \ndeclarations\n:\n \n[\n\n    \nAppComponent\n,\n\n    \nRedirectComponent\n,\n\n    \nUserDetailsComponent\n,\n\n    \nMessageListComponent\n,\n\n    \nMessageDetailsComponent\n,\n\n    \nMessageFormComponent\n,\n\n    \nUidToUsernamePipe\n\n  \n],\n\n  \nimports\n:\n \n[\n\n    \nBrowserModule\n,\n\n    \nRouterModule\n.\nforRoot\n(\nroutes\n),\n\n    \nHttpClientModule\n,\n\n    \nReactiveFormsModule\n,\n\n    \nAngularFireModule\n.\ninitializeApp\n(\nenvironment\n.\nfirebaseConfig\n),\n\n    \nAngularFireAuthModule\n,\n\n    \nAngularFirestoreModule\n\n  \n],\n\n  \nproviders\n:\n \n[\nAuthService\n,\n \nMessageService\n],\n\n  \nbootstrap\n:\n \n[\nAppComponent\n]\n\n\n})\n\n\nexport\n \nclass\n \nAppModule\n \n{}\n\n\n\n\n\n\nNow simply \nng serve\n the app and enjoy your first Firebase and SteemConnect based application!\n\n\n\n\nBackend once again (security)\n\n\nWe do already have a working app. Cool, but you might remember that you started the database in the \ntest mode\n. While it is ok to use it during the development phase, it is completely wrong to use this mode on the production.\n\n\nWhy? Test mode allows anyone to read, create, update and delete any data in the Firestore. We don't want that.\n\n\nWe want to allow:\n\n\n\n\nanyone to read\n messages\n\n\nlogged in users to create\n messages\n\n\nauthors to update or delete\n their messages\n\n\n\n\nTo achieve this, one has to visit \nFirebase console\n once again, navigate to the project and then to \nDatabase\n page. Here, in the \nRULES\n section, we define our rules.\n\n\nIn case of our app, the rules should be following:\n\n\nservice\n \ncloud\n.\nfirestore\n \n{\n\n  \nmatch\n \n/databases/{database\n}\n/\ndocuments\n \n{\n\n    \nmatch\n \n/messages/{message\n}\n \n{\n\n      \nallow\n \nread\n:\n \nif\n \ntrue\n;\n\n      \nallow\n \nupdate,\n \ndelete\n:\n \nif\n \nrequest\n.\nauth\n.\nuid\n \n==\n \nresource\n.\ndata\n.\nauthor\n;\n\n      \nallow\n \ncreate\n:\n \nif\n \nrequest\n.\nauth\n.\nuid\n \n!=\n \nnull\n;\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\nDeploying the app and Cloud Functions\n\n\nNOTE\n: this section is for those who decided to choose \npaid pricing plan\n (Flame or Blaze).\n\n\nOk, we have everything set up. Now it's time for deployment. However, we have to do some configuration before we enter deploy command.\n\n\nLet's start with the frontend. You might remember that we inserted the Firebase configuration in the \nenvironment.ts\n file. It worked well, but it won't work on the production. Angular CLI takes different file during the build for production - \nenvironment.prod.ts\n.\n\n\nBasically, all you have to do is to copy \nfirebaseConfig\n object from \nenvironment.ts\n to \nenvironment.prod.ts\n, but I highly recomment you create another Firebase project just for production. The setup process will be exactly the same as we did before.\n\n\nNow let's move to backend Cloud Functions. We need to setup clientId and clientSecret as a Firebase variables, so in the terminal move to \nfunctions\n directory and type the following commands:\n\n\nfirebase functions:config:set steemconnect.id=\"YOUR_CLIENT_ID\" steemconnect.secret=\"YOUR_CLIENT_SECRET\"\n\n\n\n\n\nBoth \nid\n and \nsecret\n are of course the same as before. Now let's change a bit our \nindex.ts\n file, instead of:\n\n\nconst\n \nclientId\n \n=\n \n'YOUR_CLIENT_ID'\n;\n\n\nconst\n \nclientSecret\n \n=\n \n'YOUR_CLIENT_SECRET'\n;\n\n\n\n\n\n\nuse:\n\n\nconst\n \nclientId\n \n=\n \nfunctions\n.\nconfig\n().\nsteemconnect\n.\nid\n;\n\n\nconst\n \nclientSecret\n \n=\n \nfunctions\n.\nconfig\n().\nsteemconnect\n.\nsecret\n;\n\n\n\n\n\n\nWe also have to change the \nredirectUri\n. To do so, you have to go to \nFirebase console\n once again and then to your project. This time hit the \nHosting\n page, click \nGET STARTED\n, then \nCONTINUE\n and finally \nFINISH\n. Copy the \ndomain\n and update \nredirectUri\n:\n\n\nconst\n \nredirectUri\n \n=\n \n'https://<YOUR-DOMAIN>/redirect'\n;\n\n\n\n\n\n\nRemember to add this redirectUri to the \nRedirect URI(s)\n at the \nSteemConnect dashboard!\n\n\nNow we can deploy our Cloud Functions!\n\n\nfirebase deploy --only functions\n\n\n\n\n\nIf you are getting an error here, try changing \nfirebase.json\n file from:\n\n\n{\n  \"functions\": {\n    \"predeploy\": [\n      \"npm --prefix $RESOURCE_DIR run lint\",\n      \"npm --prefix $RESOURCE_DIR run build\"\n    ]\n  }\n}\n\n\n\n\n\nto:\n\n\n{\n  \"functions\": {\n    \"predeploy\": [\n      \"npm --prefix %RESOURCE_DIR% run lint\",\n      \"npm --prefix %RESOURCE_DIR% run build\"\n    ]\n  }\n}\n\n\n\n\n\nOnce done, copy the URLs of the Cloud Functions and change the URLs in \nauth.service.ts\n and \nredirect.component.ts\n.\n\n\nWe could - and I would defienietly do so in a serious app - add additional property to environment files, something like \nfunctionsURL\n and add different URLs for production and development, so we could still test our functions and frontend locally. Then we could simply import \nenvironment\n file to both of these files and not change the URL directly, but use the environment variable \nfunctionsURL\n instead. Angular CLI would do its job then.\n\n\nAnyway, whatever option you have chosen, the deployment of the Angular app will look exactly the same. First of all, we have to initialize the \nFirebase Hosting\n. To do so, move to the root folder of Angular app and type the command:\n\n\nfirebase init hosting\n\n\n\n\n\nWhen asked:\n\n\n\n\nWhat do you want to use as your public directory?\n - type \ndist\n\n\nConfigure as a single-page app (rewrite all urls to /index.html)?\n - type \ny\n\n\n\n\nOnce initialized, you have to build your app for production:\n\n\nng build --prod\n\n\n\n\n\nThe last step is to run:\n\n\nfirebase deploy --only hosting\n\n\n\n\n\nNow you can enjoy your deployed app and Cloud Functions and share it with your friends!\n\n\nSummary\n\n\nHuh, it's been a long tutorial. We have created an \napp\n that implements \nOAuth2 Authorization Code Grant\n to enable users to authenticate via SteemConnect on the Firebase. To achieve this, we used \nsteemconnect-firebase-functions\n library, which I had created to make developer's life easier. On the frontend we used \nAngular\n + \nAngularFire2\n to build simple but powerful application.\n\n\nReferences\n\n\n\n\nOAuth2\n: \nThe OAuth 2.0 Authorization Framework\n\n\nSteemConnect\n: \navailable scopes\n\n\nFirebase Cloud Functions\n: \nofficial docs\n\n\nFirebase Cloud Firestore\n: \nFirestore docs\n\n\nFirebase Cloud Firestore security rules\n: \nsecurity rules docs\n\n\nAngularFire2\n: \nofficial docs\n\n\nUser Agent\n: \nWikipedia",
            "title": "Authentication with Angular"
        },
        {
            "location": "/authentication/#what-will-you-learn",
            "text": "how OAuth2 authorization code grant works  how to use  steemconnect-firebase-functions  library to set up user authentication via SteemConnect in the Firebase Cloud Functions  how to build simple frontend with Angular and AngularFire2 to complete OAuth2 code flow and make operations on the Firebase Cloud Firestore database",
            "title": "What will you learn?"
        },
        {
            "location": "/authentication/#requirements",
            "text": "TypeScript knowledge  some experience with Angular  Angular CLI  installed",
            "title": "Requirements"
        },
        {
            "location": "/authentication/#difficulty",
            "text": "basic",
            "title": "Difficulty"
        },
        {
            "location": "/authentication/#what-is-firebase",
            "text": "Firebase is a platform which  gives you the ability to create applications  that use database or authentication  without writing any backend code ...  Well, this is true as long as we don't want to implement an auth system based on SteemConnect :) Firebase Authentication comes with a few auth providers built-in, such as Facebook or Twitter, but  if we want to use SteemConnect we will have to write some backend code .  The backend code runs on the  Cloud Functions  triggerable by events such as  HTTP requests .  Important note : if you want to use Firebase on production (it's about deploying Cloud Functions), you will have to choose a paid pricing plan. Why? Our  Cloud Functions are going to make requests to external API  (SteemConnect) and  this kind of operations are not included in the free  (Spark)  plan . Fortunately,  we still can run Functions locally , so to follow this tutorial you won't have to pay anything. For more information check  pricing .",
            "title": "What is Firebase?"
        },
        {
            "location": "/authentication/#what-is-oauth2",
            "text": "Have you ever signed into any app using your  external account , maybe the one you have on Google or Facebook? You click 'Login with Facebook' and then the popup window is being opened. You see Facebook which asks you if you want to give this third-party app access to the listed resources. You probably accept it and then magically you become logged in to the app.  You are the  resource owner , you operate via  user-agent  (in this case a browser) and the application that wants you to give it an access to resources is the  client .  This process is possible thanks to  OAuth2  - an authorization framework which enables third-party applications to get limited access to the service.  It's all about the  access tokens . These strings are used to access resources protected by the service and the entire  OAuth2 flow  is oriented on getting them. The protected resource can be almost anything, from user data to ability to broadcast operations such as publishing a post.  Even though there are a few OAuth2 flows, all of them are similar due to the fact that access token is the end goal.",
            "title": "What is OAuth2?"
        },
        {
            "location": "/authentication/#authorization-code-grant",
            "text": "The type of OAuth2 flow we will use in this tutorial is authorization code grant. This flow is split into two parts:   authentication of the resource owner  - purple arrows on the diagram below  getting access token  - blue arrows    This process can be tricky, so let me explain each step:   Resource owner  (via  user-agent ) opens a popup window which  redirects  him to the Firebase Cloud Function.  The Firebase Cloud Function  redirects to SteemConnect endpoint  with the client (application) information along with the scope of resources client wants to gain access to, and URI which SteemConnect will redirect to after success. At this point, the user is asked to give the third-party app access to the requested resources.  SteemConnect redirects to provided URI with  code  as a query parameter (for example,  http://localhost:4200/redirect?code=fdt453534fds ).  User-agent  on the resource owner behalf makes a  request  to the Firebase Cloud Function along with the  code .  Firebase Cloud Function  makes a request to SteemConnect token endpoint  with client information and the code.  SteemConnect responses with an access token  and some additional info such as the resource owner username.  Based on the username  Firebase mints a custom auth token  and sends it back to the resource owner. This step is not really OAuth2 related, but important for the Firebase Authentication system.   Don't worry if you don't understand everything yet. It will become clear when we actually implement these steps in our app.",
            "title": "Authorization Code Grant"
        },
        {
            "location": "/authentication/#creating-firebase-project",
            "text": "The  app  we are going to create is gonna use  Firebase Authentication ,  Firebase Cloud Functions  and  Firebase Cloud Firestore ... so we have to create Firebase project.  This process is really simple, one just has to go to the  Firebase Console  and click  Add project . You will see a modal, where you choose your project name and your country. The last step for now is to click  Create project  and wait a few seconds.  That's all for now, but we will come back here a few times later.",
            "title": "Creating Firebase project"
        },
        {
            "location": "/authentication/#creating-steemconnect-project",
            "text": "Creating SteemConnect project is nothing fancy once again. To do so, one simply has to go to https://steemconnect.com/dashboard and navigate to  My apps  and click  New app .  Warning : the username for your app you choose at this point is not changeable! So make sure you typed it correctly before clicking  Create account .  In the next step, fill the form as you wish, but make sure to add  http://localhost:4200/redirect  to  Redirect URI(s)  section:   We will come back to the dashboard later for  client id  and  client secret .",
            "title": "Creating SteemConnect project"
        },
        {
            "location": "/authentication/#creating-angular-project",
            "text": "Although we won't write any code for the frontend yet, creating an Angular project using Angular CLI is always a good start. Let's do it then!  ng new your-project-name\ncd your-project-name",
            "title": "Creating Angular project"
        },
        {
            "location": "/authentication/#backend",
            "text": "The backend we are going to create is, of course, based on Firebase Cloud Functions. However, before we start coding, we have to install  firebase-tools :  npm install firebase-tools -g  Once installed, initialize Firebase Cloud Functions project:  firebase init functions  During this process you will be asked for a default project for this directory, select project which you have created in the  Creating Firebase project  section. Later, when asked  What language would you like to use to write Cloud Functions , pick  TypeScript . Also, you  want  to both  use TSLint to catch probable bugs and enforce style  and  install dependencies with npm now .  Our backend code is now in the  functions  directory, let's move there:  cd functions  We will need some dependencies, first of all  steemconnect-firebase-functions :  npm install steemconnect-firebase-functions --save  and  CORS :  npm install cors --save\nnpm install @types/cors --save-dev  Next, go back to  Firebase Console . We are going to mint Custom Firebase Auth Tokens, so we need service account credentials:   and then click  GENERATE NEW PRIVATE KEY .   Move downloaded file to our backend root folder ( functions ) and rename it to  serviceAccountKey.json . Also, make sure you  don't expose it  (add this file to .gitignore etc.).  Once done, open your favorite code editor and paste the code below to  src/index.ts :  // IMPORTS  import   { \n   getAuthorizationUrl , \n   getAccessToken , \n   mintFirebaseToken , \n   Scope  }   from   'steemconnect-firebase-functions' ;  import   *   as   functions   from   'firebase-functions' ;  import   *   as   admin   from   'firebase-admin' ;  import   *   as   CORS   from   'cors' ;  const   serviceAccount   =   require ( '../serviceAccountKey.json' );  // CONFIGURATION  const   cors   =   CORS ({   origin :  true   });  admin . initializeApp ({ \n   credential :  admin.credential.cert ( serviceAccount )  });  const   redirectUri   =   'http://localhost:4200/redirect' ;  const   scope :  Array < Scope >   =   [ 'login' ];  const   clientId   =   'YOUR_CLIENT_ID' ;  const   clientSecret   =   'YOUR_CLIENT_SECRET' ;  // FUNCTIONS  export   const   redirect   =   functions . https . onRequest (( req ,   res )   =>   { \n   const   endpoint   =   getAuthorizationUrl ({   clientId ,   redirectUri ,   scope   }); \n   res . redirect ( endpoint );  });  export   const   callback   =   functions . https . onRequest (( req ,   res )   =>   { \n   cors ( req ,   res ,   ()   =>   { \n     handleCallback ( req ) \n       . then ( token   =>   res . status ( 200 ). send ({   token   })) \n       . catch ( err   =>   res . status ( 400 ). send ( err )); \n   });  });  // HELPER FUNCTION  async   function   handleCallback ( req )   { \n   const   code   =   req . query . code ; \n\n   const   accessToken   =   await   getAccessToken ({ \n     clientId , \n     clientSecret , \n     redirectUri , \n     code \n   }); \n   const   uid   =   `steemconnect: ${ accessToken . username } ` ; \n\n   const   firebaseToken   =   await   mintFirebaseToken ( admin ,   uid ); \n\n   return   firebaseToken ;  }   What's going on there?",
            "title": "Backend"
        },
        {
            "location": "/authentication/#imports",
            "text": "Nothing fancy there, we are just importing modules we will need later in this file. The worth to mention is fact that we import  only three functions  from  steemconnect-firebase-functions , but  there are more of them , and  will be even more  ;)  We just don't need more for this app - we will only identify user identity and then mint custom auth token based on his username.",
            "title": "Imports"
        },
        {
            "location": "/authentication/#configuration",
            "text": "In this section you have to paste your own  clientId  and  clientSecret . To get them, go back to  SteemConnect dashboard , then go to  My apps  and click on your app name. There you have both of these values.  Also, make sure you don't expose this file -  client secret is a sensitive value ! We paste them as they are only for the purpose of local running. If you decide to deploy your app you will have another way to insert them into your code. More information in the last section of this post.",
            "title": "Configuration"
        },
        {
            "location": "/authentication/#functions",
            "text": "This is the part of the file where magic happens. We have defined two Cloud Functions -  redirect  and  callback . Both react to any  http requests . It means that each time we make a request or simply navigate to URL dedicated to each function, the code inside it is gonna run.  The  redirect  function is responsible for handling the  step 2  of OAuth2 Authorization Code Grant (see diagram above). It uses  getAuthorizationUrl  function from  steemconnect-firebase-functions  library.  On the other hand, the  callback  function doesn't handle just one step. It actually handles two -  step 5 and 7 . To do so, it uses a helper async function  handleCallback .",
            "title": "Functions"
        },
        {
            "location": "/authentication/#helper-function",
            "text": "The  handleCallback  async function uses two functions from  steemconnect-firebase-functions  library -  getAccessToken  ( step 5 ) and  mintFirebaseToken  ( step 7 ).  It's quite obvious what they do, but fortunately you don't have to worry how to implement functionality they provide. Cool, isn't it?  Also, at this point, you have an access to  access token . Based on the scope, access token enables client to do different operations on the behalf of the user.  So, in this helper function, we also could save this token in the Cloud Firestore for a later use -  saveAccessToken  function from  steemconnect-firebase-functions  would do the job, but make sure to  deny access to each document of the  steemconnectToken  collection  later with the Firestore security rules! More about them in a separate section and in the references.  We could also get more user details than just a username using the  getUserData  function, again from my library.  Broadcasting operations to the blockchain isn't anything fancy too - as we have access token at this point (remember it requires different scope than  login ) we could use the  broadcastOperations  function.",
            "title": "Helper function"
        },
        {
            "location": "/authentication/#running-functions-locally",
            "text": "We have almost everything set up to run our backend locally. There are actually two more commands you have to run in the backend root folder:  npm run build  and then:  firebase serve --only functions  Keep them running, because we will need them in the frontend app, which we are going to start building right now.",
            "title": "Running functions locally"
        },
        {
            "location": "/authentication/#frontend",
            "text": "Our frontend application has two important roles in the OAuth2 flow - handle  step 1  and  step 4 . In addition, it has to make use of the token that  callback  Cloud Function responses with if minting custom auth token succeed. Quite a lot of work to do, so let's start!  If you are in the  functions  directory, go back to Angular project:  cd ../  but make sure functions are still running!  The first step in building Firebase frontend in Angular is usually configuring  AngularFire2 :  npm install angularfire2 firebase --save  once installed, go back to  Firebase Console , choose your project and click  Add Firebase to your web app . Copy all properties of config object and paste them inside  src/environments/environment.ts  file like that:  export   const   environment   =   { \n   production :   false , \n   firebaseConfig :   { \n     apiKey :   '<your-key>' , \n     authDomain :   '<your-project-authdomain>' , \n     databaseURL :   '<your-database-URL>' , \n     projectId :   '<your-project-id>' , \n     storageBucket :   '<your-storage-bucket>' , \n     messagingSenderId :   '<your-messaging-sender-id>' \n   }  };   We also have to import a few AngularFire2 modules. Our AppModule should look like that for now:  import   {   BrowserModule   }   from   '@angular/platform-browser' ;  import   {   NgModule   }   from   '@angular/core' ;  import   {   AngularFireModule   }   from   'angularfire2' ;  import   {   AngularFireAuthModule   }   from   'angularfire2/auth' ;  import   {   AngularFirestoreModule   }   from   'angularfire2/firestore' ;  import   {   AppComponent   }   from   './app.component' ;  import   {   environment   }   from   './../environments/environment' ;  @ NgModule ({ \n   declarations :   [ AppComponent ], \n   imports :   [ \n     BrowserModule , \n     AngularFireModule . initializeApp ( environment . firebaseConfig ), \n     AngularFireAuthModule , \n     AngularFirestoreModule \n   ], \n   providers :   [], \n   bootstrap :   [ AppComponent ]  })  export   class   AppModule   {}   Next let's create an AuthService, which will handle most of the user authentication:  ng g s auth -m app  now fill  auth.service.ts  with the following code:  import   {   Injectable   }   from   '@angular/core' ;  import   {   Observable   }   from   'rxjs/Observable' ;  import   {   switchMap   }   from   'rxjs/operators' ;  import   {   AngularFireAuth   }   from   'angularfire2/auth' ;  @Injectable ()  export   class   AuthService   { \n   user :  Observable < any > ; \n\n   constructor ( private   afAuth :  AngularFireAuth )   { \n     this . user   =   this . afAuth . authState ; \n   } \n\n   login() { \n     const   popup   =   window . open ( \n       'redirect_function_url' , \n       '_blank' , \n       'height=700,width=800' \n     ); \n   } \n\n   signIn ( token )   { \n     return   this . afAuth . auth \n       . signInWithCustomToken ( token ) \n       . then (()   =>   window . close ()); \n   } \n\n   signout() { \n     this . afAuth . auth . signOut (); \n   }  }   and replace  redirect_function_url  in the  login  method with the actual URL to  redirect Function .  Before we create components to complete our OAuth2 flow, let's ensure it will look pretty.  Bootstrap  seems like a good choice, let's add it to  src/index.html :  <!doctype html>  < html   lang = \"en\" >  < head > \n   < meta   charset = \"utf-8\" > \n   < title > SteemconnectFirebaseFunctionsExample </ title > \n   < base   href = \"/\" > \n\n   < meta   name = \"viewport\"   content = \"width=device-width, initial-scale=1\" > \n   < link   rel = \"icon\"   type = \"image/x-icon\"   href = \"favicon.ico\" > \n\n   < link   rel = \"stylesheet\"   href = \"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\"   integrity = \"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" \n     crossorigin = \"anonymous\" >  </ head >  < body > \n   < app-root ></ app-root >  </ body >  </ html >   At this point, we need two more components -  RedirectComponent  and  UserDetailsComponent . The first one will handle the  step 4  and the second one will be responsible to provide the functionality of  step 1 .  RedirectComponent  will be created each time user hit the  http://localhost:4200/redirect  URL. To be more precise - user won't navigate there, but SteemConnect will redirect there after successful login with the  code  as a query parameter, and the job of RedirectComponent will be to deliver this code to  callback  Cloud Function and make a use of its response - custom auth token.  On the other hand,  UserDetailsComponent  will display a  Login with SteemConnect  button for not logged in users, and  uid  along with  Signout  button for logged in users.  Let's generate them:  ng g c redirect\nng g c user-details  The  redirect.component.ts  should look like that:  import   {   Component ,   OnInit   }   from   '@angular/core' ;  import   {   HttpClient   }   from   '@angular/common/http' ;  import   {   Router ,   ActivatedRoute ,   Params   }   from   '@angular/router' ;  import   {   switchMap   }   from   'rxjs/operators' ;  import   {   fromPromise   }   from   'rxjs/observable/fromPromise' ;  import   {   AuthService   }   from   '../auth.service' ;  @Component ({ \n   selector :   'app-redirect' , \n   templateUrl :   './redirect.component.html' , \n   styleUrls :   [ './redirect.component.css' ]  })  export   class   RedirectComponent   implements   OnInit   { \n   constructor ( \n     private   http :  HttpClient , \n     private   route :  ActivatedRoute , \n     private   auth :  AuthService \n   )   {} \n\n   ngOnInit() { \n     const   code   =   this . route . snapshot . queryParamMap . get ( 'code' ); \n     const   url   =   `<CALLBACK-FUNCTION-URL>/callback?code= ${ code } ` ; \n\n     if   ( code )   { \n       this . http \n         . post < any > ( url ,   {}) \n         . pipe ( \n           switchMap ( res   =>   { \n             return   fromPromise ( this . auth . signIn ( res . token )); \n           }) \n         ) \n         . subscribe (); \n     } \n   }  }   Make sure to replace  <CALLBACK-FUNCTION-URL>  with the actual URL of the  callback  Function.  Both  redirect.component.html  and  redirect.component.css  are not that important, because this component will be displayed only for short period of time, so you can leave it as it is, change text in the HTML to something like  Loading... , or even make a fancy loading spinner on your own :)  Now let's move to  UserDetailsComponent ;  user-details.component.ts  is simple:  import   {   Component   }   from   '@angular/core' ;  import   {   AuthService   }   from   './../auth.service' ;  @Component ({ \n   selector :   'app-user-details' , \n   templateUrl :   './user-details.component.html' , \n   styleUrls :   [ './user-details.component.css' ]  })  export   class   UserDetailsComponent   { \n   constructor ( public   auth :  AuthService )   {}  }   the entire magic happens in its template  user-details.component.html :  < div   * ngIf = \"auth.user | async as user; else guest\" > \n   < div   class = \"card\" > \n     < div   class = \"card-body\" > \n       < h5   class = \"card-title\" > Hello! </ h5 > \n       < h6   class = \"card-subtitle mb-2 text-muted\" > You are logged into Firebase via SteemConnect! </ h6 > \n       < p   class = \"card-text\" > That's your uid:\n         < b > {{ user.uid }} </ b > \n       </ p > \n       < button   ( click )=\" auth . signout ()\"   class = \"btn btn-warning\" > Signout </ button > \n     </ div > \n   </ div >  </ div >  < ng-template   # guest > \n   < button   ( click )=\" auth . login ()\"   class = \"btn btn-primary\" > Login with SteemConnect! </ button >  </ ng-template >   To make signing in feature work, we need to do one more thing - set up routing. Let's start with the  app.component.html , where  router-outlet  is gonna be placed:  < nav   class = \"navbar navbar-expand-lg navbar-light bg-light\" > \n   < a   class = \"navbar-brand\"   href = \"\" > steemconnect-firebase-functions </ a > \n   < div   class = \"navbar-nav\" > \n     < a   class = \"nav-item nav-link\"   href = \"https://github.com/jakipatryk/steemconnect-firebase-functions-example\" > Github </ a > \n   </ div >  </ nav >  < div   class = \"container\" > \n   < div   class = \"row\" > \n     < div   class = \"col-xs-12 col-md-4\" > \n       < router-outlet ></ router-outlet > \n     </ div > \n\n     < div   class = \"col-xs-12 col-md-8\" > \n      We will add messages here later on.\n     </ div > \n   </ div >  </ div >   The last step for now is configuration of routes in  app.module.ts , this file should look like following for now:  import   {   BrowserModule   }   from   '@angular/platform-browser' ;  import   {   NgModule   }   from   '@angular/core' ;  import   {   Routes ,   RouterModule   }   from   '@angular/router' ;  import   {   HttpClientModule   }   from   '@angular/common/http' ;  import   {   AngularFireModule   }   from   'angularfire2' ;  import   {   AngularFireAuthModule   }   from   'angularfire2/auth' ;  import   {   AngularFirestoreModule   }   from   'angularfire2/firestore' ;  import   {   AppComponent   }   from   './app.component' ;  import   {   RedirectComponent   }   from   './redirect/redirect.component' ;  import   {   UserDetailsComponent   }   from   './user-details/user-details.component' ;  import   {   AuthService   }   from   './auth.service' ;  import   {   environment   }   from   './../environments/environment' ;  const   routes :  Routes   =   [ \n   {   path :   '' ,   component :  UserDetailsComponent   }, \n   {   path :   'redirect' ,   component :  RedirectComponent   }  ];  @NgModule ({ \n   declarations :   [ AppComponent ,   RedirectComponent ,   UserDetailsComponent ], \n   imports :   [ \n     BrowserModule , \n     RouterModule . forRoot ( routes ), \n     HttpClientModule , \n     AngularFireModule . initializeApp ( environment . firebaseConfig ), \n     AngularFireAuthModule , \n     AngularFirestoreModule \n   ], \n   providers :   [ AuthService ], \n   bootstrap :   [ AppComponent ]  })  export   class   AppModule   {}   Aaaand... we have implemented the entire OAuth2 Authorization Code Grant and the signing in with the Firebase custom auth token! Don't you believe? Ok, let's test it then!  ng serve  now just open up your browser and navigate to  http://localhost:4200 , that's what you are gonna see after successful sign in:   also, the  Authentication  page in the Firebase Console has changed ;)   I could have ended this tutorial here, but I want to show a really trivial example of what you can do now. Even though it is not gonna be complex, you will see that from this point making Steem-related apps that doesn't add anything to the blockchain is easy. Do you wonder why would anyone create an Steem-related app that don't publish anything to the blockchain? Check  SteemProjects  by @noisy.",
            "title": "Frontend"
        },
        {
            "location": "/authentication/#messages",
            "text": "In this section we will add messages that any logged in user would be able to add. At the end our app will look like the  example app .  Before we move to the code, you have to turn on Cloud Firestore. To do so, simply go to the  Firebase Console , choose your project, go to  Database  page and click  TRY FIRESTORE BETA  (select  Start in test mode  when asked).  Let's start with generating two presentational components -  MessageDetailsComponent  and  MessageFormComponent , one container component -  MessageListComponent , a service to handle data flow between the Angular app and the Firestore -  MessageService  and the interface of  Message :  ng g c messages/message-details\nng g c messages/message-form\nng g c messages/message-list\nng g s messages/message -m app\nng g i messages/models/message  Our  Message  interface should look like that:  export   interface   Message   { \n   author :  string ; \n   text :  string ;  }   Now let's bring some life to our presentational components starting with  MessageFormComponent . This kind of component shouldn't be aware of any data, so in  message-form.component.ts  we should use  @Output  decorator and  EventEmmiter  to emit values of our reactive form once submited:  import   {   Component ,   OnInit ,   EventEmitter ,   Output   }   from   '@angular/core' ;  import   {   FormBuilder ,   FormGroup ,   Validators   }   from   '@angular/forms' ;  import   {   Message   }   from   '../models/message' ;  @Component ({ \n   selector :   'app-message-form' , \n   templateUrl :   './message-form.component.html' , \n   styleUrls :   [ './message-form.component.css' ]  })  export   class   MessageFormComponent   implements   OnInit   { \n   @Output ()   messageEmitter :  EventEmitter < Message >   =   new   EventEmitter < Message > (); \n\n   messageForm :  FormGroup ; \n\n   constructor ( private   formBuilder :  FormBuilder )   {} \n\n   ngOnInit() { \n     this . createMessageForm (); \n   } \n\n   addMessage() { \n     this . messageEmitter . emit ({ \n       ... this . messageForm . value \n     }); \n   } \n\n   private   createMessageForm() { \n     this . messageForm   =   this . formBuilder . group ({ \n       text :   [ '' ,   Validators . required ] \n     }); \n   }  }   the template of this component is nothing fancy, just a simple form:  < form   [ formGroup ]=\" messageForm \"   ( ngSubmit )=\" addMessage ()\" > \n   < div   class = \"form-group\" > \n     < label   for = \"textInput\" > Your message: </ label > \n     < input   formControlName = \"text\"   id = \"textInput\"   class = \"form-control\"   aria-describedby = \"textHelper\" > \n     < small   id = \"textHelper\"   class = \"form-text text-muted\" > It's NOT gonna be published on the Steem blockchain. </ small > \n   </ div > \n   < button   type = \"submit\"   class = \"btn btn-primary\" > Submit </ button >  </ form >   The second presentational component is going to be responsible to display the details of a message (text, author);  message-details.component.ts :  import   {   Component ,   Input   }   from   '@angular/core' ;  import   {   Message   }   from   '../models/message' ;  @Component ({ \n   selector :   'app-message-details' , \n   templateUrl :   './message-details.component.html' , \n   styleUrls :   [ './message-details.component.css' ]  })  export   class   MessageDetailsComponent   { \n   @Input ()   message :  Message ;  }   and  message-details.component.html :  < div   class = \"card\" > \n   < div   class = \"card-body\" > \n     < div   class = \"card-title mb-2 text-muted\" > {{ message.author | uidToUsername }} </ div > \n     < div   class = \"card-text\" > {{ message.text }} </ div > \n   </ div >  </ div >   As you can see, we use  uidToUsername  pipe, which is a custom pipe, so we have to generate it:  ng g p messages/pipes/uid-to-username  It transforms uid to username, for example  steemconnect:jakipatryk  to  jakipatryk :  import   {   Pipe ,   PipeTransform   }   from   '@angular/core' ;  @Pipe ({ \n   name :   'uidToUsername'  })  export   class   UidToUsernamePipe   implements   PipeTransform   { \n   transform ( value :  string ,   args? :  any ) :   string   { \n     const   username   =   value . replace ( 'steemconnect:' ,   '' ); \n     return   username ; \n   }  }   We are almost ready to power up our presentational components with data. Yes, almost. We have to complete two more tasks. Updating  MessageService  is a perfect choice now:  import   {   Injectable   }   from   '@angular/core' ;  import   { \n   AngularFirestore , \n   AngularFirestoreDocument  }   from   'angularfire2/firestore' ;  import   {   Observable   }   from   'rxjs/Observable' ;  import   {   Message   }   from   './models/message' ;  @Injectable ()  export   class   MessageService   { \n   constructor ( private   afs :  AngularFirestore )   {} \n\n   addMessage ( data :  Message )   { \n     return   this . afs . collection ( 'messages' ). add ({   ... data   }); \n   } \n\n   getMessages () :   Observable < Message [] >   { \n     return   this . afs . collection ( 'messages' ). valueChanges ()   as   Observable < \n       Message [] \n     > ; \n   }  }   Now we can use it in our container component -  MessageListComponent :  message-list.component.ts :  import   {   Component ,   OnInit   }   from   '@angular/core' ;  import   {   MessageService   }   from   './../message.service' ;  import   {   AuthService   }   from   '../../auth.service' ;  import   {   Message   }   from   '../models/message' ;  import   {   Observable   }   from   'rxjs/Observable' ;  @Component ({ \n   selector :   'app-message-list' , \n   templateUrl :   './message-list.component.html' , \n   styleUrls :   [ './message-list.component.css' ]  })  export   class   MessageListComponent   implements   OnInit   { \n   currentUser ; \n   messages :  Observable < Message [] > ; \n\n   constructor ( \n     private   messageService :  MessageService , \n     public   auth :  AuthService \n   )   {} \n\n   ngOnInit() { \n     this . auth . user . subscribe ( user   =>   { \n       this . currentUser   =   user ; \n     }); \n     this . messages   =   this . messageService . getMessages (); \n   } \n\n   addMessage ( data )   { \n     const   dataWithAuthor   =   {   ... data ,   author :  this.currentUser.uid   }; \n     this . messageService . addMessage ( dataWithAuthor ); \n   }  }   message-list.component.html :  < div   * ngIf = \"auth.user | async as user\" > \n   < app-message-form   ( messageEmitter )=\" addMessage ($ event )\" ></ app-message-form >  </ div >  < div   * ngIf = \"!(messages | async)\" > \n  Loading messages... </ div >  < app-message-details   * ngFor = \"let message of messages | async\"   [ message ]=\" message \" ></ app-message-details >   We are almost done. Let's now add our container component to  AppComponent , its template should have the following code:  < nav   class = \"navbar navbar-expand-lg navbar-light bg-light\" > \n   < a   class = \"navbar-brand\"   href = \"\" > steemconnect-firebase-functions </ a > \n   < div   class = \"navbar-nav\" > \n     < a   class = \"nav-item nav-link\"   href = \"https://github.com/jakipatryk/steemconnect-firebase-functions-example\" > Github </ a > \n   </ div >  </ nav >  < div   class = \"container\" > \n   < div   class = \"row\" > \n     < div   class = \"col-xs-12 col-md-4\" > \n       < router-outlet ></ router-outlet > \n     </ div > \n\n     < div   class = \"col-xs-12 col-md-8\" > \n       < app-message-list ></ app-message-list > \n     </ div > \n   </ div >  </ div >   The last step is to make sure we have included everything in the  AppModule :  import   {   BrowserModule   }   from   '@angular/platform-browser' ;  import   {   NgModule   }   from   '@angular/core' ;  import   {   HttpClientModule   }   from   '@angular/common/http' ;  import   {   Routes ,   RouterModule   }   from   '@angular/router' ;  import   {   ReactiveFormsModule   }   from   '@angular/forms' ;  import   {   AngularFireModule   }   from   'angularfire2' ;  import   {   AngularFireAuthModule   }   from   'angularfire2/auth' ;  import   {   AngularFirestoreModule   }   from   'angularfire2/firestore' ;  import   {   AppComponent   }   from   './app.component' ;  import   {   RedirectComponent   }   from   './redirect/redirect.component' ;  import   {   UserDetailsComponent   }   from   './user-details/user-details.component' ;  import   {   AuthService   }   from   './auth.service' ;  import   {   MessageService   }   from   './messages/message.service' ;  import   {   environment   }   from   './../environments/environment' ;  import   {   MessageListComponent   }   from   './messages/message-list/message-list.component' ;  import   {   MessageDetailsComponent   }   from   './messages/message-details/message-details.component' ;  import   {   MessageFormComponent   }   from   './messages/message-form/message-form.component' ;  import   {   UidToUsernamePipe   }   from   './messages/uid-to-username.pipe' ;  const   routes :  Routes   =   [ \n   {   path :   '' ,   component :  UserDetailsComponent   }, \n   {   path :   'redirect' ,   component :  RedirectComponent   }  ];  @NgModule ({ \n   declarations :   [ \n     AppComponent , \n     RedirectComponent , \n     UserDetailsComponent , \n     MessageListComponent , \n     MessageDetailsComponent , \n     MessageFormComponent , \n     UidToUsernamePipe \n   ], \n   imports :   [ \n     BrowserModule , \n     RouterModule . forRoot ( routes ), \n     HttpClientModule , \n     ReactiveFormsModule , \n     AngularFireModule . initializeApp ( environment . firebaseConfig ), \n     AngularFireAuthModule , \n     AngularFirestoreModule \n   ], \n   providers :   [ AuthService ,   MessageService ], \n   bootstrap :   [ AppComponent ]  })  export   class   AppModule   {}   Now simply  ng serve  the app and enjoy your first Firebase and SteemConnect based application!",
            "title": "Messages"
        },
        {
            "location": "/authentication/#backend-once-again-security",
            "text": "We do already have a working app. Cool, but you might remember that you started the database in the  test mode . While it is ok to use it during the development phase, it is completely wrong to use this mode on the production.  Why? Test mode allows anyone to read, create, update and delete any data in the Firestore. We don't want that.  We want to allow:   anyone to read  messages  logged in users to create  messages  authors to update or delete  their messages   To achieve this, one has to visit  Firebase console  once again, navigate to the project and then to  Database  page. Here, in the  RULES  section, we define our rules.  In case of our app, the rules should be following:  service   cloud . firestore   { \n   match   /databases/{database } / documents   { \n     match   /messages/{message }   { \n       allow   read :   if   true ; \n       allow   update,   delete :   if   request . auth . uid   ==   resource . data . author ; \n       allow   create :   if   request . auth . uid   !=   null ; \n     } \n   }  }",
            "title": "Backend once again (security)"
        },
        {
            "location": "/authentication/#deploying-the-app-and-cloud-functions",
            "text": "NOTE : this section is for those who decided to choose  paid pricing plan  (Flame or Blaze).  Ok, we have everything set up. Now it's time for deployment. However, we have to do some configuration before we enter deploy command.  Let's start with the frontend. You might remember that we inserted the Firebase configuration in the  environment.ts  file. It worked well, but it won't work on the production. Angular CLI takes different file during the build for production -  environment.prod.ts .  Basically, all you have to do is to copy  firebaseConfig  object from  environment.ts  to  environment.prod.ts , but I highly recomment you create another Firebase project just for production. The setup process will be exactly the same as we did before.  Now let's move to backend Cloud Functions. We need to setup clientId and clientSecret as a Firebase variables, so in the terminal move to  functions  directory and type the following commands:  firebase functions:config:set steemconnect.id=\"YOUR_CLIENT_ID\" steemconnect.secret=\"YOUR_CLIENT_SECRET\"  Both  id  and  secret  are of course the same as before. Now let's change a bit our  index.ts  file, instead of:  const   clientId   =   'YOUR_CLIENT_ID' ;  const   clientSecret   =   'YOUR_CLIENT_SECRET' ;   use:  const   clientId   =   functions . config (). steemconnect . id ;  const   clientSecret   =   functions . config (). steemconnect . secret ;   We also have to change the  redirectUri . To do so, you have to go to  Firebase console  once again and then to your project. This time hit the  Hosting  page, click  GET STARTED , then  CONTINUE  and finally  FINISH . Copy the  domain  and update  redirectUri :  const   redirectUri   =   'https://<YOUR-DOMAIN>/redirect' ;   Remember to add this redirectUri to the  Redirect URI(s)  at the  SteemConnect dashboard!  Now we can deploy our Cloud Functions!  firebase deploy --only functions  If you are getting an error here, try changing  firebase.json  file from:  {\n  \"functions\": {\n    \"predeploy\": [\n      \"npm --prefix $RESOURCE_DIR run lint\",\n      \"npm --prefix $RESOURCE_DIR run build\"\n    ]\n  }\n}  to:  {\n  \"functions\": {\n    \"predeploy\": [\n      \"npm --prefix %RESOURCE_DIR% run lint\",\n      \"npm --prefix %RESOURCE_DIR% run build\"\n    ]\n  }\n}  Once done, copy the URLs of the Cloud Functions and change the URLs in  auth.service.ts  and  redirect.component.ts .  We could - and I would defienietly do so in a serious app - add additional property to environment files, something like  functionsURL  and add different URLs for production and development, so we could still test our functions and frontend locally. Then we could simply import  environment  file to both of these files and not change the URL directly, but use the environment variable  functionsURL  instead. Angular CLI would do its job then.  Anyway, whatever option you have chosen, the deployment of the Angular app will look exactly the same. First of all, we have to initialize the  Firebase Hosting . To do so, move to the root folder of Angular app and type the command:  firebase init hosting  When asked:   What do you want to use as your public directory?  - type  dist  Configure as a single-page app (rewrite all urls to /index.html)?  - type  y   Once initialized, you have to build your app for production:  ng build --prod  The last step is to run:  firebase deploy --only hosting  Now you can enjoy your deployed app and Cloud Functions and share it with your friends!",
            "title": "Deploying the app and Cloud Functions"
        },
        {
            "location": "/authentication/#summary",
            "text": "Huh, it's been a long tutorial. We have created an  app  that implements  OAuth2 Authorization Code Grant  to enable users to authenticate via SteemConnect on the Firebase. To achieve this, we used  steemconnect-firebase-functions  library, which I had created to make developer's life easier. On the frontend we used  Angular  +  AngularFire2  to build simple but powerful application.",
            "title": "Summary"
        },
        {
            "location": "/authentication/#references",
            "text": "OAuth2 :  The OAuth 2.0 Authorization Framework  SteemConnect :  available scopes  Firebase Cloud Functions :  official docs  Firebase Cloud Firestore :  Firestore docs  Firebase Cloud Firestore security rules :  security rules docs  AngularFire2 :  official docs  User Agent :  Wikipedia",
            "title": "References"
        },
        {
            "location": "/broadcasting/",
            "text": "What is this module for?\n\n\nBroadcasting module was created for \nhandling\n broadcasting operations to the Steem blockchain using \nSteemConnect's tokens\n.\n\n\nThere is one \ngeneral\n function (\nbroadcastOperations\n), several \noperation-specific\n functions (for example, \nbroadcastPost\n), and one \nwrapper\n function for handling access token refreshing if the provided one had expired (\nrely\n).\n\n\n\n\nAPI reference\n\n\nFunctions\n\n\nbroadcastOperations\n\n\nexport\n \ndeclare\n \nfunction\n \nbroadcastOperations\n([...\noperations\n]\n:\n \nOperations\n)\n:\n \n(\n\n  \n{\n \naccess_token\n \n}\n:\n \nAccessTokenResponse\n\n\n)\n \n=>\n \nPromise\n<\nBroadcastResult\n>\n;\n\n\n\n\n\n\nDefinition\n\n\nBroadcasts given operations to the Steem blockchain.\n\n\nParameters\n\n\nStep one\n (for the outer function):\n\n\n\n\noperations\n (\nOperations\n): an array of operations to broadcast\n\n\n\n\nStep two\n (for the inner function):\n\n\n\n\naccessToken\n (\nAccessTokenResponse\n): an object with token details of the user for whom broadcast is requested for\n\n\n\n\nReturns\n\n\nStep one\n (from the outer function):\n\n\n\n\n(\nbroadcastable\n): an inner function\n\n\n\n\nStep two\n (from the inner function):\n\n\n\n\n(\nPromise<\nBroadcastResult\n>\n): a \nPromise\n object which resolves with the result of the broadcast\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n\n  \nbroadcastOperations\n,\n\n  \nAccessTokenResponse\n,\n\n  \nOperations\n\n\n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \naccessToken\n: \nAccessTokenResponse\n \n=\n \n{\n\n  \naccess_token\n:\n \n'435tfgfdgdfg.434342'\n,\n\n  \nexpires_in\n: \n3243234\n,\n\n  \nusername\n:\n \n'jakipatryk-dev'\n\n\n};\n\n\n\nconst\n \noperations\n: \nOperations\n \n=\n \n[\n\n  \n[\n\n    \n'vote'\n,\n\n    \n{\n\n      \nvoter\n:\n \n'jakipatryk-dev'\n,\n\n      \nauthor\n:\n \n'ned'\n,\n\n      \npermlink\n:\n \n'i-am-ned'\n,\n\n      \nweight\n: \n10000\n\n    \n}\n\n  \n]\n\n\n];\n\n\n\nbroadcastOperations\n(\noperations\n)(\naccessToken\n).\nthen\n(\nresult\n \n=>\n\n  \nconsole\n.\nlog\n(\nresult\n)\n\n\n);\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\nrely\n\n\nexport\n \ndeclare\n \nconst\n \nrely\n:\n \n(\n\n  \n{\n \nclientId\n,\n \nclientSecret\n \n}\n:\n \nRequired\n<\nClientCredentials\n>\n\n\n)\n \n=>\n \n(\n\n  \n{\n\n    \naccess_token\n,\n\n    \nrefresh_token\n,\n\n    \nusername\n,\n\n    \nexpires_in\n\n  \n}\n:\n \nRequired\n<\nAccessTokenResponse\n>\n\n\n)\n \n=>\n \n(\n\n  \nbroadcastable\n: \nFunction\n\n\n)\n \n=>\n \nPromise\n<\nBroadcastResult\n \n&\n \nPartial\n<\nAccessTokenResponse\n>>\n;\n\n\n\n\n\n\nDefinition\n\n\nA wrapper function for \nbroadcastables\n which ensures that broadcast is successful if \nrefresh_token\n is correct.\n\n\nParameters\n\n\nStep one\n (for the outer function):\n\n\n\n\nclientCredentials\n (\nClientCredentails\n): object with client credentials\n\n\n\n\nStep two\n (for the middle function):\n\n\n\n\naccessToken\n (\nAccessTokenResponse\n): an object with token details (\nrefresh_token\n is required there) of the user for whom broadcast is requested for\n\n\n\n\nStep three\n (for the inner function)\n\n\n\n\nbroadcastable\n: the broadcastable function\n\n\n\n\nReturns\n\n\nStep one\n (from the outer function):\n\n\n\n\nmiddle function with \nclientCredentials\n in a closure\n\n\n\n\nStep two\n (from the middle function):\n\n\n\n\ninner function with \nclientCredentials\n and \naccessToken\n in a closue\n\n\n\n\nStep three\n (from the inner function):\n\n\n\n\n(\nPromise<\nBroadcastResult\n & Partial<\nAccessTokenResponse\n>>\n): a \nPromise\n object which resolves with the result of the broadcast and new tokens if refreshed\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n\n  \nrely\n,\n\n  \nAccessTokenResponse\n,\n\n  \nOperations\n,\n\n  \nClientCredentials\n\n\n}\n \nfrom\n \n'steemconnect-firebase-functions/broadcasting'\n;\n\n\n\nconst\n \nclientCredentials\n: \nClientCredentials\n \n=\n \n{\n\n  \nclientId\n:\n \n'strimi.app'\n,\n\n  \nclientSecret\n:\n \n'432rnj3nr23nkvfdvdf'\n\n\n};\n\n\nconst\n \naccessToken\n: \nAccessTokenResponse\n \n=\n \n{\n\n  \naccess_token\n:\n \n'fdsfertre'\n,\n\n  \nexpires_in\n: \n4323432\n,\n\n  \nusername\n:\n \n'jakipatryk'\n,\n\n  \nrefresh_token\n:\n \n'3rk3m2krl3'\n\n\n};\n\n\nconst\n \nvoteOperation\n: \nOperations\n \n=\n \n[\n\n  \n[\n\n    \n'vote'\n,\n\n    \n{\n\n      \nvoter\n:\n \n'jakipatryk'\n,\n\n      \nauthor\n:\n \n'whoever'\n,\n\n      \npermlink\n:\n \n'some-permlink'\n,\n\n      \nweight\n: \n10000\n\n    \n}\n\n  \n]\n\n\n];\n\n\n\nconst\n \nbroadcastableVote\n \n=\n \nbroadcastOperations\n(\nvoteOperations\n);\n\n\n\nrely\n(\nclientCredentials\n)(\naccessToken\n)(\nbroadcastableVote\n).\nthen\n(\nresponse\n \n=>\n\n  \nconsole\n.\nlog\n(\nresponse\n)\n\n\n);\n\n\n//  {\n\n\n//    result: { ... }\n\n\n//    access_token: 'new access token if refreshed, otherwise undefined`\n\n\n//    refresh_token: 'new refresh token if refreshed, otherwise undefined'\n\n\n//    username: ...\n\n\n//    expires: ...\n\n\n//  }\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\nbroadcastComment\n\n\nexport\n \ndeclare\n \nconst\n \nbroadcastComment\n:\n \n(\n\n  \n{\n\n    \nparentAuthor\n,\n\n    \nparentPermlink\n,\n\n    \ncommentPermlink\n,\n\n    \ncommentBody\n,\n\n    \ncommentTitle\n,\n\n    \ncommentMetadata\n\n  \n}\n:\n \nComment\n\n\n)\n \n=>\n \n(\n\n  \n{\n \naccess_token\n,\n \nusername\n \n}\n:\n \nAccessTokenResponse\n\n\n)\n \n=>\n \nPromise\n<\nBroadcastResult\n>\n;\n\n\n\n\n\n\nDefinition\n\n\nBroadcasts comment for a given user to the Steem blockchain.\n\n\nParameters\n\n\nStep one\n (for the outer functions):\n\n\n\n\ncommentConfig\n (\nComment\n): the config object for the comment\n\n\n\n\nStep two\n (for the inner functions):\n\n\n\n\naccessToken\n (\nAccessTokenResponse\n): an object with token details of the user for whom broadcast is requested for\n\n\n\n\nReturns\n\n\nStep one\n (from the outer function):\n\n\n\n\n(\nbroadcastable\n): an inner function\n\n\n\n\nStep two\n (from the inner function):\n\n\n\n\n(\nPromise<\nBroadcastResult\n>\n): a \nPromise\n object which resolves with the result of the broadcast\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n\n  \nbroadcastComment\n,\n\n  \nComment\n,\n\n  \nAccessTokenResponse\n\n\n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \ncommentConfig\n: \nComment\n \n=\n \n{\n\n  \nparentAuthor\n:\n \n'ned'\n,\n\n  \nparentPermlink\n:\n \n'i-am-ned'\n,\n\n  \ncommentPermlink\n:\n \n'permlink-to-comment'\n,\n\n  \ncommentBody\n:\n \n'Wow! Such an amazing post!'\n,\n\n  \ncommentMetadata\n:\n \n{\n\n    \napp\n:\n \n'strimi/1.0.0'\n,\n\n    \ncommunity\n:\n \n'strimi'\n\n  \n}\n\n\n};\n\n\nconst\n \naccessToken\n: \nAccessTokenResponse\n \n=\n \n{\n\n  \naccess_token\n:\n \n'etfso443nnf3.3423hhf'\n,\n\n  \nexpires_in\n: \n640000\n,\n\n  \nusername\n:\n \n'jakipatryk'\n\n\n};\n\n\n\nbroadcastComment\n(\ncommentConfig\n)(\naccessToken\n).\nthen\n(\nresponse\n \n=>\n\n  \nconsole\n.\nlog\n(\nresponse\n)\n\n\n);\n\n\n//  {\n\n\n//    result: { ... }\n\n\n//  }\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\nbroadcastDeletion\n\n\nexport\n \ndeclare\n \nconst\n \nbroadcastDeletion\n:\n \n(\n\n  \n{\n \npermlink\n \n}\n:\n \nDeletion\n\n\n)\n \n=>\n \n(\n\n  \n{\n \naccess_token\n,\n \nusername\n \n}\n:\n \nAccessTokenResponse\n\n\n)\n \n=>\n \nPromise\n<\nBroadcastResult\n>\n;\n\n\n\n\n\n\nDefinition\n\n\nBroadcasts deletion of either comment or post to the Steem blockchain.\n\n\nParameters\n\n\n\n\ndeletionConfig\n (\nDeletion\n): the config object for the deletion\n\n\n\n\nStep two\n (for the inner functions):\n\n\n\n\naccessToken\n (\nAccessTokenResponse\n): an object with token details of the user for whom broadcast is requested for\n\n\n\n\nReturns\n\n\nStep one\n (from the outer function):\n\n\n\n\n(\nbroadcastable\n): an inner function\n\n\n\n\nStep two\n (from the inner function):\n\n\n\n\n(\nPromise<\nBroadcastResult\n>\n): a \nPromise\n object which resolves with the result of the broadcast\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n\n  \nbroadcastDeletion\n,\n\n  \nDeletion\n,\n\n  \nAccessTokenResponse\n\n\n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \ndeletionConfig\n: \nDeletion\n \n=\n \n{\n\n  \npermlink\n:\n \n'my-bad-post'\n\n\n};\n\n\nconst\n \naccessToken\n: \nAccessTokenResponse\n \n=\n \n{\n\n  \naccess_token\n:\n \n'kj3n4jn2342.432p4k2p'\n,\n\n  \nexpires_in\n: \n640000\n,\n\n  \nusername\n:\n \n'ned'\n\n\n};\n\n\n\nbroadcastDeletion\n(\ndeletionConfig\n)(\naccessToken\n).\nthen\n(\nresponse\n \n=>\n\n  \nconsole\n.\nlog\n(\nresponse\n)\n\n\n);\n\n\n//  {\n\n\n//    result: { ... }\n\n\n//  }\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\nbroadcastDownvote\n\n\nexport\n \ndeclare\n \nconst\n \nbroadcastDownvote\n:\n \n(\n\n  \n{\n \nauthor\n,\n \npermlink\n,\n \nweight\n \n}\n:\n \nVote\n\n\n)\n \n=>\n \n(\n\n  \n{\n \naccess_token\n,\n \nusername\n \n}\n:\n \nAccessTokenResponse\n\n\n)\n \n=>\n \nPromise\n<\nBroadcastResult\n>\n;\n\n\n\n\n\n\nDefinition\n\n\nBroadcasts downvote to the Steem blockchain.\n\n\nParameters\n\n\n\n\ndownvoteConfig\n (\nVote\n): the config object for the vote (even though you want to broadcast downvote, pass a positive number in the weight)\n\n\n\n\nStep two\n (for the inner functions):\n\n\n\n\naccessToken\n (\nAccessTokenResponse\n): an object with token details of the user for whom broadcast is requested for\n\n\n\n\nReturns\n\n\nStep one\n (from the outer function):\n\n\n\n\n(\nbroadcastable\n): an inner function\n\n\n\n\nStep two\n (from the inner function):\n\n\n\n\n(\nPromise<\nBroadcastResult\n>\n): a \nPromise\n object which resolves with the result of the broadcast\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n\n  \nbroadcastDownvote\n,\n\n  \nVote\n,\n\n  \nAccessTokenResponse\n\n\n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \ndownvoteConfig\n: \nVote\n \n=\n \n{\n\n  \nauthor\n:\n \n'ned'\n,\n\n  \npermlink\n:\n \n'i-am-ned'\n,\n\n  \nweight\n: \n10000\n \n// 100% downvote\n\n\n};\n\n\nconst\n \naccessToken\n: \nAccessTokenResponse\n \n=\n \n{\n\n  \naccess_token\n:\n \n'kj3n4jn2342.432p4k2p'\n,\n\n  \nexpires_in\n: \n640000\n,\n\n  \nusername\n:\n \n'jakipatryk'\n\n\n};\n\n\n\nbroadcastDownvote\n(\ndownvoteConfig\n)(\naccessToken\n).\nthen\n(\nresponse\n \n=>\n\n  \nconsole\n.\nlog\n(\nresponse\n)\n\n\n);\n\n\n//  {\n\n\n//    result: { ... }\n\n\n//  }\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\nbroadcastFollow\n\n\nexport\n \ndeclare\n \nconst\n \nbroadcastFollow\n:\n \n(\n\n  \n{\n \nuserToFollow\n \n}\n:\n \nFollow\n\n\n)\n \n=>\n \n(\n\n  \n{\n \naccess_token\n,\n \nusername\n \n}\n:\n \nAccessTokenResponse\n\n\n)\n \n=>\n \nPromise\n<\nBroadcastResult\n>\n;\n\n\n\n\n\n\nDefinition\n\n\nBroadcasts follow to the Steem blockchain.\n\n\nParameters\n\n\n\n\nfollowConfig\n (\nFollow\n): the config object for the follow\n\n\n\n\nStep two\n (for the inner functions):\n\n\n\n\naccessToken\n (\nAccessTokenResponse\n): an object with token details of the user for whom broadcast is requested for\n\n\n\n\nReturns\n\n\nStep one\n (from the outer function):\n\n\n\n\n(\nbroadcastable\n): an inner function\n\n\n\n\nStep two\n (from the inner function):\n\n\n\n\n(\nPromise<\nBroadcastResult\n>\n): a \nPromise\n object which resolves with the result of the broadcast\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n\n  \nbroadcastFollow\n,\n\n  \nFollow\n,\n\n  \nAccessTokenResponse\n\n\n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \nfollowConfig\n: \nFollow\n \n=\n \n{\n\n  \nuserToFollow\n:\n \n'jakipatryk'\n\n\n};\n\n\nconst\n \naccessToken\n: \nAccessTokenResponse\n \n=\n \n{\n\n  \naccess_token\n:\n \n'kj3n4jn2342.432p4k2p'\n,\n\n  \nexpires_in\n: \n640000\n,\n\n  \nusername\n:\n \n'ned'\n\n\n};\n\n\n\nbroadcastFollow\n(\nfollowConfig\n)(\naccessToken\n).\nthen\n(\nresponse\n \n=>\n\n  \nconsole\n.\nlog\n(\nresponse\n)\n\n\n);\n\n\n//  {\n\n\n//    result: { ... }\n\n\n//  }\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\nbroadcastPost\n\n\nexport\n \ndeclare\n \nconst\n \nbroadcastPost\n:\n \n(\n\n  \n{\n \nmainTag\n,\n \npermlink\n,\n \ntitle\n,\n \nbody\n,\n \nmetadata\n \n}\n:\n \nPost\n\n\n)\n \n=>\n \n(\n\n  \n{\n \naccess_token\n,\n \nusername\n \n}\n:\n \nAccessTokenResponse\n\n\n)\n \n=>\n \nPromise\n<\nBroadcastResult\n>\n;\n\n\n\n\n\n\nDefinition\n\n\nBroadcasts post to the Steem blockchain.\n\n\nParameters\n\n\n\n\npostConfig\n (\nPost\n): the config object for the post\n\n\n\n\nStep two\n (for the inner functions):\n\n\n\n\naccessToken\n (\nAccessTokenResponse\n): an object with token details of the user for whom broadcast is requested for\n\n\n\n\nReturns\n\n\nStep one\n (from the outer function):\n\n\n\n\n(\nbroadcastable\n): an inner function\n\n\n\n\nStep two\n (from the inner function):\n\n\n\n\n(\nPromise<\nBroadcastResult\n>\n): a \nPromise\n object which resolves with the result of the broadcast\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n\n  \nbroadcastPost\n,\n\n  \nPost\n,\n\n  \nAccessTokenResponse\n\n\n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \npostConfig\n: \nPost\n \n=\n \n{\n\n  \nmainTag\n:\n \n'life'\n,\n\n  \npermlink\n:\n \n'permlink-for-the-post'\n,\n\n  \ntitle\n:\n \n'Its my life!'\n,\n\n  \nbody\n:\n \n'Its my life sheck this out'\n,\n\n  \nmetadata\n:\n \n{\n\n    \napp\n:\n \n'strimi/1.0.0'\n,\n\n    \ncommunity\n:\n \n'strimi'\n,\n\n    \ntags\n:\n \n[\n'life'\n,\n \n'steemit'\n]\n\n  \n}\n\n\n};\n\n\nconst\n \naccessToken\n: \nAccessTokenResponse\n \n=\n \n{\n\n  \naccess_token\n:\n \n'kj3n4jn2342.432p4k2p'\n,\n\n  \nexpires_in\n: \n640000\n,\n\n  \nusername\n:\n \n'ned'\n\n\n};\n\n\n\nbroadcastPost\n(\npostConfig\n)(\naccessToken\n).\nthen\n(\nresponse\n \n=>\n \nconsole\n.\nlog\n(\nresponse\n));\n\n\n//  {\n\n\n//    result: { ... }\n\n\n//  }\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\nbroadcastPostWithBeneficiaries\n\n\nexport\n \ndeclare\n \nconst\n \nbroadcastPostWithBeneficiaries\n:\n \n(\n\n  \n{\n\n    \nmainTag\n,\n\n    \npermlink\n,\n\n    \ntitle\n,\n\n    \nbody\n,\n\n    \nbeneficiariesAccount\n,\n\n    \nbeneficiariesWeight\n,\n\n    \nmetadata\n\n  \n}\n:\n \nPostWithBeneficiaries\n\n\n)\n \n=>\n \n(\n\n  \n{\n \naccess_token\n,\n \nusername\n \n}\n:\n \nAccessTokenResponse\n\n\n)\n \n=>\n \nPromise\n<\nBroadcastResult\n>\n;\n\n\n\n\n\n\nDefinition\n\n\nBroadcasts post along with beneficiaries config to the Steem blockchain.\n\n\nParameters\n\n\n\n\npostWithBeneficiariesConfig\n (\nPostWithBeneficiaires\n): the config object for the post with beneficiaries\n\n\n\n\nStep two\n (for the inner functions):\n\n\n\n\naccessToken\n (\nAccessTokenResponse\n): an object with token details of the user for whom broadcast is requested for\n\n\n\n\nReturns\n\n\nStep one\n (from the outer function):\n\n\n\n\n(\nbroadcastable\n): an inner function\n\n\n\n\nStep two\n (from the inner function):\n\n\n\n\n(\nPromise<\nBroadcastResult\n>\n): a \nPromise\n object which resolves with the result of the broadcast\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n\n  \nbroadcastPostWithBeneficiaries\n,\n\n  \nPostWithBeneficiaries\n,\n\n  \nAccessTokenResponse\n\n\n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \npostWithBeneficiariesConfig\n: \nPostWithBeneficiaries\n \n=\n \n{\n\n  \nmainTag\n:\n \n'life'\n,\n\n  \npermlink\n:\n \n'permlink-for-the-post'\n,\n\n  \ntitle\n:\n \n'Its my life!'\n,\n\n  \nbody\n:\n \n'Its my life sheck this out'\n,\n\n  \nbeneficiariesAccount\n:\n \n'strimi'\n,\n\n  \nbeneficiariesWeight\n: \n1000\n,\n \n// 10%\n\n  \nmetadata\n:\n \n{\n\n    \napp\n:\n \n'strimi/1.0.0'\n,\n\n    \ncommunity\n:\n \n'strimi'\n,\n\n    \ntags\n:\n \n[\n'life'\n,\n \n'steemit'\n]\n\n  \n}\n\n\n};\n\n\nconst\n \naccessToken\n: \nAccessTokenResponse\n \n=\n \n{\n\n  \naccess_token\n:\n \n'kj3n4jn2342.432p4k2p'\n,\n\n  \nexpires_in\n: \n640000\n,\n\n  \nusername\n:\n \n'ned'\n\n\n};\n\n\n\nbroadcastPostWithBeneficiaries\n(\npostWithBeneficiariesConfig\n)(\naccessToken\n).\nthen\n(\n\n  \nresponse\n \n=>\n \nconsole\n.\nlog\n(\nresponse\n)\n\n\n);\n\n\n//  {\n\n\n//    result: { ... }\n\n\n//  }\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\nbroadcastReblog\n\n\nexport\n \ndeclare\n \nconst\n \nbroadcastReblog\n:\n \n(\n\n  \n{\n \npostAuthor\n,\n \npostPermlink\n \n}\n:\n \nReblog\n\n\n)\n \n=>\n \n(\n\n  \n{\n \naccess_token\n,\n \nusername\n \n}\n:\n \nAccessTokenResponse\n\n\n)\n \n=>\n \nPromise\n<\nBroadcastResult\n>\n;\n\n\n\n\n\n\nDefinition\n\n\nBroadcasts reblog to the Steem blockchain.\n\n\nParameters\n\n\n\n\nreblogConfig\n (\nReblog\n): the config object for the reblog\n\n\n\n\nStep two\n (for the inner functions):\n\n\n\n\naccessToken\n (\nAccessTokenResponse\n): an object with token details of the user for whom broadcast is requested for\n\n\n\n\nReturns\n\n\nStep one\n (from the outer function):\n\n\n\n\n(\nbroadcastable\n): an inner function\n\n\n\n\nStep two\n (from the inner function):\n\n\n\n\n(\nPromise<\nBroadcastResult\n>\n): a \nPromise\n object which resolves with the result of the broadcast\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n\n  \nbroadcastReblog\n,\n\n  \nReblog\n,\n\n  \nAccessTokenResponse\n\n\n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \nreblogConfig\n: \nVote\n \n=\n \n{\n\n  \npostAuthor\n:\n \n'ned'\n,\n\n  \npostPermlink\n:\n \n'i-am-ned'\n\n\n};\n\n\nconst\n \naccessToken\n: \nAccessTokenResponse\n \n=\n \n{\n\n  \naccess_token\n:\n \n'kj3n4jn2342.432p4k2p'\n,\n\n  \nexpires_in\n: \n640000\n,\n\n  \nusername\n:\n \n'jakipatryk'\n\n\n};\n\n\n\nbroadcastReblog\n(\nreblogConfig\n)(\naccessToken\n).\nthen\n(\nresponse\n \n=>\n\n  \nconsole\n.\nlog\n(\nresponse\n)\n\n\n);\n\n\n//  {\n\n\n//    result: { ... }\n\n\n//  }\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\nbroadcastUnfollow\n\n\nexport\n \ndeclare\n \nconst\n \nbroadcastUnfollow\n:\n \n(\n\n  \n{\n \nuserToUnfollow\n \n}\n:\n \nUnfollow\n\n\n)\n \n=>\n \n(\n\n  \n{\n \naccess_token\n,\n \nusername\n \n}\n:\n \nAccessTokenResponse\n\n\n)\n \n=>\n \nPromise\n<\nBroadcastResult\n>\n;\n\n\n\n\n\n\nDefinition\n\n\nBroadcasts unfollow to the Steem blockchain.\n\n\nParameters\n\n\n\n\nunfollowConfig\n (\nUnfollow\n): the config object for the unfollow\n\n\n\n\nStep two\n (for the inner functions):\n\n\n\n\naccessToken\n (\nAccessTokenResponse\n): an object with token details of the user for whom broadcast is requested for\n\n\n\n\nReturns\n\n\nStep one\n (from the outer function):\n\n\n\n\n(\nbroadcastable\n): an inner function\n\n\n\n\nStep two\n (from the inner function):\n\n\n\n\n(\nPromise<\nBroadcastResult\n>\n): a \nPromise\n object which resolves with the result of the broadcast\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n\n  \nbroadcastUnfollow\n,\n\n  \nUnfollow\n,\n\n  \nAccessTokenResponse\n\n\n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \nunfollowConfig\n: \nUnfollow\n \n=\n \n{\n\n  \nuserToUnfollow\n:\n \n'ned'\n\n\n};\n\n\nconst\n \naccessToken\n: \nAccessTokenResponse\n \n=\n \n{\n\n  \naccess_token\n:\n \n'kj3n4jn2342.432p4k2p'\n,\n\n  \nexpires_in\n: \n640000\n,\n\n  \nusername\n:\n \n'jakipatryk'\n\n\n};\n\n\n\nbroadcastUnfollow\n(\nunfollowConfig\n)(\naccessToken\n).\nthen\n(\nresponse\n \n=>\n\n  \nconsole\n.\nlog\n(\nresponse\n)\n\n\n);\n\n\n//  {\n\n\n//    result: { ... }\n\n\n//  }\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\nbroadcastUpvote\n\n\nexport\n \ndeclare\n \nconst\n \nbroadcastUpvote\n:\n \n(\n\n  \n{\n \nauthor\n,\n \npermlink\n,\n \nweight\n \n}\n:\n \nVote\n\n\n)\n \n=>\n \n(\n\n  \n{\n \naccess_token\n,\n \nusername\n \n}\n:\n \nAccessTokenResponse\n\n\n)\n \n=>\n \nPromise\n<\nBroadcastResult\n>\n;\n\n\n\n\n\n\nDefinition\n\n\nBroadcasts upvote to the Steem blockchain.\n\n\nParameters\n\n\n\n\nupvoteConfig\n (\nVote\n): the config object for the upvote\n\n\n\n\nStep two\n (for the inner functions):\n\n\n\n\naccessToken\n (\nAccessTokenResponse\n): an object with token details of the user for whom broadcast is requested for\n\n\n\n\nReturns\n\n\nStep one\n (from the outer function):\n\n\n\n\n(\nbroadcastable\n): an inner function\n\n\n\n\nStep two\n (from the inner function):\n\n\n\n\n(\nPromise<\nBroadcastResult\n>\n): a \nPromise\n object which resolves with the result of the broadcast\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n\n  \nbroadcastUpvote\n,\n\n  \nVote\n,\n\n  \nAccessTokenResponse\n\n\n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \ndownvoteConfig\n: \nVote\n \n=\n \n{\n\n  \nauthor\n:\n \n'ned'\n,\n\n  \npermlink\n:\n \n'i-am-ned'\n,\n\n  \nweight\n: \n10000\n \n// 100% upvote\n\n\n};\n\n\nconst\n \naccessToken\n: \nAccessTokenResponse\n \n=\n \n{\n\n  \naccess_token\n:\n \n'kj3n4jn2342.432p4k2p'\n,\n\n  \nexpires_in\n: \n640000\n,\n\n  \nusername\n:\n \n'ned'\n\n\n};\n\n\n\nbroadcastUpvote\n(\ndownvoteConfig\n)(\naccessToken\n).\nthen\n(\nresponse\n \n=>\n\n  \nconsole\n.\nlog\n(\nresponse\n)\n\n\n);\n\n\n//  {\n\n\n//    result: { ... }\n\n\n//  }\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\nInterfaces\n\n\nBroadcastResult\n\n\nDefinition\n\n\nDefines an object which is a response to the successful broadcast.\n\n\nImplementation\n\n\nexport\n \ninterface\n \nBroadcastResult\n \n{\n\n  \nresult\n: \nResult\n;\n\n\n}\n\n\n\nexport\n \ninterface\n \nResult\n \n{\n\n  \nid\n: \nstring\n;\n\n  \nblock_num\n: \nnumber\n;\n\n  \ntrx_num\n: \nnumber\n;\n\n  \nexpired\n: \nboolean\n;\n\n  \nref_block_num\n: \nnumber\n;\n\n  \nref_block_prefix\n: \nnumber\n;\n\n  \nexpiration\n: \nstring\n;\n\n  \noperations\n: \nOperations\n;\n\n  \nextensions\n: \nArray\n<\nany\n>\n;\n\n  \nsignatures\n: \nArray\n<\nstring\n>\n;\n\n\n}\n\n\n\n\n\n\nReferences\n\n\n\n\nOperations\n\n\n\n\n\n\nComment\n\n\nDefinition\n\n\nIn the broadcasting module, it defines a configuration object for a comment.\n\n\nImplementation\n\n\nexport\n \ninterface\n \nComment\n \n{\n\n  \nparentAuthor?\n: \nstring\n;\n\n  \nparentPermlink\n: \nstring\n;\n\n  \ncommentPermlink\n: \nstring\n;\n\n  \ncommentBody\n: \nstring\n;\n\n  \ncommentTitle?\n: \nstring\n;\n\n  \ncommentMetadata?\n: \nobject\n;\n\n\n}\n\n\n\n\n\n\n\n\nDeletion\n\n\nDefinition\n\n\nIn the broadcasting module, it defines a configuration object for a deletion of either comment or post.\n\n\nImplementation\n\n\nexport\n \ninterface\n \nDeletion\n \n{\n\n  \npermlink\n: \nstring\n;\n\n\n}\n\n\n\n\n\n\n\n\nFollow\n\n\nDefinition\n\n\nIn the broadcasting module, it defines a configuration object for a follow.\n\n\nImplementation\n\n\nexport\n \ninterface\n \nFollow\n \n{\n\n  \nuserToFollow\n: \nstring\n;\n\n\n}\n\n\n\n\n\n\n\n\nPost\n\n\nDefinition\n\n\nIn the broadcasting module, it defines a configuration object for a post.\n\n\nImplementation\n\n\nexport\n \ninterface\n \nPost\n \n{\n\n  \nmainTag\n: \nstring\n;\n\n  \npermlink\n: \nstring\n;\n\n  \ntitle\n: \nstring\n;\n\n  \nbody\n: \nstring\n;\n\n  \nmetadata?\n: \nobject\n;\n\n\n}\n\n\n\n\n\n\n\n\nPostWithBeneficiaries\n\n\nDefinition\n\n\nIn the broadcasting module, it defines a configuration object for a post with beneficiaries.\n\n\nImplementation\n\n\nexport\n \ninterface\n \nPostWithBeneficiaries\n \n{\n\n  \nmainTag\n: \nstring\n;\n\n  \npermlink\n: \nstring\n;\n\n  \ntitle\n: \nstring\n;\n\n  \nbody\n: \nstring\n;\n\n  \nbeneficiariesAccount\n: \nstring\n;\n\n  \nbeneficiariesWeight\n: \nnumber\n;\n\n  \nmetadata?\n: \nobject\n;\n\n\n}\n\n\n\n\n\n\n\n\nReblog\n\n\nDefinition\n\n\nIn the broadcasting module, it defines a configuration object for a reblog.\n\n\nImplementation\n\n\nexport\n \ninterface\n \nReblog\n \n{\n\n  \npostAuthor\n: \nstring\n;\n\n  \npostPermlink\n: \nstring\n;\n\n\n}\n\n\n\n\n\n\n\n\nUnfollow\n\n\nDefinition\n\n\nIn the broadcasting module, it defines a configuration object for an unfollow.\n\n\nImplementation\n\n\nexport\n \ninterface\n \nUnfollow\n \n{\n\n  \nuserToUnfollow\n: \nstring\n;\n\n\n}\n\n\n\n\n\n\n\n\nVote\n\n\nDefinition\n\n\nIn the broadcasting module, it defines a configuration object for either an upvote or a downvote.\n\n\nImplementation\n\n\nexport\n \ninterface\n \nVote\n \n{\n\n  \nauthor\n: \nstring\n;\n\n  \npermlink\n: \nstring\n;\n\n  \nweight\n: \nnumber\n;\n\n\n}",
            "title": "Broadcasting"
        },
        {
            "location": "/broadcasting/#what-is-this-module-for",
            "text": "Broadcasting module was created for  handling  broadcasting operations to the Steem blockchain using  SteemConnect's tokens .  There is one  general  function ( broadcastOperations ), several  operation-specific  functions (for example,  broadcastPost ), and one  wrapper  function for handling access token refreshing if the provided one had expired ( rely ).",
            "title": "What is this module for?"
        },
        {
            "location": "/broadcasting/#api-reference",
            "text": "",
            "title": "API reference"
        },
        {
            "location": "/broadcasting/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/broadcasting/#broadcastoperations",
            "text": "export   declare   function   broadcastOperations ([... operations ] :   Operations ) :   ( \n   {   access_token   } :   AccessTokenResponse  )   =>   Promise < BroadcastResult > ;",
            "title": "broadcastOperations"
        },
        {
            "location": "/broadcasting/#definition",
            "text": "Broadcasts given operations to the Steem blockchain.",
            "title": "Definition"
        },
        {
            "location": "/broadcasting/#parameters",
            "text": "Step one  (for the outer function):   operations  ( Operations ): an array of operations to broadcast   Step two  (for the inner function):   accessToken  ( AccessTokenResponse ): an object with token details of the user for whom broadcast is requested for",
            "title": "Parameters"
        },
        {
            "location": "/broadcasting/#returns",
            "text": "Step one  (from the outer function):   ( broadcastable ): an inner function   Step two  (from the inner function):   ( Promise< BroadcastResult > ): a  Promise  object which resolves with the result of the broadcast",
            "title": "Returns"
        },
        {
            "location": "/broadcasting/#example-usage",
            "text": "import   { \n   broadcastOperations , \n   AccessTokenResponse , \n   Operations  }   from   'steemconnect-firebase-functions' ;  const   accessToken :  AccessTokenResponse   =   { \n   access_token :   '435tfgfdgdfg.434342' , \n   expires_in :  3243234 , \n   username :   'jakipatryk-dev'  };  const   operations :  Operations   =   [ \n   [ \n     'vote' , \n     { \n       voter :   'jakipatryk-dev' , \n       author :   'ned' , \n       permlink :   'i-am-ned' , \n       weight :  10000 \n     } \n   ]  ];  broadcastOperations ( operations )( accessToken ). then ( result   => \n   console . log ( result )  );",
            "title": "Example Usage"
        },
        {
            "location": "/broadcasting/#implementation",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/broadcasting/#rely",
            "text": "export   declare   const   rely :   ( \n   {   clientId ,   clientSecret   } :   Required < ClientCredentials >  )   =>   ( \n   { \n     access_token , \n     refresh_token , \n     username , \n     expires_in \n   } :   Required < AccessTokenResponse >  )   =>   ( \n   broadcastable :  Function  )   =>   Promise < BroadcastResult   &   Partial < AccessTokenResponse >> ;",
            "title": "rely"
        },
        {
            "location": "/broadcasting/#definition_1",
            "text": "A wrapper function for  broadcastables  which ensures that broadcast is successful if  refresh_token  is correct.",
            "title": "Definition"
        },
        {
            "location": "/broadcasting/#parameters_1",
            "text": "Step one  (for the outer function):   clientCredentials  ( ClientCredentails ): object with client credentials   Step two  (for the middle function):   accessToken  ( AccessTokenResponse ): an object with token details ( refresh_token  is required there) of the user for whom broadcast is requested for   Step three  (for the inner function)   broadcastable : the broadcastable function",
            "title": "Parameters"
        },
        {
            "location": "/broadcasting/#returns_1",
            "text": "Step one  (from the outer function):   middle function with  clientCredentials  in a closure   Step two  (from the middle function):   inner function with  clientCredentials  and  accessToken  in a closue   Step three  (from the inner function):   ( Promise< BroadcastResult  & Partial< AccessTokenResponse >> ): a  Promise  object which resolves with the result of the broadcast and new tokens if refreshed",
            "title": "Returns"
        },
        {
            "location": "/broadcasting/#example-usage_1",
            "text": "import   { \n   rely , \n   AccessTokenResponse , \n   Operations , \n   ClientCredentials  }   from   'steemconnect-firebase-functions/broadcasting' ;  const   clientCredentials :  ClientCredentials   =   { \n   clientId :   'strimi.app' , \n   clientSecret :   '432rnj3nr23nkvfdvdf'  };  const   accessToken :  AccessTokenResponse   =   { \n   access_token :   'fdsfertre' , \n   expires_in :  4323432 , \n   username :   'jakipatryk' , \n   refresh_token :   '3rk3m2krl3'  };  const   voteOperation :  Operations   =   [ \n   [ \n     'vote' , \n     { \n       voter :   'jakipatryk' , \n       author :   'whoever' , \n       permlink :   'some-permlink' , \n       weight :  10000 \n     } \n   ]  ];  const   broadcastableVote   =   broadcastOperations ( voteOperations );  rely ( clientCredentials )( accessToken )( broadcastableVote ). then ( response   => \n   console . log ( response )  );  //  {  //    result: { ... }  //    access_token: 'new access token if refreshed, otherwise undefined`  //    refresh_token: 'new refresh token if refreshed, otherwise undefined'  //    username: ...  //    expires: ...  //  }",
            "title": "Example Usage"
        },
        {
            "location": "/broadcasting/#implementation_1",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/broadcasting/#broadcastcomment",
            "text": "export   declare   const   broadcastComment :   ( \n   { \n     parentAuthor , \n     parentPermlink , \n     commentPermlink , \n     commentBody , \n     commentTitle , \n     commentMetadata \n   } :   Comment  )   =>   ( \n   {   access_token ,   username   } :   AccessTokenResponse  )   =>   Promise < BroadcastResult > ;",
            "title": "broadcastComment"
        },
        {
            "location": "/broadcasting/#definition_2",
            "text": "Broadcasts comment for a given user to the Steem blockchain.",
            "title": "Definition"
        },
        {
            "location": "/broadcasting/#parameters_2",
            "text": "Step one  (for the outer functions):   commentConfig  ( Comment ): the config object for the comment   Step two  (for the inner functions):   accessToken  ( AccessTokenResponse ): an object with token details of the user for whom broadcast is requested for",
            "title": "Parameters"
        },
        {
            "location": "/broadcasting/#returns_2",
            "text": "Step one  (from the outer function):   ( broadcastable ): an inner function   Step two  (from the inner function):   ( Promise< BroadcastResult > ): a  Promise  object which resolves with the result of the broadcast",
            "title": "Returns"
        },
        {
            "location": "/broadcasting/#example-usage_2",
            "text": "import   { \n   broadcastComment , \n   Comment , \n   AccessTokenResponse  }   from   'steemconnect-firebase-functions' ;  const   commentConfig :  Comment   =   { \n   parentAuthor :   'ned' , \n   parentPermlink :   'i-am-ned' , \n   commentPermlink :   'permlink-to-comment' , \n   commentBody :   'Wow! Such an amazing post!' , \n   commentMetadata :   { \n     app :   'strimi/1.0.0' , \n     community :   'strimi' \n   }  };  const   accessToken :  AccessTokenResponse   =   { \n   access_token :   'etfso443nnf3.3423hhf' , \n   expires_in :  640000 , \n   username :   'jakipatryk'  };  broadcastComment ( commentConfig )( accessToken ). then ( response   => \n   console . log ( response )  );  //  {  //    result: { ... }  //  }",
            "title": "Example Usage"
        },
        {
            "location": "/broadcasting/#implementation_2",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/broadcasting/#broadcastdeletion",
            "text": "export   declare   const   broadcastDeletion :   ( \n   {   permlink   } :   Deletion  )   =>   ( \n   {   access_token ,   username   } :   AccessTokenResponse  )   =>   Promise < BroadcastResult > ;",
            "title": "broadcastDeletion"
        },
        {
            "location": "/broadcasting/#definition_3",
            "text": "Broadcasts deletion of either comment or post to the Steem blockchain.",
            "title": "Definition"
        },
        {
            "location": "/broadcasting/#parameters_3",
            "text": "deletionConfig  ( Deletion ): the config object for the deletion   Step two  (for the inner functions):   accessToken  ( AccessTokenResponse ): an object with token details of the user for whom broadcast is requested for",
            "title": "Parameters"
        },
        {
            "location": "/broadcasting/#returns_3",
            "text": "Step one  (from the outer function):   ( broadcastable ): an inner function   Step two  (from the inner function):   ( Promise< BroadcastResult > ): a  Promise  object which resolves with the result of the broadcast",
            "title": "Returns"
        },
        {
            "location": "/broadcasting/#example-usage_3",
            "text": "import   { \n   broadcastDeletion , \n   Deletion , \n   AccessTokenResponse  }   from   'steemconnect-firebase-functions' ;  const   deletionConfig :  Deletion   =   { \n   permlink :   'my-bad-post'  };  const   accessToken :  AccessTokenResponse   =   { \n   access_token :   'kj3n4jn2342.432p4k2p' , \n   expires_in :  640000 , \n   username :   'ned'  };  broadcastDeletion ( deletionConfig )( accessToken ). then ( response   => \n   console . log ( response )  );  //  {  //    result: { ... }  //  }",
            "title": "Example Usage"
        },
        {
            "location": "/broadcasting/#implementation_3",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/broadcasting/#broadcastdownvote",
            "text": "export   declare   const   broadcastDownvote :   ( \n   {   author ,   permlink ,   weight   } :   Vote  )   =>   ( \n   {   access_token ,   username   } :   AccessTokenResponse  )   =>   Promise < BroadcastResult > ;",
            "title": "broadcastDownvote"
        },
        {
            "location": "/broadcasting/#definition_4",
            "text": "Broadcasts downvote to the Steem blockchain.",
            "title": "Definition"
        },
        {
            "location": "/broadcasting/#parameters_4",
            "text": "downvoteConfig  ( Vote ): the config object for the vote (even though you want to broadcast downvote, pass a positive number in the weight)   Step two  (for the inner functions):   accessToken  ( AccessTokenResponse ): an object with token details of the user for whom broadcast is requested for",
            "title": "Parameters"
        },
        {
            "location": "/broadcasting/#returns_4",
            "text": "Step one  (from the outer function):   ( broadcastable ): an inner function   Step two  (from the inner function):   ( Promise< BroadcastResult > ): a  Promise  object which resolves with the result of the broadcast",
            "title": "Returns"
        },
        {
            "location": "/broadcasting/#example-usage_4",
            "text": "import   { \n   broadcastDownvote , \n   Vote , \n   AccessTokenResponse  }   from   'steemconnect-firebase-functions' ;  const   downvoteConfig :  Vote   =   { \n   author :   'ned' , \n   permlink :   'i-am-ned' , \n   weight :  10000   // 100% downvote  };  const   accessToken :  AccessTokenResponse   =   { \n   access_token :   'kj3n4jn2342.432p4k2p' , \n   expires_in :  640000 , \n   username :   'jakipatryk'  };  broadcastDownvote ( downvoteConfig )( accessToken ). then ( response   => \n   console . log ( response )  );  //  {  //    result: { ... }  //  }",
            "title": "Example Usage"
        },
        {
            "location": "/broadcasting/#implementation_4",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/broadcasting/#broadcastfollow",
            "text": "export   declare   const   broadcastFollow :   ( \n   {   userToFollow   } :   Follow  )   =>   ( \n   {   access_token ,   username   } :   AccessTokenResponse  )   =>   Promise < BroadcastResult > ;",
            "title": "broadcastFollow"
        },
        {
            "location": "/broadcasting/#definition_5",
            "text": "Broadcasts follow to the Steem blockchain.",
            "title": "Definition"
        },
        {
            "location": "/broadcasting/#parameters_5",
            "text": "followConfig  ( Follow ): the config object for the follow   Step two  (for the inner functions):   accessToken  ( AccessTokenResponse ): an object with token details of the user for whom broadcast is requested for",
            "title": "Parameters"
        },
        {
            "location": "/broadcasting/#returns_5",
            "text": "Step one  (from the outer function):   ( broadcastable ): an inner function   Step two  (from the inner function):   ( Promise< BroadcastResult > ): a  Promise  object which resolves with the result of the broadcast",
            "title": "Returns"
        },
        {
            "location": "/broadcasting/#example-usage_5",
            "text": "import   { \n   broadcastFollow , \n   Follow , \n   AccessTokenResponse  }   from   'steemconnect-firebase-functions' ;  const   followConfig :  Follow   =   { \n   userToFollow :   'jakipatryk'  };  const   accessToken :  AccessTokenResponse   =   { \n   access_token :   'kj3n4jn2342.432p4k2p' , \n   expires_in :  640000 , \n   username :   'ned'  };  broadcastFollow ( followConfig )( accessToken ). then ( response   => \n   console . log ( response )  );  //  {  //    result: { ... }  //  }",
            "title": "Example Usage"
        },
        {
            "location": "/broadcasting/#implementation_5",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/broadcasting/#broadcastpost",
            "text": "export   declare   const   broadcastPost :   ( \n   {   mainTag ,   permlink ,   title ,   body ,   metadata   } :   Post  )   =>   ( \n   {   access_token ,   username   } :   AccessTokenResponse  )   =>   Promise < BroadcastResult > ;",
            "title": "broadcastPost"
        },
        {
            "location": "/broadcasting/#definition_6",
            "text": "Broadcasts post to the Steem blockchain.",
            "title": "Definition"
        },
        {
            "location": "/broadcasting/#parameters_6",
            "text": "postConfig  ( Post ): the config object for the post   Step two  (for the inner functions):   accessToken  ( AccessTokenResponse ): an object with token details of the user for whom broadcast is requested for",
            "title": "Parameters"
        },
        {
            "location": "/broadcasting/#returns_6",
            "text": "Step one  (from the outer function):   ( broadcastable ): an inner function   Step two  (from the inner function):   ( Promise< BroadcastResult > ): a  Promise  object which resolves with the result of the broadcast",
            "title": "Returns"
        },
        {
            "location": "/broadcasting/#example-usage_6",
            "text": "import   { \n   broadcastPost , \n   Post , \n   AccessTokenResponse  }   from   'steemconnect-firebase-functions' ;  const   postConfig :  Post   =   { \n   mainTag :   'life' , \n   permlink :   'permlink-for-the-post' , \n   title :   'Its my life!' , \n   body :   'Its my life sheck this out' , \n   metadata :   { \n     app :   'strimi/1.0.0' , \n     community :   'strimi' , \n     tags :   [ 'life' ,   'steemit' ] \n   }  };  const   accessToken :  AccessTokenResponse   =   { \n   access_token :   'kj3n4jn2342.432p4k2p' , \n   expires_in :  640000 , \n   username :   'ned'  };  broadcastPost ( postConfig )( accessToken ). then ( response   =>   console . log ( response ));  //  {  //    result: { ... }  //  }",
            "title": "Example Usage"
        },
        {
            "location": "/broadcasting/#implementation_6",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/broadcasting/#broadcastpostwithbeneficiaries",
            "text": "export   declare   const   broadcastPostWithBeneficiaries :   ( \n   { \n     mainTag , \n     permlink , \n     title , \n     body , \n     beneficiariesAccount , \n     beneficiariesWeight , \n     metadata \n   } :   PostWithBeneficiaries  )   =>   ( \n   {   access_token ,   username   } :   AccessTokenResponse  )   =>   Promise < BroadcastResult > ;",
            "title": "broadcastPostWithBeneficiaries"
        },
        {
            "location": "/broadcasting/#definition_7",
            "text": "Broadcasts post along with beneficiaries config to the Steem blockchain.",
            "title": "Definition"
        },
        {
            "location": "/broadcasting/#parameters_7",
            "text": "postWithBeneficiariesConfig  ( PostWithBeneficiaires ): the config object for the post with beneficiaries   Step two  (for the inner functions):   accessToken  ( AccessTokenResponse ): an object with token details of the user for whom broadcast is requested for",
            "title": "Parameters"
        },
        {
            "location": "/broadcasting/#returns_7",
            "text": "Step one  (from the outer function):   ( broadcastable ): an inner function   Step two  (from the inner function):   ( Promise< BroadcastResult > ): a  Promise  object which resolves with the result of the broadcast",
            "title": "Returns"
        },
        {
            "location": "/broadcasting/#example-usage_7",
            "text": "import   { \n   broadcastPostWithBeneficiaries , \n   PostWithBeneficiaries , \n   AccessTokenResponse  }   from   'steemconnect-firebase-functions' ;  const   postWithBeneficiariesConfig :  PostWithBeneficiaries   =   { \n   mainTag :   'life' , \n   permlink :   'permlink-for-the-post' , \n   title :   'Its my life!' , \n   body :   'Its my life sheck this out' , \n   beneficiariesAccount :   'strimi' , \n   beneficiariesWeight :  1000 ,   // 10% \n   metadata :   { \n     app :   'strimi/1.0.0' , \n     community :   'strimi' , \n     tags :   [ 'life' ,   'steemit' ] \n   }  };  const   accessToken :  AccessTokenResponse   =   { \n   access_token :   'kj3n4jn2342.432p4k2p' , \n   expires_in :  640000 , \n   username :   'ned'  };  broadcastPostWithBeneficiaries ( postWithBeneficiariesConfig )( accessToken ). then ( \n   response   =>   console . log ( response )  );  //  {  //    result: { ... }  //  }",
            "title": "Example Usage"
        },
        {
            "location": "/broadcasting/#implementation_7",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/broadcasting/#broadcastreblog",
            "text": "export   declare   const   broadcastReblog :   ( \n   {   postAuthor ,   postPermlink   } :   Reblog  )   =>   ( \n   {   access_token ,   username   } :   AccessTokenResponse  )   =>   Promise < BroadcastResult > ;",
            "title": "broadcastReblog"
        },
        {
            "location": "/broadcasting/#definition_8",
            "text": "Broadcasts reblog to the Steem blockchain.",
            "title": "Definition"
        },
        {
            "location": "/broadcasting/#parameters_8",
            "text": "reblogConfig  ( Reblog ): the config object for the reblog   Step two  (for the inner functions):   accessToken  ( AccessTokenResponse ): an object with token details of the user for whom broadcast is requested for",
            "title": "Parameters"
        },
        {
            "location": "/broadcasting/#returns_8",
            "text": "Step one  (from the outer function):   ( broadcastable ): an inner function   Step two  (from the inner function):   ( Promise< BroadcastResult > ): a  Promise  object which resolves with the result of the broadcast",
            "title": "Returns"
        },
        {
            "location": "/broadcasting/#example-usage_8",
            "text": "import   { \n   broadcastReblog , \n   Reblog , \n   AccessTokenResponse  }   from   'steemconnect-firebase-functions' ;  const   reblogConfig :  Vote   =   { \n   postAuthor :   'ned' , \n   postPermlink :   'i-am-ned'  };  const   accessToken :  AccessTokenResponse   =   { \n   access_token :   'kj3n4jn2342.432p4k2p' , \n   expires_in :  640000 , \n   username :   'jakipatryk'  };  broadcastReblog ( reblogConfig )( accessToken ). then ( response   => \n   console . log ( response )  );  //  {  //    result: { ... }  //  }",
            "title": "Example Usage"
        },
        {
            "location": "/broadcasting/#implementation_8",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/broadcasting/#broadcastunfollow",
            "text": "export   declare   const   broadcastUnfollow :   ( \n   {   userToUnfollow   } :   Unfollow  )   =>   ( \n   {   access_token ,   username   } :   AccessTokenResponse  )   =>   Promise < BroadcastResult > ;",
            "title": "broadcastUnfollow"
        },
        {
            "location": "/broadcasting/#definition_9",
            "text": "Broadcasts unfollow to the Steem blockchain.",
            "title": "Definition"
        },
        {
            "location": "/broadcasting/#parameters_9",
            "text": "unfollowConfig  ( Unfollow ): the config object for the unfollow   Step two  (for the inner functions):   accessToken  ( AccessTokenResponse ): an object with token details of the user for whom broadcast is requested for",
            "title": "Parameters"
        },
        {
            "location": "/broadcasting/#returns_9",
            "text": "Step one  (from the outer function):   ( broadcastable ): an inner function   Step two  (from the inner function):   ( Promise< BroadcastResult > ): a  Promise  object which resolves with the result of the broadcast",
            "title": "Returns"
        },
        {
            "location": "/broadcasting/#example-usage_9",
            "text": "import   { \n   broadcastUnfollow , \n   Unfollow , \n   AccessTokenResponse  }   from   'steemconnect-firebase-functions' ;  const   unfollowConfig :  Unfollow   =   { \n   userToUnfollow :   'ned'  };  const   accessToken :  AccessTokenResponse   =   { \n   access_token :   'kj3n4jn2342.432p4k2p' , \n   expires_in :  640000 , \n   username :   'jakipatryk'  };  broadcastUnfollow ( unfollowConfig )( accessToken ). then ( response   => \n   console . log ( response )  );  //  {  //    result: { ... }  //  }",
            "title": "Example Usage"
        },
        {
            "location": "/broadcasting/#implementation_9",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/broadcasting/#broadcastupvote",
            "text": "export   declare   const   broadcastUpvote :   ( \n   {   author ,   permlink ,   weight   } :   Vote  )   =>   ( \n   {   access_token ,   username   } :   AccessTokenResponse  )   =>   Promise < BroadcastResult > ;",
            "title": "broadcastUpvote"
        },
        {
            "location": "/broadcasting/#definition_10",
            "text": "Broadcasts upvote to the Steem blockchain.",
            "title": "Definition"
        },
        {
            "location": "/broadcasting/#parameters_10",
            "text": "upvoteConfig  ( Vote ): the config object for the upvote   Step two  (for the inner functions):   accessToken  ( AccessTokenResponse ): an object with token details of the user for whom broadcast is requested for",
            "title": "Parameters"
        },
        {
            "location": "/broadcasting/#returns_10",
            "text": "Step one  (from the outer function):   ( broadcastable ): an inner function   Step two  (from the inner function):   ( Promise< BroadcastResult > ): a  Promise  object which resolves with the result of the broadcast",
            "title": "Returns"
        },
        {
            "location": "/broadcasting/#example-usage_10",
            "text": "import   { \n   broadcastUpvote , \n   Vote , \n   AccessTokenResponse  }   from   'steemconnect-firebase-functions' ;  const   downvoteConfig :  Vote   =   { \n   author :   'ned' , \n   permlink :   'i-am-ned' , \n   weight :  10000   // 100% upvote  };  const   accessToken :  AccessTokenResponse   =   { \n   access_token :   'kj3n4jn2342.432p4k2p' , \n   expires_in :  640000 , \n   username :   'ned'  };  broadcastUpvote ( downvoteConfig )( accessToken ). then ( response   => \n   console . log ( response )  );  //  {  //    result: { ... }  //  }",
            "title": "Example Usage"
        },
        {
            "location": "/broadcasting/#implementation_10",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/broadcasting/#interfaces",
            "text": "",
            "title": "Interfaces"
        },
        {
            "location": "/broadcasting/#broadcastresult",
            "text": "",
            "title": "BroadcastResult"
        },
        {
            "location": "/broadcasting/#definition_11",
            "text": "Defines an object which is a response to the successful broadcast.",
            "title": "Definition"
        },
        {
            "location": "/broadcasting/#implementation_11",
            "text": "export   interface   BroadcastResult   { \n   result :  Result ;  }  export   interface   Result   { \n   id :  string ; \n   block_num :  number ; \n   trx_num :  number ; \n   expired :  boolean ; \n   ref_block_num :  number ; \n   ref_block_prefix :  number ; \n   expiration :  string ; \n   operations :  Operations ; \n   extensions :  Array < any > ; \n   signatures :  Array < string > ;  }",
            "title": "Implementation"
        },
        {
            "location": "/broadcasting/#references",
            "text": "Operations",
            "title": "References"
        },
        {
            "location": "/broadcasting/#comment",
            "text": "",
            "title": "Comment"
        },
        {
            "location": "/broadcasting/#definition_12",
            "text": "In the broadcasting module, it defines a configuration object for a comment.",
            "title": "Definition"
        },
        {
            "location": "/broadcasting/#implementation_12",
            "text": "export   interface   Comment   { \n   parentAuthor? :  string ; \n   parentPermlink :  string ; \n   commentPermlink :  string ; \n   commentBody :  string ; \n   commentTitle? :  string ; \n   commentMetadata? :  object ;  }",
            "title": "Implementation"
        },
        {
            "location": "/broadcasting/#deletion",
            "text": "",
            "title": "Deletion"
        },
        {
            "location": "/broadcasting/#definition_13",
            "text": "In the broadcasting module, it defines a configuration object for a deletion of either comment or post.",
            "title": "Definition"
        },
        {
            "location": "/broadcasting/#implementation_13",
            "text": "export   interface   Deletion   { \n   permlink :  string ;  }",
            "title": "Implementation"
        },
        {
            "location": "/broadcasting/#follow",
            "text": "",
            "title": "Follow"
        },
        {
            "location": "/broadcasting/#definition_14",
            "text": "In the broadcasting module, it defines a configuration object for a follow.",
            "title": "Definition"
        },
        {
            "location": "/broadcasting/#implementation_14",
            "text": "export   interface   Follow   { \n   userToFollow :  string ;  }",
            "title": "Implementation"
        },
        {
            "location": "/broadcasting/#post",
            "text": "",
            "title": "Post"
        },
        {
            "location": "/broadcasting/#definition_15",
            "text": "In the broadcasting module, it defines a configuration object for a post.",
            "title": "Definition"
        },
        {
            "location": "/broadcasting/#implementation_15",
            "text": "export   interface   Post   { \n   mainTag :  string ; \n   permlink :  string ; \n   title :  string ; \n   body :  string ; \n   metadata? :  object ;  }",
            "title": "Implementation"
        },
        {
            "location": "/broadcasting/#postwithbeneficiaries",
            "text": "",
            "title": "PostWithBeneficiaries"
        },
        {
            "location": "/broadcasting/#definition_16",
            "text": "In the broadcasting module, it defines a configuration object for a post with beneficiaries.",
            "title": "Definition"
        },
        {
            "location": "/broadcasting/#implementation_16",
            "text": "export   interface   PostWithBeneficiaries   { \n   mainTag :  string ; \n   permlink :  string ; \n   title :  string ; \n   body :  string ; \n   beneficiariesAccount :  string ; \n   beneficiariesWeight :  number ; \n   metadata? :  object ;  }",
            "title": "Implementation"
        },
        {
            "location": "/broadcasting/#reblog",
            "text": "",
            "title": "Reblog"
        },
        {
            "location": "/broadcasting/#definition_17",
            "text": "In the broadcasting module, it defines a configuration object for a reblog.",
            "title": "Definition"
        },
        {
            "location": "/broadcasting/#implementation_17",
            "text": "export   interface   Reblog   { \n   postAuthor :  string ; \n   postPermlink :  string ;  }",
            "title": "Implementation"
        },
        {
            "location": "/broadcasting/#unfollow",
            "text": "",
            "title": "Unfollow"
        },
        {
            "location": "/broadcasting/#definition_18",
            "text": "In the broadcasting module, it defines a configuration object for an unfollow.",
            "title": "Definition"
        },
        {
            "location": "/broadcasting/#implementation_18",
            "text": "export   interface   Unfollow   { \n   userToUnfollow :  string ;  }",
            "title": "Implementation"
        },
        {
            "location": "/broadcasting/#vote",
            "text": "",
            "title": "Vote"
        },
        {
            "location": "/broadcasting/#definition_19",
            "text": "In the broadcasting module, it defines a configuration object for either an upvote or a downvote.",
            "title": "Definition"
        },
        {
            "location": "/broadcasting/#implementation_19",
            "text": "export   interface   Vote   { \n   author :  string ; \n   permlink :  string ; \n   weight :  number ;  }",
            "title": "Implementation"
        },
        {
            "location": "/firebase/",
            "text": "Glossary\n\n\nadmin\n\n\nAll functions from this module require \nadmin\n dependency. What is this \nadmin\n anyway?\n\n\nThe word \nadmin\n actually refers to \nfirebase-admin\n NPM package, aka. \nFirebase Admin Node SDK\n. The \nadmin\n object has to be already configurated.\n\n\n\n\nSetup guide\n: \nFirebase docs\n\n\n\n\nWhat is this module for?\n\n\nThis module is for helping developers who want to use \nFirebase\n with \nSteemConnect\n.\n\n\nIt contains functions for \nminting\n custom auth tokens, \nsaving\n access token in the Firestore, \ngetting\n access token from Firestore, and \ncreating\n or \nupdating\n user auth account.\n\n\nAPI reference\n\n\nFunctions\n\n\ncreateFirebaseAccount\n\n\nexport\n \ndeclare\n \nfunction\n \ncreateFirebaseAccount\n(\n\n  \nadmin\n: \nany\n,\n\n  \n{\n\n    \nuid\n,\n\n    \nusername\n,\n\n    \nphotoURL\n,\n\n    \nemail\n,\n\n    \nemailVerified\n,\n\n    \nphoneNumber\n,\n\n    \ndisabled\n\n  \n}\n:\n \nFirebaseAccount\n\n\n)\n:\n \nPromise\n<\nany\n>\n;\n\n\n\n\n\n\nDefinition\n\n\nCreates or updates Firebase auth user account.\n\n\nParameters\n\n\n\n\nadmin\n\n\nfirebaseAccountConfig\n (\nFirebaseAccount\n): the configuration object for an account\n\n\n\n\nReturns\n\n\n\n\n(\nPromise\n): the \nPromise\n object\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n\n  \ncreateFirebaseAccount\n,\n\n  \nFirebaseAccount\n\n\n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\nimport\n \n*\n \nas\n \nadmin\n \nfrom\n \n'firebase-admin'\n;\n\n\n\nconst\n \nserviceAccount\n \n=\n \nrequire\n(\n'../serviceAccountKey.json'\n);\n\n\n\nadmin\n.\ninitializeApp\n({\n\n  \ncredential\n: \nadmin.credential.cert\n(\nserviceAccount\n)\n\n\n});\n\n\n\nconst\n \nfirebaseAccountConfig\n: \nFirebaseAccount\n \n=\n \n{\n\n  \nuid\n:\n \n'steemconnect:jakipatryk'\n,\n\n  \nusername\n:\n \n'jakipatryk'\n,\n\n  \nphotoURL\n:\n \n'https://some-uri.com/avatar.jpg'\n\n\n};\n\n\n\ncreateFirebaseAccount\n(\nadmin\n,\n \nfirebaseAccountConfig\n).\nthen\n(()\n \n=>\n \n{\n\n  \nconsole\n.\nlog\n(\n5\n \n*\n \n20\n \n+\n \n11\n);\n\n\n});\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\nmintFirebaseToken\n\n\nexport\n \ndeclare\n \nfunction\n \nmintFirebaseToken\n(\n\n  \nadmin\n: \nany\n,\n\n  \nuid\n: \nstring\n\n\n)\n:\n \nPromise\n<\nstring\n>\n;\n\n\n\n\n\n\nDefinition\n\n\nCreates and returns Firebase custom auth token.\n\n\nParameters\n\n\n\n\nadmin\n\n\nuid\n (\nstring\n): the uid of the user you want to mint custom Firebase auth token for\n\n\n\n\nReturns\n\n\n(\nPromise\n): the \nPromise\n object which resolves with Firebase custom auth token\n\n\nExample Usage\n\n\nimport\n \n{\n \nmintFirebaseToken\n \n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\nimport\n \n*\n \nas\n \nadmin\n \nfrom\n \n'firebase-admin'\n;\n\n\n\nconst\n \nserviceAccount\n \n=\n \nrequire\n(\n'../serviceAccountKey.json'\n);\n\n\n\nadmin\n.\ninitializeApp\n({\n\n  \ncredential\n: \nadmin.credential.cert\n(\nserviceAccount\n)\n\n\n});\n\n\n\nconst\n \nuid\n \n=\n \n'steemconnect:jakipatryk'\n;\n\n\n\nmintFirebaseToken\n(\nadmin\n,\n \nuid\n).\nthen\n(\ntoken\n \n=>\n \n{\n\n  \nconsole\n.\nlog\n(\ntoken\n);\n\n\n});\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\nsaveAccessToken\n\n\nexport\n \ndeclare\n \nfunction\n \nsaveAccessToken\n(\n\n  \nadmin\n: \nany\n,\n\n  \nuid\n: \nstring\n,\n\n  \naccessToken\n: \nAccessTokenResponse\n\n\n)\n:\n \nPromise\n<\nany\n>\n;\n\n\n\n\n\n\nDefinition\n\n\nSaves access token and its details in the Firestore.\n\n\nParameters\n\n\n\n\nadmin\n\n\nuid\n (\nstring\n): the uid of the user\n\n\naccessToken\n (\nAccessTokenResponse\n): the access token + its details object\n\n\n\n\nReturns\n\n\n\n\n(\nPromise\n): the \nPromise\n object\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n \nsaveAccessToken\n \n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\nimport\n \n*\n \nas\n \nadmin\n \nfrom\n \n'firebase-admin'\n;\n\n\n\nconst\n \nserviceAccount\n \n=\n \nrequire\n(\n'../serviceAccountKey.json'\n);\n\n\n\nadmin\n.\ninitializeApp\n({\n\n  \ncredential\n: \nadmin.credential.cert\n(\nserviceAccount\n)\n\n\n});\n\n\n\nconst\n \nuid\n \n=\n \n'steemconnect:jakipatryk'\n;\n\n\nconst\n \naccessToken\n \n=\n \n{\n\n  \naccess_token\n:\n \n'423423432.fsdfewf43'\n,\n\n  \nexpires_in\n: \n4200000\n,\n\n  \nusername\n:\n \n'jakipatryk'\n,\n\n  \nrefresh_token\n:\n \n'4u5jnj4f3.543jim43i'\n\n\n};\n\n\n\nsaveAccessToken\n(\nadmin\n,\n \nuid\n,\n \naccessToken\n).\nthen\n(()\n \n=>\n \n{\n\n  \nconsole\n.\nlog\n(\n2\n \n+\n \n2\n \n*\n \n4\n);\n\n\n});\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\ngetAccessTokenFromFirestore\n\n\nexport\n \ndeclare\n \nfunction\n \ngetAccessTokenFromFirestore\n(\n\n  \nadmin\n: \nany\n,\n\n  \nuid\n: \nstring\n\n\n)\n:\n \nPromise\n<\nAccessTokenResponse\n>\n;\n\n\n\n\n\n\nDefinition\n\n\nGets and returns the access token + details object from the Firestore.\n\n\nParameters\n\n\n\n\nadmin\n\n\nuid\n (\nstring\n): the uid of the user you want to get access token for\n\n\n\n\nReturns\n\n\n\n\n(\nPromise<\nAccessTokenResponse\n>\n): the \nPromise\n object which resolves with the \nAccessTokenResponse\n object\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n \ngetAccessTokenFromFirestore\n \n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\nimport\n \n*\n \nas\n \nadmin\n \nfrom\n \n'firebase-admin'\n;\n\n\n\nconst\n \nserviceAccount\n \n=\n \nrequire\n(\n'../serviceAccountKey.json'\n);\n\n\n\nadmin\n.\ninitializeApp\n({\n\n  \ncredential\n: \nadmin.credential.cert\n(\nserviceAccount\n)\n\n\n});\n\n\n\nconst\n \nuid\n \n=\n \n'steemconnect:jakipatryk'\n;\n\n\n\ngetAccessTokenFromFirestore\n(\nadmin\n,\n \nuid\n).\nthen\n(\ntokens\n \n=>\n \nconsole\n.\nlog\n(\ntokens\n));\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\nInterfaces\n\n\nFirebaseAccount\n\n\nDefinition\n\n\nDefines Firebase account object.\n\n\nImplementation\n\n\nexport\n \ninterface\n \nFirebaseAccount\n \n{\n\n  \nuid\n: \nstring\n;\n\n  \nusername\n: \nstring\n;\n\n  \nphotoURL?\n: \nstring\n;\n\n  \nemail?\n: \nstring\n;\n\n  \nemailVerified?\n: \nboolean\n;\n\n  \nphoneNumber?\n: \nstring\n;\n\n  \ndisabled?\n: \nboolean\n;\n\n\n}",
            "title": "Firebase"
        },
        {
            "location": "/firebase/#glossary",
            "text": "",
            "title": "Glossary"
        },
        {
            "location": "/firebase/#admin",
            "text": "All functions from this module require  admin  dependency. What is this  admin  anyway?  The word  admin  actually refers to  firebase-admin  NPM package, aka.  Firebase Admin Node SDK . The  admin  object has to be already configurated.   Setup guide :  Firebase docs",
            "title": "admin"
        },
        {
            "location": "/firebase/#what-is-this-module-for",
            "text": "This module is for helping developers who want to use  Firebase  with  SteemConnect .  It contains functions for  minting  custom auth tokens,  saving  access token in the Firestore,  getting  access token from Firestore, and  creating  or  updating  user auth account.",
            "title": "What is this module for?"
        },
        {
            "location": "/firebase/#api-reference",
            "text": "",
            "title": "API reference"
        },
        {
            "location": "/firebase/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/firebase/#createfirebaseaccount",
            "text": "export   declare   function   createFirebaseAccount ( \n   admin :  any , \n   { \n     uid , \n     username , \n     photoURL , \n     email , \n     emailVerified , \n     phoneNumber , \n     disabled \n   } :   FirebaseAccount  ) :   Promise < any > ;",
            "title": "createFirebaseAccount"
        },
        {
            "location": "/firebase/#definition",
            "text": "Creates or updates Firebase auth user account.",
            "title": "Definition"
        },
        {
            "location": "/firebase/#parameters",
            "text": "admin  firebaseAccountConfig  ( FirebaseAccount ): the configuration object for an account",
            "title": "Parameters"
        },
        {
            "location": "/firebase/#returns",
            "text": "( Promise ): the  Promise  object",
            "title": "Returns"
        },
        {
            "location": "/firebase/#example-usage",
            "text": "import   { \n   createFirebaseAccount , \n   FirebaseAccount  }   from   'steemconnect-firebase-functions' ;  import   *   as   admin   from   'firebase-admin' ;  const   serviceAccount   =   require ( '../serviceAccountKey.json' );  admin . initializeApp ({ \n   credential :  admin.credential.cert ( serviceAccount )  });  const   firebaseAccountConfig :  FirebaseAccount   =   { \n   uid :   'steemconnect:jakipatryk' , \n   username :   'jakipatryk' , \n   photoURL :   'https://some-uri.com/avatar.jpg'  };  createFirebaseAccount ( admin ,   firebaseAccountConfig ). then (()   =>   { \n   console . log ( 5   *   20   +   11 );  });",
            "title": "Example Usage"
        },
        {
            "location": "/firebase/#implementation",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/firebase/#mintfirebasetoken",
            "text": "export   declare   function   mintFirebaseToken ( \n   admin :  any , \n   uid :  string  ) :   Promise < string > ;",
            "title": "mintFirebaseToken"
        },
        {
            "location": "/firebase/#definition_1",
            "text": "Creates and returns Firebase custom auth token.",
            "title": "Definition"
        },
        {
            "location": "/firebase/#parameters_1",
            "text": "admin  uid  ( string ): the uid of the user you want to mint custom Firebase auth token for",
            "title": "Parameters"
        },
        {
            "location": "/firebase/#returns_1",
            "text": "( Promise ): the  Promise  object which resolves with Firebase custom auth token",
            "title": "Returns"
        },
        {
            "location": "/firebase/#example-usage_1",
            "text": "import   {   mintFirebaseToken   }   from   'steemconnect-firebase-functions' ;  import   *   as   admin   from   'firebase-admin' ;  const   serviceAccount   =   require ( '../serviceAccountKey.json' );  admin . initializeApp ({ \n   credential :  admin.credential.cert ( serviceAccount )  });  const   uid   =   'steemconnect:jakipatryk' ;  mintFirebaseToken ( admin ,   uid ). then ( token   =>   { \n   console . log ( token );  });",
            "title": "Example Usage"
        },
        {
            "location": "/firebase/#implementation_1",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/firebase/#saveaccesstoken",
            "text": "export   declare   function   saveAccessToken ( \n   admin :  any , \n   uid :  string , \n   accessToken :  AccessTokenResponse  ) :   Promise < any > ;",
            "title": "saveAccessToken"
        },
        {
            "location": "/firebase/#definition_2",
            "text": "Saves access token and its details in the Firestore.",
            "title": "Definition"
        },
        {
            "location": "/firebase/#parameters_2",
            "text": "admin  uid  ( string ): the uid of the user  accessToken  ( AccessTokenResponse ): the access token + its details object",
            "title": "Parameters"
        },
        {
            "location": "/firebase/#returns_2",
            "text": "( Promise ): the  Promise  object",
            "title": "Returns"
        },
        {
            "location": "/firebase/#example-usage_2",
            "text": "import   {   saveAccessToken   }   from   'steemconnect-firebase-functions' ;  import   *   as   admin   from   'firebase-admin' ;  const   serviceAccount   =   require ( '../serviceAccountKey.json' );  admin . initializeApp ({ \n   credential :  admin.credential.cert ( serviceAccount )  });  const   uid   =   'steemconnect:jakipatryk' ;  const   accessToken   =   { \n   access_token :   '423423432.fsdfewf43' , \n   expires_in :  4200000 , \n   username :   'jakipatryk' , \n   refresh_token :   '4u5jnj4f3.543jim43i'  };  saveAccessToken ( admin ,   uid ,   accessToken ). then (()   =>   { \n   console . log ( 2   +   2   *   4 );  });",
            "title": "Example Usage"
        },
        {
            "location": "/firebase/#implementation_2",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/firebase/#getaccesstokenfromfirestore",
            "text": "export   declare   function   getAccessTokenFromFirestore ( \n   admin :  any , \n   uid :  string  ) :   Promise < AccessTokenResponse > ;",
            "title": "getAccessTokenFromFirestore"
        },
        {
            "location": "/firebase/#definition_3",
            "text": "Gets and returns the access token + details object from the Firestore.",
            "title": "Definition"
        },
        {
            "location": "/firebase/#parameters_3",
            "text": "admin  uid  ( string ): the uid of the user you want to get access token for",
            "title": "Parameters"
        },
        {
            "location": "/firebase/#returns_3",
            "text": "( Promise< AccessTokenResponse > ): the  Promise  object which resolves with the  AccessTokenResponse  object",
            "title": "Returns"
        },
        {
            "location": "/firebase/#example-usage_3",
            "text": "import   {   getAccessTokenFromFirestore   }   from   'steemconnect-firebase-functions' ;  import   *   as   admin   from   'firebase-admin' ;  const   serviceAccount   =   require ( '../serviceAccountKey.json' );  admin . initializeApp ({ \n   credential :  admin.credential.cert ( serviceAccount )  });  const   uid   =   'steemconnect:jakipatryk' ;  getAccessTokenFromFirestore ( admin ,   uid ). then ( tokens   =>   console . log ( tokens ));",
            "title": "Example Usage"
        },
        {
            "location": "/firebase/#implementation_3",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/firebase/#interfaces",
            "text": "",
            "title": "Interfaces"
        },
        {
            "location": "/firebase/#firebaseaccount",
            "text": "",
            "title": "FirebaseAccount"
        },
        {
            "location": "/firebase/#definition_4",
            "text": "Defines Firebase account object.",
            "title": "Definition"
        },
        {
            "location": "/firebase/#implementation_4",
            "text": "export   interface   FirebaseAccount   { \n   uid :  string ; \n   username :  string ; \n   photoURL? :  string ; \n   email? :  string ; \n   emailVerified? :  boolean ; \n   phoneNumber? :  string ; \n   disabled? :  boolean ;  }",
            "title": "Implementation"
        },
        {
            "location": "/oauth2/",
            "text": "What is this module for?\n\n\nThis module is a helper in the process of implementing the \nOAuth2 Authorization Code Grant\n flow with \nSteemConnect\n.\n\n\nFunctions available here make it easy to generate URL to SteemConnect with correct scope and other details, get tokens from SteemConnect, refresh and revoke an access token, and set and get user metadata.\n\n\nAPI reference\n\n\nFunctions\n\n\ngetAuthorizationUrl\n\n\nexport\n \ndeclare\n \nfunction\n \ngetAuthorizationUrl\n({\n\n  \nclientId\n,\n\n  \nredirectUri\n,\n\n  \nscope\n,\n\n  \nstate\n\n\n}\n:\n \nClientCredentials\n \n&\n \n{\n\n  \nredirectUri\n: \nstring\n;\n\n  \nscope\n: \nArray\n<\nScope\n>\n;\n\n  \nstate?\n: \nstring\n;\n\n\n})\n:\n \nstring\n;\n\n\n\n\n\n\nDefinition\n\n\nGenerates authorization URL to SteemConnect service.\n\n\nParameters\n\n\n\n\nconfig\n (\nClientCredentials\n +\n\n\nredirectUri\n (\nstring\n): the URI you want your user to be redirected to after logging in to SteemConnect\n\n\nscope\n (\nArray<\nScope\n>\n): the array of scopes you want to get access for your user to\n\n\nstate?\n (\nstring\n): optional state variable):\n\n   configuration object for the app\n\n\n\n\nReturns\n\n\n\n\n(\nstring\n): the authorization URL\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n \ngetAuthorizationUrl\n,\n \nScope\n \n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \nclientId\n: \nstring\n \n=\n \n'strimi.app'\n;\n\n\nconst\n \nredirectUri\n: \nstring\n \n=\n \n'https://strimi.pl/redirect'\n;\n\n\nconst\n \nscope\n: \nArray\n<\nScope\n>\n \n=\n \n[\n'vote'\n];\n\n\nconst\n \nstate\n: \nstring\n \n=\n \n'state342343243242'\n;\n\n\n\nconst\n \nauthorizationUrl\n \n=\n \ngetAuthorizationUrl\n({\n\n  \nclientId\n,\n\n  \nredirectUri\n,\n\n  \nscope\n,\n\n  \nstate\n\n\n});\n\n\n// 'https://steemconnect.com/oauth2/authorize?client_id=strimi.app&response_type=code&redirect_uri=https%3A%2F%2Fstrimi.pl%2Fredirect&scope=vote&state=state342343243242'\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\ngetAccessToken\n\n\nexport\n \ndeclare\n \nfunction\n \ngetAccessToken\n({\n\n  \nclientId\n,\n\n  \nclientSecret\n,\n\n  \nredirectUri\n,\n\n  \ncode\n\n\n}\n:\n \nClientCredentials\n \n&\n \n{\n\n  \nredirectUri\n: \nstring\n;\n\n  \ncode\n: \nstring\n;\n\n\n})\n:\n \nPromise\n<\nAccessTokenResponse\n>\n;\n\n\n\n\n\n\nDefinition\n\n\nGets access token for a user (\naccess_token\n, \nexpires_in\n, \nusername\n, and optionally \nrefresh_token\n) from SteemConnect.\n\n\nParameters\n\n\n\n\nconfig\n (\nRequired<\nClientCredentials\n>\n +\n\n\nredirectUri\n (\nstring\n): the redirect URI used earlier in the \ngetAuthorizationUrl\n\n\ncode\n (\nstring\n): the code retrived from the SteemConnect):\n\n   the configruation object\n\n\n\n\nReturns\n\n\n\n\n(\nPromise<\nAccessTokenResponse\n>\n): the \nPromise\n object which resolves with tokens details\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n \ngetAccessToken\n,\n \nClientCredentials\n \n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \nclientCredentials\n: \nClientCredentials\n \n=\n \n{\n\n    \nclientId\n:\n \n'strimi.app'\n,\n\n    \nclientSecret\n:\n \n'gfd65464fdsfsoi3o'\n\n\n};\n\n\nconst\n \nredirectUri\n \n=\n \n'https://strimi.pl/redirect'\n;\n\n\nconst\n \ncode\n \n=\n \n'435435435afsdfdsfsd.3rkdmsfklmdlf'\n;\n\n\n\ngetAccessToken\n({\n\n  \n...\nclientCredentials\n\n  \nredirectUri\n,\n\n  \ncode\n\n\n}).\nthen\n(\ntokens\n \n=>\n \nconsole\n.\nlog\n(\ntokens\n));\n\n\n\n//  {\n\n\n//      access_token: '...',\n\n\n//      expires_in: 640000,\n\n\n//      username '...'\n\n\n//      refresh_token: '...' // if scope included `offline`\n\n\n//  }\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\nrefreshAccessToken\n\n\nexport\n \ndeclare\n \nfunction\n \nrefreshAccessToken\n({\n\n  \nclientId\n,\n\n  \nclientSecret\n,\n\n  \nrefresh_token\n\n\n}\n:\n \nRequired\n<\nClientCredentials\n>\n \n&\n \nRequired\n<\nAccessTokenResponse\n>\n)\n:\n \nPromise\n<\n\n  \nAccessTokenResponse\n\n\n>\n;\n\n\n\n\n\n\nDefinition\n\n\nUses \nrefresh_token\n to get new \nAccessTokenResponse\n object.\n\n\nParameters\n\n\n\n\nconfig\n (\nRequired<\nClientCredentials\n>\n & \nRequired<\nAccessTokenResponse\n>\n): the configuration object for refreshing access token\n\n\n\n\nReturns\n\n\n\n\n(\nPromise<\nAccessTokenResponse\n>\n): the \nPromise\n object which resolves with tokens details\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n\n  \nrefreshAccessToken\n,\n\n  \nClientCredentials\n,\n\n  \nAccessTokenResponse\n\n\n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \nclientCredentials\n: \nClientCredentials\n \n=\n \n{\n\n  \nclientId\n:\n \n'strimi.app'\n,\n\n  \nclientSecret\n:\n \n'gfd65464fdsfsoi3o'\n\n\n};\n\n\nconst\n \naccessToken\n: \nAccessTokenResponse\n \n=\n \n{\n\n  \naccess_token\n:\n \n'432432423r43roinmeofrekgkfgfd'\n,\n\n  \nexpires_in\n: \n640000\n,\n\n  \nusername\n:\n \n'jakipatryk'\n,\n\n  \nrefresh_token\n:\n \n'sdfiodoifroei434.3fds'\n\n\n};\n\n\n\nrefreshAccessToken\n({\n \n...\nclientCredentials\n,\n \n...\naccessToken\n \n}).\nthen\n(\nnewTokens\n \n=>\n\n  \nconsole\n.\nlog\n(\n'newTokens'\n)\n\n\n);\n\n\n//  {\n\n\n//      access_token: '...',\n\n\n//      expires_in: 640000,\n\n\n//      username 'jakipatryk'\n\n\n//      refresh_token: '...'\n\n\n//  }\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\ngetUserData\n\n\nexport\n \ndeclare\n \nfunction\n \ngetUserData\n({\n\n  \naccess_token\n\n\n}\n:\n \nAccessTokenResponse\n)\n:\n \nPromise\n<\nUserData\n>\n;\n\n\n\n\n\n\nDefinition\n\n\nGets user data from a SteemConnect.\n\n\nParameters\n\n\n\n\naccessToken (\nAccessTokenResponse\n): the access token object\n\n\n\n\nReturns\n\n\n\n\n(\nPromise<\nUserData\n>\n): the \nPromise\n object which resolves with user data\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n\n  \ngetUserData\n,\n\n  \nAccessTokenResponse\n\n\n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \naccessToken\n: \nAccessTokenResponse\n \n=\n \n{\n\n  \naccess_token\n:\n \n'fdskfe.4324234'\n,\n\n  \nexpires_in\n: \n64000\n,\n\n  \nusername\n:\n \n'jakipatryk'\n\n\n};\n\n\n\ngetUserData\n(\naccessToken\n).\nthen\n(\nuserData\n \n=>\n \nconsole\n.\nlog\n(\nuserData\n));\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\nsetUserData\n\n\nexport\n \ndeclare\n \nfunction\n \nsetUserMetadata\n({\n\n  \naccess_token\n,\n\n  \nmetadata\n\n\n}\n:\n \nAccessTokenResponse\n \n&\n \n{\n\n  \nmetadata\n: \nobject\n;\n\n\n})\n:\n \nPromise\n<\nUserData\n>\n;\n\n\n\n\n\n\nDefinition\n\n\nSets user metadata in a SteemConnect.\n\n\nParameters\n\n\n\n\nconfig\n (\nAccessTokenResponse\n & \nmetadata\n (\nobject\n)): the configuration object with access token and new metadata\n\n\n\n\nReturns\n\n\n\n\n(\nPromise<\nUserData\n>\n): the \nPromise\n object which resolves with updated user data\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n\n  \nsetUserMetadata\n,\n\n  \nAccessTokenResponse\n\n\n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \naccessToken\n: \nAccessTokenResponse\n \n=\n \n{\n\n  \naccess_token\n:\n \n'smt432fdsokdswpw.432jieod'\n,\n\n  \nexpires_in\n: \n64000\n,\n\n  \nusername\n:\n \n'jakipatryk'\n\n\n};\n\n\nconst\n \nmetadata\n \n=\n \n{\n\n  \nisBanned\n: \ntrue\n\n\n};\n\n\n\nsetUserMetadata\n({\n \n...\naccessToken\n,\n \nmetadata\n \n}).\nthen\n(\nupdatedUserData\n \n=>\n\n  \nconsole\n.\nlog\n(\nupdatedUserData\n)\n\n\n);\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\nrevokeAccessToken\n\n\nexport\n \ndeclare\n \nfunction\n \nrevokeAccessToken\n({\n\n  \naccess_token\n\n\n}\n:\n \nAccessTokenResponse\n)\n:\n \nPromise\n<\nany\n>\n;\n\n\n\n\n\n\nDefinition\n\n\nRevokes access token.\n\n\nParameters\n\n\n\n\naccessToken\n (\nAccessTokenResponse\n): the \nAccessTokenResponse\n object containing \naccess_token\n to revoke\n\n\n\n\nReturns\n\n\n\n\n(\nPromise\n): a \nPromise\n object\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n\n  \nrevokeAccessToken\n,\n\n  \nAccessTokenResponse\n\n\n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \naccessToken\n: \nAccessTokenResponse\n \n=\n \n{\n\n  \naccess_token\n:\n \n'smt432fdsokdswpw.432jieod'\n,\n\n  \nexpires_in\n: \n64000\n,\n\n  \nusername\n:\n \n'jakipatryk'\n\n\n};\n\n\n\nrevokeAccessToken\n(\naccessToken\n).\nthen\n(()\n \n=>\n\n  \nconsole\n.\nlog\n(\n'Successfully revoked access token!'\n)\n\n\n);\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\nInterfaces and types\n\n\nClientCredentials\n\n\nDefinition\n\n\nDefines an object with client credentials.\n\n\nImplementation\n\n\nexport\n \ninterface\n \nClientCredentials\n \n{\n\n  \nclientId\n: \nstring\n;\n\n  \nclientSecret?\n: \nstring\n;\n\n\n}\n\n\n\n\n\n\n\n\nScope\n\n\nDefinition\n\n\nA type containing all available scopes on SteemConnect.\n\n\nImplementation\n\n\nexport\n \ntype\n \nScope\n \n=\n\n  \n|\n \n'login'\n\n  \n|\n \n'offline'\n\n  \n|\n \n'vote'\n\n  \n|\n \n'comment'\n\n  \n|\n \n'comment_options'\n\n  \n|\n \n'custom_json'\n\n  \n|\n \n'delete_comment'\n\n  \n|\n \n'claim_reward_balance'\n;",
            "title": "OAuth2"
        },
        {
            "location": "/oauth2/#what-is-this-module-for",
            "text": "This module is a helper in the process of implementing the  OAuth2 Authorization Code Grant  flow with  SteemConnect .  Functions available here make it easy to generate URL to SteemConnect with correct scope and other details, get tokens from SteemConnect, refresh and revoke an access token, and set and get user metadata.",
            "title": "What is this module for?"
        },
        {
            "location": "/oauth2/#api-reference",
            "text": "",
            "title": "API reference"
        },
        {
            "location": "/oauth2/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/oauth2/#getauthorizationurl",
            "text": "export   declare   function   getAuthorizationUrl ({ \n   clientId , \n   redirectUri , \n   scope , \n   state  } :   ClientCredentials   &   { \n   redirectUri :  string ; \n   scope :  Array < Scope > ; \n   state? :  string ;  }) :   string ;",
            "title": "getAuthorizationUrl"
        },
        {
            "location": "/oauth2/#definition",
            "text": "Generates authorization URL to SteemConnect service.",
            "title": "Definition"
        },
        {
            "location": "/oauth2/#parameters",
            "text": "config  ( ClientCredentials  +  redirectUri  ( string ): the URI you want your user to be redirected to after logging in to SteemConnect  scope  ( Array< Scope > ): the array of scopes you want to get access for your user to  state?  ( string ): optional state variable): \n   configuration object for the app",
            "title": "Parameters"
        },
        {
            "location": "/oauth2/#returns",
            "text": "( string ): the authorization URL",
            "title": "Returns"
        },
        {
            "location": "/oauth2/#example-usage",
            "text": "import   {   getAuthorizationUrl ,   Scope   }   from   'steemconnect-firebase-functions' ;  const   clientId :  string   =   'strimi.app' ;  const   redirectUri :  string   =   'https://strimi.pl/redirect' ;  const   scope :  Array < Scope >   =   [ 'vote' ];  const   state :  string   =   'state342343243242' ;  const   authorizationUrl   =   getAuthorizationUrl ({ \n   clientId , \n   redirectUri , \n   scope , \n   state  });  // 'https://steemconnect.com/oauth2/authorize?client_id=strimi.app&response_type=code&redirect_uri=https%3A%2F%2Fstrimi.pl%2Fredirect&scope=vote&state=state342343243242'",
            "title": "Example Usage"
        },
        {
            "location": "/oauth2/#implementation",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/oauth2/#getaccesstoken",
            "text": "export   declare   function   getAccessToken ({ \n   clientId , \n   clientSecret , \n   redirectUri , \n   code  } :   ClientCredentials   &   { \n   redirectUri :  string ; \n   code :  string ;  }) :   Promise < AccessTokenResponse > ;",
            "title": "getAccessToken"
        },
        {
            "location": "/oauth2/#definition_1",
            "text": "Gets access token for a user ( access_token ,  expires_in ,  username , and optionally  refresh_token ) from SteemConnect.",
            "title": "Definition"
        },
        {
            "location": "/oauth2/#parameters_1",
            "text": "config  ( Required< ClientCredentials >  +  redirectUri  ( string ): the redirect URI used earlier in the  getAuthorizationUrl  code  ( string ): the code retrived from the SteemConnect): \n   the configruation object",
            "title": "Parameters"
        },
        {
            "location": "/oauth2/#returns_1",
            "text": "( Promise< AccessTokenResponse > ): the  Promise  object which resolves with tokens details",
            "title": "Returns"
        },
        {
            "location": "/oauth2/#example-usage_1",
            "text": "import   {   getAccessToken ,   ClientCredentials   }   from   'steemconnect-firebase-functions' ;  const   clientCredentials :  ClientCredentials   =   { \n     clientId :   'strimi.app' , \n     clientSecret :   'gfd65464fdsfsoi3o'  };  const   redirectUri   =   'https://strimi.pl/redirect' ;  const   code   =   '435435435afsdfdsfsd.3rkdmsfklmdlf' ;  getAccessToken ({ \n   ... clientCredentials \n   redirectUri , \n   code  }). then ( tokens   =>   console . log ( tokens ));  //  {  //      access_token: '...',  //      expires_in: 640000,  //      username '...'  //      refresh_token: '...' // if scope included `offline`  //  }",
            "title": "Example Usage"
        },
        {
            "location": "/oauth2/#implementation_1",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/oauth2/#refreshaccesstoken",
            "text": "export   declare   function   refreshAccessToken ({ \n   clientId , \n   clientSecret , \n   refresh_token  } :   Required < ClientCredentials >   &   Required < AccessTokenResponse > ) :   Promise < \n   AccessTokenResponse  > ;",
            "title": "refreshAccessToken"
        },
        {
            "location": "/oauth2/#definition_2",
            "text": "Uses  refresh_token  to get new  AccessTokenResponse  object.",
            "title": "Definition"
        },
        {
            "location": "/oauth2/#parameters_2",
            "text": "config  ( Required< ClientCredentials >  &  Required< AccessTokenResponse > ): the configuration object for refreshing access token",
            "title": "Parameters"
        },
        {
            "location": "/oauth2/#returns_2",
            "text": "( Promise< AccessTokenResponse > ): the  Promise  object which resolves with tokens details",
            "title": "Returns"
        },
        {
            "location": "/oauth2/#example-usage_2",
            "text": "import   { \n   refreshAccessToken , \n   ClientCredentials , \n   AccessTokenResponse  }   from   'steemconnect-firebase-functions' ;  const   clientCredentials :  ClientCredentials   =   { \n   clientId :   'strimi.app' , \n   clientSecret :   'gfd65464fdsfsoi3o'  };  const   accessToken :  AccessTokenResponse   =   { \n   access_token :   '432432423r43roinmeofrekgkfgfd' , \n   expires_in :  640000 , \n   username :   'jakipatryk' , \n   refresh_token :   'sdfiodoifroei434.3fds'  };  refreshAccessToken ({   ... clientCredentials ,   ... accessToken   }). then ( newTokens   => \n   console . log ( 'newTokens' )  );  //  {  //      access_token: '...',  //      expires_in: 640000,  //      username 'jakipatryk'  //      refresh_token: '...'  //  }",
            "title": "Example Usage"
        },
        {
            "location": "/oauth2/#implementation_2",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/oauth2/#getuserdata",
            "text": "export   declare   function   getUserData ({ \n   access_token  } :   AccessTokenResponse ) :   Promise < UserData > ;",
            "title": "getUserData"
        },
        {
            "location": "/oauth2/#definition_3",
            "text": "Gets user data from a SteemConnect.",
            "title": "Definition"
        },
        {
            "location": "/oauth2/#parameters_3",
            "text": "accessToken ( AccessTokenResponse ): the access token object",
            "title": "Parameters"
        },
        {
            "location": "/oauth2/#returns_3",
            "text": "( Promise< UserData > ): the  Promise  object which resolves with user data",
            "title": "Returns"
        },
        {
            "location": "/oauth2/#example-usage_3",
            "text": "import   { \n   getUserData , \n   AccessTokenResponse  }   from   'steemconnect-firebase-functions' ;  const   accessToken :  AccessTokenResponse   =   { \n   access_token :   'fdskfe.4324234' , \n   expires_in :  64000 , \n   username :   'jakipatryk'  };  getUserData ( accessToken ). then ( userData   =>   console . log ( userData ));",
            "title": "Example Usage"
        },
        {
            "location": "/oauth2/#implementation_3",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/oauth2/#setuserdata",
            "text": "export   declare   function   setUserMetadata ({ \n   access_token , \n   metadata  } :   AccessTokenResponse   &   { \n   metadata :  object ;  }) :   Promise < UserData > ;",
            "title": "setUserData"
        },
        {
            "location": "/oauth2/#definition_4",
            "text": "Sets user metadata in a SteemConnect.",
            "title": "Definition"
        },
        {
            "location": "/oauth2/#parameters_4",
            "text": "config  ( AccessTokenResponse  &  metadata  ( object )): the configuration object with access token and new metadata",
            "title": "Parameters"
        },
        {
            "location": "/oauth2/#returns_4",
            "text": "( Promise< UserData > ): the  Promise  object which resolves with updated user data",
            "title": "Returns"
        },
        {
            "location": "/oauth2/#example-usage_4",
            "text": "import   { \n   setUserMetadata , \n   AccessTokenResponse  }   from   'steemconnect-firebase-functions' ;  const   accessToken :  AccessTokenResponse   =   { \n   access_token :   'smt432fdsokdswpw.432jieod' , \n   expires_in :  64000 , \n   username :   'jakipatryk'  };  const   metadata   =   { \n   isBanned :  true  };  setUserMetadata ({   ... accessToken ,   metadata   }). then ( updatedUserData   => \n   console . log ( updatedUserData )  );",
            "title": "Example Usage"
        },
        {
            "location": "/oauth2/#implementation_4",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/oauth2/#revokeaccesstoken",
            "text": "export   declare   function   revokeAccessToken ({ \n   access_token  } :   AccessTokenResponse ) :   Promise < any > ;",
            "title": "revokeAccessToken"
        },
        {
            "location": "/oauth2/#definition_5",
            "text": "Revokes access token.",
            "title": "Definition"
        },
        {
            "location": "/oauth2/#parameters_5",
            "text": "accessToken  ( AccessTokenResponse ): the  AccessTokenResponse  object containing  access_token  to revoke",
            "title": "Parameters"
        },
        {
            "location": "/oauth2/#returns_5",
            "text": "( Promise ): a  Promise  object",
            "title": "Returns"
        },
        {
            "location": "/oauth2/#example-usage_5",
            "text": "import   { \n   revokeAccessToken , \n   AccessTokenResponse  }   from   'steemconnect-firebase-functions' ;  const   accessToken :  AccessTokenResponse   =   { \n   access_token :   'smt432fdsokdswpw.432jieod' , \n   expires_in :  64000 , \n   username :   'jakipatryk'  };  revokeAccessToken ( accessToken ). then (()   => \n   console . log ( 'Successfully revoked access token!' )  );",
            "title": "Example Usage"
        },
        {
            "location": "/oauth2/#implementation_5",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/oauth2/#interfaces-and-types",
            "text": "",
            "title": "Interfaces and types"
        },
        {
            "location": "/oauth2/#clientcredentials",
            "text": "",
            "title": "ClientCredentials"
        },
        {
            "location": "/oauth2/#definition_6",
            "text": "Defines an object with client credentials.",
            "title": "Definition"
        },
        {
            "location": "/oauth2/#implementation_6",
            "text": "export   interface   ClientCredentials   { \n   clientId :  string ; \n   clientSecret? :  string ;  }",
            "title": "Implementation"
        },
        {
            "location": "/oauth2/#scope",
            "text": "",
            "title": "Scope"
        },
        {
            "location": "/oauth2/#definition_7",
            "text": "A type containing all available scopes on SteemConnect.",
            "title": "Definition"
        },
        {
            "location": "/oauth2/#implementation_7",
            "text": "export   type   Scope   = \n   |   'login' \n   |   'offline' \n   |   'vote' \n   |   'comment' \n   |   'comment_options' \n   |   'custom_json' \n   |   'delete_comment' \n   |   'claim_reward_balance' ;",
            "title": "Implementation"
        },
        {
            "location": "/operation-creators/",
            "text": "What is this module for?\n\n\nThis module contains functions called \noperation creators\n. Their name is self-descriptive - they create \noperations\n.\n\n\nCreated operations can be then broadcasted to the Steem network using the \nbroadcastOperations\n function from \nbroadcasting\n module.\n\n\nMost likely you will use this module for creating operations that aren't implemented yet in the \nbroadcasting\n module.\n\n\nAPI reference\n\n\nFunctions\n\n\ncreateOperation\n\n\nexport\n \ndeclare\n \nconst\n \ncreateOperation\n:\n \n(\n\n  \ntype\n: \nstring\n,\n\n  \n{\n\n    \n...\nparameters\n\n  \n}\n:\n \n{\n\n    \n[\nx\n: \nstring\n]\n:\n \nany\n;\n\n  \n}\n\n\n)\n \n=>\n \nOperation\n;\n\n\n\n\n\n\nDefinition\n\n\nCreates operation based on given type and parameters.\n\n\nParameters\n\n\n\n\ntype\n (\nstring\n): type of the operation\n\n\nparameters\n (\nobject\n): the operation parameters\n\n\n\n\nReturns\n\n\n\n\nOperation\n: operation created with given data\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n \ncreateOperation\n,\n \nOperation\n \n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \nvoteOperation\n: \nOperation\n \n=\n \ncreateOperation\n(\n'vote'\n,\n \n{\n\n  \nvoter\n:\n \n'jakipatryk'\n,\n\n  \nauthor\n:\n \n'ned'\n,\n\n  \npermlink\n:\n \n'i-am-ned'\n,\n\n  \nweight\n: \n2000\n\n\n});\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\ncreateComment\n\n\nexport\n \ndeclare\n \nconst\n \ncreateComment\n:\n \n(\n\n  \n{\n\n    \nparent_permlink\n,\n\n    \nauthor\n,\n\n    \npermlink\n,\n\n    \nbody\n,\n\n    \nparent_author\n,\n\n    \ntitle\n,\n\n    \njson_metadata\n\n  \n}\n:\n \nCommentConfig\n\n\n)\n \n=>\n \nOperation\n;\n\n\n\n\n\n\nDefinition\n\n\nCreates \ncomment\n operation.\n\n\nParameters\n\n\n\n\ncommentConfig\n (\nCommentConfig\n): the configuration object for a \ncomment\n operation\n\n\n\n\nReturns\n\n\n\n\nOperation\n: \ncomment\n operation\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n \ncreateComment\n,\n \nOperation\n \n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \ncommentOperation\n: \nOperation\n \n=\n \ncreateComment\n({\n\n  \nparent_author\n:\n \n'ned'\n,\n\n  \nparent_permlink\n:\n \n'parentPermlinkOrMainTag'\n,\n\n  \nauthor\n:\n \n'jakipatryk'\n,\n\n  \npermlink\n:\n \n'i-am-jakipatryk-from-polska'\n,\n\n  \nbody\n:\n \n'Hello! Whats up ppl?'\n\n\n});\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\ncreateCommentOptions\n\n\nexport\n \ndeclare\n \nconst\n \ncreateCommentOptions\n:\n \n(\n\n  \n{\n\n    \nauthor\n,\n\n    \npermlink\n,\n\n    \nmax_accepted_payout\n,\n\n    \npercent_steem_dollars\n,\n\n    \nallow_votes\n,\n\n    \nallow_curation_rewards\n,\n\n    \nextensions\n:\n \n[...\nrestExtensions\n]\n\n  \n}\n:\n \nCommentOptionsConfig\n\n\n)\n \n=>\n \nOperation\n;\n\n\n\n\n\n\nDefinition\n\n\nCreates \ncomment_options\n operation.\n\n\nParameters\n\n\n\n\ncommentOptionsConfig\n (\nCommentOptionsConfig\n): the configuration object for a \ncomment_options\n operation\n\n\n\n\nReturns\n\n\n\n\nOperation\n: \ncomment_options\n operation\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n \ncreateCommentOptions\n,\n \nOperation\n \n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \ncommentOptionsOperation\n: \nOperation\n \n=\n \ncreateComment\n({\n\n  \nauthor\n:\n \n'jakipatryk'\n,\n\n  \npermlink\n:\n \n'i-am-jakipatryk-from-polska'\n,\n\n  \nmax_accepted_payout\n:\n \n'10.000 SBD'\n\n  \nextensions\n:\n \n[\n\n    \n[\n\n      \n0\n,\n\n      \n{\n\n        \nbeneficiaries\n:\n \n[\n\n          \n{\n\n            \naccount\n:\n \n'utopian.pay'\n,\n\n            \nweight\n: \n2500\n\n          \n}\n\n        \n]\n\n      \n}\n\n    \n]\n\n  \n]\n\n\n});\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\ncreateCustomJson\n\n\nexport\n \ndeclare\n \nconst\n \ncreateCustomJson\n:\n \n(\n\n  \n{\n\n    \nrequired_posting_auths\n:\n \n[...\npostingAuths\n],\n\n    \nid\n,\n\n    \njson\n,\n\n    \nrequired_auths\n:\n \n[...\nauths\n]\n\n  \n}\n:\n \nCustomJsonConfig\n\n\n)\n \n=>\n \nOperation\n;\n\n\n\n\n\n\nDefinition\n\n\nCreates \ncustom_json\n operation.\n\n\nParameters\n\n\n\n\ncustomJsonConfig\n (\nCustomJsonConfig\n): the configuration object for a \ncustom_json\n operation\n\n\n\n\nReturns\n\n\n\n\nOperation\n: \ncustom_json\n operation\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n \ncreateCustomJson\n,\n \nOperation\n \n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \ncustomJsonOperation\n: \nOperation\n \n=\n \ncreateCustomJson\n({\n\n  \nrequiredPostingAuths\n:\n \n[\n'jakipatryk'\n],\n\n  \nid\n:\n \n'follow'\n,\n\n  \ncustomJson\n: \nJSON.stringify\n([\n\n    \n'reblog'\n,\n\n    \n{\n\n      \naccount\n:\n \n'jakipatryk'\n,\n\n      \nauthor\n:\n \n'ned'\n,\n\n      \npermlink\n:\n \n'i-am-ned'\n\n    \n}\n\n  \n])\n\n\n});\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\ncreateDeleteComment\n\n\nexport\n \ndeclare\n \nconst\n \ncreateDeleteComment\n:\n \n(\n\n  \n{\n \nauthor\n,\n \npermlink\n \n}\n:\n \nDeleteCommentConfig\n\n\n)\n \n=>\n \nOperation\n;\n\n\n\n\n\n\nDefinition\n\n\nCreates \ndelete_comment\n operation.\n\n\nParameters\n\n\n\n\ndeleteCommentConfig\n (\nDeleteCommentConfig\n): the configuration object for a \ndelete_comment\n operation\n\n\n\n\nReturns\n\n\n\n\nOperation\n: \ndelete_comment\n operation\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n\n  \ncreateDeleteComment\n,\n\n  \nOperation\n\n\n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \ndeleteCommentOperation\n: \nOperation\n \n=\n \ncreateDeleteComment\n({\n\n  \nauthor\n:\n \n'jakipatryk'\n,\n\n  \npermlink\n:\n \n'i-am-jakipatryk-from-polska'\n\n\n});\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\ncreateVote\n\n\nexport\n \ndeclare\n \nconst\n \ncreateVote\n:\n \n(\n\n  \n{\n \nvoter\n,\n \nauthor\n,\n \npermlink\n,\n \nweight\n \n}\n:\n \nVoteConfig\n\n\n)\n \n=>\n \nOperation\n;\n\n\n\n\n\n\nDefinition\n\n\nCreates \nvote\n operation.\n\n\nParameters\n\n\n\n\nvoteConfig\n (\nVoteConfig\n): the configuration object for a \nvote\n operation\n\n\n\n\nReturns\n\n\n\n\nOperation\n: \nvote\n operation\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n \ncreateVote\n,\n \nOperation\n \n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \nvoteOperation\n: \nOperation\n \n=\n \ncreateVote\n({\n\n  \nvoter\n:\n \n'jakipatryk'\n,\n\n  \nauthor\n:\n \n'ned'\n,\n\n  \npermlink\n:\n \n'i-am-ned'\n,\n\n  \nweight\n: \n300\n\n\n});\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.",
            "title": "Operation Creators"
        },
        {
            "location": "/operation-creators/#what-is-this-module-for",
            "text": "This module contains functions called  operation creators . Their name is self-descriptive - they create  operations .  Created operations can be then broadcasted to the Steem network using the  broadcastOperations  function from  broadcasting  module.  Most likely you will use this module for creating operations that aren't implemented yet in the  broadcasting  module.",
            "title": "What is this module for?"
        },
        {
            "location": "/operation-creators/#api-reference",
            "text": "",
            "title": "API reference"
        },
        {
            "location": "/operation-creators/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/operation-creators/#createoperation",
            "text": "export   declare   const   createOperation :   ( \n   type :  string , \n   { \n     ... parameters \n   } :   { \n     [ x :  string ] :   any ; \n   }  )   =>   Operation ;",
            "title": "createOperation"
        },
        {
            "location": "/operation-creators/#definition",
            "text": "Creates operation based on given type and parameters.",
            "title": "Definition"
        },
        {
            "location": "/operation-creators/#parameters",
            "text": "type  ( string ): type of the operation  parameters  ( object ): the operation parameters",
            "title": "Parameters"
        },
        {
            "location": "/operation-creators/#returns",
            "text": "Operation : operation created with given data",
            "title": "Returns"
        },
        {
            "location": "/operation-creators/#example-usage",
            "text": "import   {   createOperation ,   Operation   }   from   'steemconnect-firebase-functions' ;  const   voteOperation :  Operation   =   createOperation ( 'vote' ,   { \n   voter :   'jakipatryk' , \n   author :   'ned' , \n   permlink :   'i-am-ned' , \n   weight :  2000  });",
            "title": "Example Usage"
        },
        {
            "location": "/operation-creators/#implementation",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/operation-creators/#createcomment",
            "text": "export   declare   const   createComment :   ( \n   { \n     parent_permlink , \n     author , \n     permlink , \n     body , \n     parent_author , \n     title , \n     json_metadata \n   } :   CommentConfig  )   =>   Operation ;",
            "title": "createComment"
        },
        {
            "location": "/operation-creators/#definition_1",
            "text": "Creates  comment  operation.",
            "title": "Definition"
        },
        {
            "location": "/operation-creators/#parameters_1",
            "text": "commentConfig  ( CommentConfig ): the configuration object for a  comment  operation",
            "title": "Parameters"
        },
        {
            "location": "/operation-creators/#returns_1",
            "text": "Operation :  comment  operation",
            "title": "Returns"
        },
        {
            "location": "/operation-creators/#example-usage_1",
            "text": "import   {   createComment ,   Operation   }   from   'steemconnect-firebase-functions' ;  const   commentOperation :  Operation   =   createComment ({ \n   parent_author :   'ned' , \n   parent_permlink :   'parentPermlinkOrMainTag' , \n   author :   'jakipatryk' , \n   permlink :   'i-am-jakipatryk-from-polska' , \n   body :   'Hello! Whats up ppl?'  });",
            "title": "Example Usage"
        },
        {
            "location": "/operation-creators/#implementation_1",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/operation-creators/#createcommentoptions",
            "text": "export   declare   const   createCommentOptions :   ( \n   { \n     author , \n     permlink , \n     max_accepted_payout , \n     percent_steem_dollars , \n     allow_votes , \n     allow_curation_rewards , \n     extensions :   [... restExtensions ] \n   } :   CommentOptionsConfig  )   =>   Operation ;",
            "title": "createCommentOptions"
        },
        {
            "location": "/operation-creators/#definition_2",
            "text": "Creates  comment_options  operation.",
            "title": "Definition"
        },
        {
            "location": "/operation-creators/#parameters_2",
            "text": "commentOptionsConfig  ( CommentOptionsConfig ): the configuration object for a  comment_options  operation",
            "title": "Parameters"
        },
        {
            "location": "/operation-creators/#returns_2",
            "text": "Operation :  comment_options  operation",
            "title": "Returns"
        },
        {
            "location": "/operation-creators/#example-usage_2",
            "text": "import   {   createCommentOptions ,   Operation   }   from   'steemconnect-firebase-functions' ;  const   commentOptionsOperation :  Operation   =   createComment ({ \n   author :   'jakipatryk' , \n   permlink :   'i-am-jakipatryk-from-polska' , \n   max_accepted_payout :   '10.000 SBD' \n   extensions :   [ \n     [ \n       0 , \n       { \n         beneficiaries :   [ \n           { \n             account :   'utopian.pay' , \n             weight :  2500 \n           } \n         ] \n       } \n     ] \n   ]  });",
            "title": "Example Usage"
        },
        {
            "location": "/operation-creators/#implementation_2",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/operation-creators/#createcustomjson",
            "text": "export   declare   const   createCustomJson :   ( \n   { \n     required_posting_auths :   [... postingAuths ], \n     id , \n     json , \n     required_auths :   [... auths ] \n   } :   CustomJsonConfig  )   =>   Operation ;",
            "title": "createCustomJson"
        },
        {
            "location": "/operation-creators/#definition_3",
            "text": "Creates  custom_json  operation.",
            "title": "Definition"
        },
        {
            "location": "/operation-creators/#parameters_3",
            "text": "customJsonConfig  ( CustomJsonConfig ): the configuration object for a  custom_json  operation",
            "title": "Parameters"
        },
        {
            "location": "/operation-creators/#returns_3",
            "text": "Operation :  custom_json  operation",
            "title": "Returns"
        },
        {
            "location": "/operation-creators/#example-usage_3",
            "text": "import   {   createCustomJson ,   Operation   }   from   'steemconnect-firebase-functions' ;  const   customJsonOperation :  Operation   =   createCustomJson ({ \n   requiredPostingAuths :   [ 'jakipatryk' ], \n   id :   'follow' , \n   customJson :  JSON.stringify ([ \n     'reblog' , \n     { \n       account :   'jakipatryk' , \n       author :   'ned' , \n       permlink :   'i-am-ned' \n     } \n   ])  });",
            "title": "Example Usage"
        },
        {
            "location": "/operation-creators/#implementation_3",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/operation-creators/#createdeletecomment",
            "text": "export   declare   const   createDeleteComment :   ( \n   {   author ,   permlink   } :   DeleteCommentConfig  )   =>   Operation ;",
            "title": "createDeleteComment"
        },
        {
            "location": "/operation-creators/#definition_4",
            "text": "Creates  delete_comment  operation.",
            "title": "Definition"
        },
        {
            "location": "/operation-creators/#parameters_4",
            "text": "deleteCommentConfig  ( DeleteCommentConfig ): the configuration object for a  delete_comment  operation",
            "title": "Parameters"
        },
        {
            "location": "/operation-creators/#returns_4",
            "text": "Operation :  delete_comment  operation",
            "title": "Returns"
        },
        {
            "location": "/operation-creators/#example-usage_4",
            "text": "import   { \n   createDeleteComment , \n   Operation  }   from   'steemconnect-firebase-functions' ;  const   deleteCommentOperation :  Operation   =   createDeleteComment ({ \n   author :   'jakipatryk' , \n   permlink :   'i-am-jakipatryk-from-polska'  });",
            "title": "Example Usage"
        },
        {
            "location": "/operation-creators/#implementation_4",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/operation-creators/#createvote",
            "text": "export   declare   const   createVote :   ( \n   {   voter ,   author ,   permlink ,   weight   } :   VoteConfig  )   =>   Operation ;",
            "title": "createVote"
        },
        {
            "location": "/operation-creators/#definition_5",
            "text": "Creates  vote  operation.",
            "title": "Definition"
        },
        {
            "location": "/operation-creators/#parameters_5",
            "text": "voteConfig  ( VoteConfig ): the configuration object for a  vote  operation",
            "title": "Parameters"
        },
        {
            "location": "/operation-creators/#returns_5",
            "text": "Operation :  vote  operation",
            "title": "Returns"
        },
        {
            "location": "/operation-creators/#example-usage_5",
            "text": "import   {   createVote ,   Operation   }   from   'steemconnect-firebase-functions' ;  const   voteOperation :  Operation   =   createVote ({ \n   voter :   'jakipatryk' , \n   author :   'ned' , \n   permlink :   'i-am-ned' , \n   weight :  300  });",
            "title": "Example Usage"
        },
        {
            "location": "/operation-creators/#implementation_5",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/shared/",
            "text": "What is this module for?\n\n\nThis module stores these tools that didn't fit other modules or are used by multiple modules.\n\n\nYou'll find here two \nutility functions\n, a bunch of \nhelper functions\n, \nerror constants\n, and a lot of \ninterfaces\n (+ one \ntype\n).\n\n\nAPI reference\n\n\nUtilities\n\n\npipe\n\n\nDefinition\n\n\nGeneric function used to compose functions.\n\n\nImplementation\n\n\nexport\n \nconst\n \npipe\n \n=\n \n<\nT\n>\n(...\nfns\n: \nArray\n<\nFunction\n>\n)\n \n=>\n \n(\nx\n: \nT\n)\n \n=>\n\n  \nfns\n.\nreduce\n((\nv\n,\n \nf\n)\n \n=>\n \nf\n(\nv\n),\n \nx\n);\n\n\n\n\n\n\nExample Usage\n\n\nexport\n \nconst\n \ncreateBroadcastableVote\n \n=\n \npipe\n<\nVoteConfig\n>\n(\n\n  \ncreateVote\n,\n\n  \nArray\n.\nof\n,\n\n  \nbroadcastOperations\n\n\n);\n\n\n\n\n\n\nReferences\n\n\n\n\nVoteConfig\n\n\ncreateVote\n\n\nbroadcastOperations\n\n\n\n\n\n\ncombine\n\n\nDefinition\n\n\nGeneric function used to combine multiple operation creators into one with a single configuration object.\n\n\nImplementation\n\n\nexport\n \nconst\n \ncombine\n \n=\n \n<\nT\n,\n \nU\n>\n(...\nfns\n: \nArray\n<\nFunction\n>\n)\n \n=>\n \n(\n\n  \n...\nargs\n: \nArray\n<\nT\n>\n\n\n)\n:\n \nArray\n<\nU\n>\n \n=>\n\n  \nfns\n.\nreduce\n(\n\n    \n(\narr\n,\n \nf\n)\n \n=>\n \n{\n\n      \narr\n.\npush\n(\nf\n(...\nargs\n));\n\n      \nreturn\n \narr\n;\n\n    \n},\n\n    \n[]\n \nas\n \nArray\n<\nU\n>\n\n  \n);\n\n\n\n\n\n\nExample Usage\n\n\nexport\n \nconst\n \ncombineCommentWithOptions\n \n=\n \ncombine\n<\n\n  \nCommentConfig\n \n&\n \nCommentOptionsConfig\n,\n\n  \nOperation\n\n\n>\n(\ncreateComment\n,\n \ncreateCommentOptions\n);\n\n\n\n\n\n\nReferences\n\n\n\n\nCommentConfig\n\n\nCommentOptionsConfig\n\n\nOperation\n\n\ncreateComment\n\n\ncreateCommentOptions\n\n\n\n\n\n\nFunctions\n\n\ncombineCommentWithOptions\n\n\nexport\n \ndeclare\n \nconst\n \ncombineCommentWithOptions\n:\n \n(\n\n  \nconfiguration\n: \nCommentConfig\n \n&\n \nCommentOptionsConfig\n\n\n)\n \n=>\n \nOperation\n[];\n\n\n\n\n\n\nDefinition\n\n\nCombines \ncreateComment\n with \ncreateCommentOptions\n, so you can create these two operations with a single configuration object.\n\n\nParameters\n\n\n\n\nconfiguration\n (\nCommentConfig\n & \nCommentOptionsConfig\n): combined configuration object\n\n\n\n\nReturns\n\n\n\n\nOperations\n: two operations - \ncomment\n and \ncomment_options\n - in an array\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n \ncombineCommentWithOptions\n \n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \ncombinedCommentWithOptions\n \n=\n \ncombineCommentWithOptions\n({\n\n  \nparent_permlink\n:\n \n'i-am-ned'\n,\n\n  \nauthor\n:\n \n'jakipatryk'\n,\n\n  \npermlink\n:\n \n'hello-ned-sup'\n,\n\n  \nbody\n:\n \n'Hello Ned! Whats up?'\n,\n\n  \nparent_author\n:\n \n'ned'\n,\n\n  \ntitle\n:\n \n''\n,\n\n  \nextensions\n:\n \n[\n\n    \n[\n\n      \n0\n,\n\n      \n{\n\n        \nbeneficiaries\n:\n \n[\n\n          \n{\n\n            \naccount\n:\n \n'strimi'\n,\n\n            \nweight\n: \n1000\n\n          \n}\n\n        \n]\n\n      \n}\n\n    \n]\n\n  \n]\n\n\n});\n\n\n\n//  [\n\n\n//    [\n\n\n//      'comment', {\n\n\n//        parent_permlink: 'i-am-ned',\n\n\n//        author: 'jakipatryk',\n\n\n//        permlink: 'hello-ned-sup',\n\n\n//        body: 'Hello Ned! Whats up?',\n\n\n//        parent_author: 'ned',\n\n\n//        title: '',\n\n\n//        json_metadata: ''\n\n\n//       }\n\n\n//    ],\n\n\n//    [\n\n\n//      'comment_options', {\n\n\n//        author: 'jakipatryk',\n\n\n//        permlink: 'hello-ned-sup',\n\n\n//        max_accepted_payout: '1000000.000 SBD',\n\n\n//        percent_steem_dollars: 10000,\n\n\n//        allow_votes: true,\n\n\n//        allow_curation_rewards: true,\n\n\n//        extensions: [\n\n\n//            [\n\n\n//              0,\n\n\n//              {\n\n\n//                beneficiaries: [\n\n\n//                  {\n\n\n//                    account: 'strimi',\n\n\n//                    weight: 1000\n\n\n//                  }\n\n\n//                ]\n\n\n//              }\n\n\n//            ]\n\n\n//        ]\n\n\n//      ]\n\n\n//    ]\n\n\n\n\n\n\n\n\ncreateBroadcastableVote\n\n\nexport\n \ndeclare\n \nconst\n \ncreateBroadcastableVote\n:\n \n(\n\n  \nvoteConfig\n: \nVoteConfig\n\n\n)\n \n=>\n \nFunction\n;\n\n\n\n\n\n\nDefinition\n\n\nCreates \nbroadcastable\n for a \nvote\n operation.\n\n\nParameters\n\n\n\n\nvoteConfig\n (\nVoteConfig\n): the configuration object for a vote\n\n\n\n\nReturns\n\n\n\n\nbroadcastable\n: the broadcastable function for a \nvote\n operation\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n \ncreateBroadcastableVote\n \n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \nbroadcastableVote\n \n=\n \ncreateBroadcastableVote\n({\n\n  \nvoter\n:\n \n'jakipatryk'\n,\n\n  \nauthor\n:\n \n'ned'\n,\n\n  \npermlink\n:\n \n'i-am-ned'\n,\n\n  \nweight\n: \n10000\n\n\n});\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\ncreateBroadcastableComment\n\n\nexport\n \ndeclare\n \nconst\n \ncreateBroadcastableComment\n:\n \n(\n\n  \ncommentConfig\n: \nCommentConfig\n\n\n)\n \n=>\n \nFunction\n;\n\n\n\n\n\n\nDefinition\n\n\nCreates \nbroadcastable\n for a \ncomment\n operation.\n\n\nParameters\n\n\n\n\ncommentConfig\n (\nCommentConfig\n): the configuration object for a comment\n\n\n\n\nReturns\n\n\n\n\nbroadcastable\n: the broadcastable function for a \ncomment\n operation\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n \ncreateBroadcastableComment\n \n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \nbroadcastableComment\n \n=\n \ncreateBroadcastableComment\n({\n\n  \nparent_author\n:\n \n'ned'\n,\n\n  \nparent_permlink\n:\n \n'i-am-ned'\n,\n\n  \nauthor\n:\n \n'jakipatryk'\n,\n\n  \npermlink\n:\n \n'i-am-jakipatryk-from-polska'\n,\n\n  \nbody\n:\n \n'Hello! Whats up Ned?'\n\n\n});\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\ncreateBroadcastableCommentOptions\n\n\nexport\n \ndeclare\n \nconst\n \ncreateBroadcastableCommentOptions\n:\n \n(\n\n  \ncommentOptionsConfig\n: \nCommentOptionsConfig\n\n\n)\n \n=>\n \nFunction\n;\n\n\n\n\n\n\nDefinition\n\n\nCreates \nbroadcastable\n for a \ncomment_options\n operation.\n\n\nParameters\n\n\n\n\ncommentOptionsConfig\n (\nCommentOptionsConfig\n): the configuration object for a comment options\n\n\n\n\nReturns\n\n\n\n\nbroadcastable\n: the broadcastable function for a \ncomment_options\n operation\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n \ncreateBroadcastableCommentOptions\n \n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \nbroadcastableCommentOptions\n \n=\n \ncreateBroadcastableCommentOptions\n({\n\n  \nauthor\n:\n \n'jakipatryk'\n,\n\n  \npermlink\n:\n \n'i-am-jakipatryk-from-polska'\n,\n\n  \npercent_steem_dollars\n: \n0\n\n\n});\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\ncreateBroadcastableCustomJson\n\n\nexport\n \ndeclare\n \nconst\n \ncreateBroadcastableCustomJson\n:\n \n(\n\n  \ncustomJsonConfig\n: \nCustomJsonConfig\n\n\n)\n \n=>\n \nFunction\n;\n\n\n\n\n\n\nDefinition\n\n\nCreates \nbroadcastable\n for a \ncustom_json\n operation.\n\n\nParameters\n\n\n\n\ncustomJsonConfig\n (\nCustomJsonConfig\n): the configuration object for a custom json\n\n\n\n\nReturns\n\n\n\n\nbroadcastable\n: the broadcastable function for a \ncustom_json\n operation\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n \ncreateBroadcastableCustomJson\n \n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \nbroadcastableCustomJson\n \n=\n \ncreateBroadcastableCustomJson\n({\n\n  \nrequired_posting_auths\n:\n \n[\n'jakipatryk'\n],\n\n  \nid\n:\n \n'follow'\n,\n\n  \njson\n: \nJSON.stringify\n([\n\n    \n'reblog'\n,\n\n    \n{\n\n      \naccount\n:\n \n'jakipatryk'\n,\n\n      \nauthor\n:\n \n'ned'\n,\n\n      \npermlink\n:\n \n'i-am-ned'\n\n    \n}\n\n  \n])\n\n\n});\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\ncheckOAuth2Error\n\n\nexport\n \ndeclare\n \nconst\n \ncheckOAuth2Error\n:\n \n(\n\n  \n{\n \nerror\n,\n \nerror_description\n \n}\n:\n \nOAuth2Error\n,\n\n  \nerrorToCheckAgainst\n: \nOAuth2Error\n\n\n)\n \n=>\n \nboolean\n;\n\n\n\n\n\n\nDefinition\n\n\nChecks if provided error object is equal the error object to check against.\n\n\nParameters\n\n\n\n\n\n\nactualError\n (\nOAuth2Error\n): the error object to be checked\n\n\n\n\n\n\nerrorToCheckAgainst\n (\nOAuth2Error\n): the error object to check \nactualError\n against\n\n\n\n\n\n\nReturns\n\n\n\n\nboolean\n: true if errors are equal, false otherwise\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n \ncheckOAuth2Error\n,\n \nAccessTokenResponse\n,\n \nACCESS_TOKEN_EXPIRED\n,\n \nbroadcastUpvote\n,\n \nVote\n \n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \naccessToken\n: \nAccessTokenResponse\n \n=\n \n{\n\n  \naccess_token\n:\n \n'smtnjknfjfnsk342.sddvdskgs'\n,\n\n  \nexpires_in\n: \n640000\n\n  \nusername\n:\n \n'jakipatryk'\n\n\n}\n\n\nconst\n \nupvote\n: \nVote\n \n=\n \n{\n\n  \nauthor\n:\n \n'ned'\n,\n\n  \npermlink\n:\n \n'i-am-ned'\n\n  \nweight\n: \n2000\n\n\n}\n\n\n\nbroadcastUpvote\n(\nupvote\n)(\naccessToken\n)\n\n  \n.\nthen\n(\nresponse\n \n=>\n \nconsole\n.\nlog\n(\nresponse\n))\n\n  \n.\ncatch\n(\nerr\n \n=>\n \ncheckOAuth2Error\n(\nerr\n,\n \nACCESS_TOKEN_EXPIRED\n)\n\n    \n?\n \nconsole\n.\nerror\n(\n'Your access token has expired, please get a new one!'\n)\n\n    \n:\n \nconsole\n.\nlog\n(\n'Oups, something went wrong'\n));\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\nisAccessTokenExpiredError\n\n\nexport\n \ndeclare\n \nconst\n \nisAccessTokenExpiredError\n:\n \n(\n\n  \n{\n \nerror\n,\n \nerror_description\n \n}\n:\n \nOAuth2Error\n\n\n)\n \n=>\n \nboolean\n;\n\n\n\n\n\n\nDefinition\n\n\nChecks if provided error object is equal to the error caused by expired access token.\n\n\nParameters\n\n\n\n\nerror\n (\nOAuth2Error\n): the error object to be checked\n\n\n\n\nReturns\n\n\n\n\nboolean\n: true if errors is equal to error caused by expired access token, false otherwise\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n \nisAccessTokenExpiredError\n,\n \nAccessTokenResponse\n,\n \nbroadcastUpvote\n,\n \nVote\n \n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \naccessToken\n: \nAccessTokenResponse\n \n=\n \n{\n\n  \naccess_token\n:\n \n'smtnjknfjfnsk342.sddvdskgs'\n,\n\n  \nexpires_in\n: \n640000\n\n  \nusername\n:\n \n'jakipatryk'\n\n\n}\n\n\nconst\n \nupvote\n: \nVote\n \n=\n \n{\n\n  \nauthor\n:\n \n'ned'\n,\n\n  \npermlink\n:\n \n'i-am-ned'\n\n  \nweight\n: \n2000\n\n\n}\n\n\n\nbroadcastUpvote\n(\nupvote\n)(\naccessToken\n)\n\n  \n.\nthen\n(\nresponse\n \n=>\n \nconsole\n.\nlog\n(\nresponse\n))\n\n  \n.\ncatch\n(\nerr\n \n=>\n \nisAccessTokenExpiredError\n(\nerr\n)\n\n    \n?\n \nconsole\n.\nerror\n(\n'Your access token has expired, please get a new one!'\n)\n\n    \n:\n \nconsole\n.\nlog\n(\n'Oups, something went wrong'\n));\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\nisAccessTokenInvalidError\n\n\nexport\n \ndeclare\n \nconst\n \nisAccessTokenInvalidError\n:\n \n(\n\n  \n{\n \nerror\n,\n \nerror_description\n \n}\n:\n \nOAuth2Error\n\n\n)\n \n=>\n \nboolean\n;\n\n\n\n\n\n\nDefinition\n\n\nChecks if provided error object is equal to the error caused by invalid access token.\n\n\nParameters\n\n\n\n\nerror\n (\nOAuth2Error\n): the error object to be checked\n\n\n\n\nReturns\n\n\n\n\nboolean\n: true if errors is equal to error caused by invalid access token, false otherwise\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n \nisAccessTokenInvalidError\n,\n \nAccessTokenResponse\n,\n \nbroadcastUpvote\n,\n \nVote\n \n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \naccessToken\n: \nAccessTokenResponse\n \n=\n \n{\n\n  \naccess_token\n:\n \n'smtnjknfjfnsk342.sddvdskgs'\n,\n\n  \nexpires_in\n: \n640000\n\n  \nusername\n:\n \n'jakipatryk'\n\n\n}\n\n\nconst\n \nupvote\n: \nVote\n \n=\n \n{\n\n  \nauthor\n:\n \n'ned'\n,\n\n  \npermlink\n:\n \n'i-am-ned'\n\n  \nweight\n: \n2000\n\n\n}\n\n\n\nbroadcastUpvote\n(\nupvote\n)(\naccessToken\n)\n\n  \n.\nthen\n(\nresponse\n \n=>\n \nconsole\n.\nlog\n(\nresponse\n))\n\n  \n.\ncatch\n(\nerr\n \n=>\n \nisAccessTokenInvalidError\n(\nerr\n)\n\n    \n?\n \nconsole\n.\nerror\n(\n'Your access token is invalid!'\n)\n\n    \n:\n \nconsole\n.\nlog\n(\n'Oups, something went wrong'\n));\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\nisAccessTokenRevokedError\n\n\nexport\n \ndeclare\n \nconst\n \nisAccessTokenRevokedError\n:\n \n(\n\n  \n{\n \nerror\n,\n \nerror_description\n \n}\n:\n \nOAuth2Error\n\n\n)\n \n=>\n \nboolean\n;\n\n\n\n\n\n\nDefinition\n\n\nChecks if provided error object is equal to the error caused by revoked access token.\n\n\nParameters\n\n\n\n\nerror\n (\nOAuth2Error\n): the error object to be checked\n\n\n\n\nReturns\n\n\n\n\nboolean\n: true if errors is equal to error caused by revoked access token, false otherwise\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n \nisAccessTokenRevokedError\n,\n \nAccessTokenResponse\n,\n \nbroadcastUpvote\n,\n \nVote\n \n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \naccessToken\n: \nAccessTokenResponse\n \n=\n \n{\n\n  \naccess_token\n:\n \n'smtnjknfjfnsk342.sddvdskgs'\n,\n\n  \nexpires_in\n: \n640000\n\n  \nusername\n:\n \n'jakipatryk'\n\n\n}\n\n\nconst\n \nupvote\n: \nVote\n \n=\n \n{\n\n  \nauthor\n:\n \n'ned'\n,\n\n  \npermlink\n:\n \n'i-am-ned'\n\n  \nweight\n: \n2000\n\n\n}\n\n\n\nbroadcastUpvote\n(\nupvote\n)(\naccessToken\n)\n\n  \n.\nthen\n(\nresponse\n \n=>\n \nconsole\n.\nlog\n(\nresponse\n))\n\n  \n.\ncatch\n(\nerr\n \n=>\n \nisAccessTokenRevokedError\n(\nerr\n)\n\n    \n?\n \nconsole\n.\nerror\n(\n'Your access token has been revoked, please get a new one!'\n)\n\n    \n:\n \nconsole\n.\nlog\n(\n'Oups, something went wrong'\n));\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\nisAccessTokenError\n\n\nexport\n \ndeclare\n \nconst\n \nisAccessTokenError\n:\n \n(\n\n  \n{\n \nerror\n,\n \nerror_description\n \n}\n:\n \nOAuth2Error\n\n\n)\n \n=>\n \nboolean\n;\n\n\n\n\n\n\nDefinition\n\n\nChecks if provided error object is equal to any of errors caused by access token.\n\n\nParameters\n\n\n\n\nerror\n (\nOAuth2Error\n): the error object to be checked\n\n\n\n\nReturns\n\n\n\n\nboolean\n: true if errors is equal to error caused by access token, false otherwise\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n \nisAccessTokenError\n,\n \nAccessTokenResponse\n,\n \nbroadcastUpvote\n,\n \nVote\n \n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \naccessToken\n: \nAccessTokenResponse\n \n=\n \n{\n\n  \naccess_token\n:\n \n'smtnjknfjfnsk342.sddvdskgs'\n,\n\n  \nexpires_in\n: \n640000\n\n  \nusername\n:\n \n'jakipatryk'\n\n\n}\n\n\nconst\n \nupvote\n: \nVote\n \n=\n \n{\n\n  \nauthor\n:\n \n'ned'\n,\n\n  \npermlink\n:\n \n'i-am-ned'\n\n  \nweight\n: \n2000\n\n\n}\n\n\n\nbroadcastUpvote\n(\nupvote\n)(\naccessToken\n)\n\n  \n.\nthen\n(\nresponse\n \n=>\n \nconsole\n.\nlog\n(\nresponse\n))\n\n  \n.\ncatch\n(\n\n    \nerr\n \n=>\n \nisAccessTokenError\n(\nerr\n)\n\n      \n?\n \nconsole\n.\nerror\n(\n'Something is wrong with your access token, please get a new one!'\n)\n\n      \n:\n \nconsole\n.\nerror\n(\n'Oups, something went wrong'\n)\n\n  \n);\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\nisRefreshTokenError\n\n\nexport\n \ndeclare\n \nconst\n \nisRefreshTokenError\n:\n \n(\n\n  \n{\n \nerror\n,\n \nerror_description\n \n}\n:\n \nOAuth2Error\n\n\n)\n \n=>\n \nboolean\n;\n\n\n\n\n\n\nDefinition\n\n\nChecks if provided error object is caused by refresh token.\n\n\nParameters\n\n\n\n\nerror\n (\nOAuth2Error\n): the error object to be checked\n\n\n\n\nReturns\n\n\n\n\nboolean\n: true if errors is equal to error caused by refresh token, false otherwise\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n\n  \nisRefreshTokenError\n,\n\n  \nrefreshAccessToken\n,\n\n  \nClientCredentials\n\n\n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \nclientCredentials\n: \nClientCredentials\n \n=\n \n{\n\n  \nclientId\n:\n \n'strimi.app'\n,\n\n  \nclientSecret\n:\n \n'4324mknknrk3nkjnkvfgd.434nrjk53'\n\n\n};\n\n\nconst\n \nrefreshToken\n: \nstring\n \n=\n \n'smtfhdbgsnjr3nr34.34n5nk3'\n;\n\n\n\nrefreshAccessToken\n({\n \n...\nclientCredentials\n,\n \nrefreshToken\n \n})\n\n  \n.\nthen\n(\nnewTokens\n \n=>\n \nconsole\n.\nlog\n(\nnewTokens\n))\n\n  \n.\ncatch\n(\n\n    \nerr\n \n=>\n\n      \nisRefreshTokenError\n(\nerr\n)\n\n        \n?\n \nconsole\n.\nerror\n(\n'Your refresh token is wrong!'\n)\n\n        \n:\n \nconsole\n.\nerror\n(\n'Oups, someting went wrong'\n)\n\n  \n);\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\nisCodeError\n\n\nexport\n \ndeclare\n \nconst\n \nisCodeError\n:\n \n(\n\n  \n{\n \nerror\n,\n \nerror_description\n \n}\n:\n \nOAuth2Error\n\n\n)\n \n=>\n \nboolean\n;\n\n\n\n\n\n\nDefinition\n\n\nChecks if provided error object is caused by wrong code.\n\n\nParameters\n\n\n\n\nerror\n (\nOAuth2Error\n): the error object to be checked\n\n\n\n\nReturns\n\n\n\n\nboolean\n: true if errors is equal to error caused by code, false otherwise\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n\n  \nisCodeError\n,\n\n  \ngetAccessToken\n,\n\n  \nClientCredentials\n\n\n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \nclientCredentials\n: \nClientCredentials\n \n=\n \n{\n\n  \nclientId\n:\n \n'strimi.app'\n,\n\n  \nclientSecret\n:\n \n'4324mknknrk3nkjnkvfgd.434nrjk53'\n\n\n};\n\n\nconst\n \nredirectUri\n: \nstring\n \n=\n \n'https://strimi.pl/redirect'\n;\n\n\nconst\n \ncode\n: \nstring\n \n=\n \n'msdofwef.34jkfnmsdkjfnsdkfksd'\n;\n\n\n\ngetAccessToken\n({\n \n...\nclientCredentials\n,\n \nredirectUri\n,\n \ncode\n \n})\n\n  \n.\nthen\n(\ntokens\n \n=>\n \nconsole\n.\nlog\n(\ntokens\n))\n\n  \n.\ncatch\n(\n\n    \nerr\n \n=>\n\n      \nisCodeError\n(\nerr\n)\n\n        \n?\n \nconsole\n.\nerror\n(\n'Your code is wrong!'\n)\n\n        \n:\n \nconsole\n.\nerror\n(\n'Oups, someting went wrong'\n)\n\n  \n);\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\ncreateBroadcastableDeleteComment\n\n\nexport\n \ndeclare\n \nconst\n \ncreateBroadcastableDeleteComment\n:\n \n(\n\n  \ndeleteCommentConfig\n: \nDeleteCommentConfig\n\n\n)\n \n=>\n \nFunction\n;\n\n\n\n\n\n\nDefinition\n\n\nCreates \nbroadcastable\n for a \ndelete_comment\n operation.\n\n\nParameters\n\n\n\n\ndeleteCommentConfig\n (\nDeleteCommentConfig\n): the configuration object for a comment deletion\n\n\n\n\nReturns\n\n\n\n\nbroadcastable\n: the broadcastable function for a \ndelete_comment\n operation\n\n\n\n\nExample Usage\n\n\nimport\n \n{\n \ncreateBroadcastableDeleteComment\n \n}\n \nfrom\n \n'steemconnect-firebase-functions'\n;\n\n\n\nconst\n \nbroadcastableDeleteComment\n \n=\n \ncreateBroadcastableDeleteComment\n({\n\n  \nauthor\n:\n \n'jakipatryk'\n,\n\n  \npermlink\n:\n \n'i-am-jakipatryk'\n\n\n});\n\n\n\n\n\n\nImplementation\n\n\nThe implementation is available on \nGithub\n.\n\n\n\n\nInterfaces and Types\n\n\nAccessTokenResponse\n\n\nDefinition\n\n\nDefines an object containing OAuth2 tokens details.\n\n\nImplementation\n\n\nexport\n \ninterface\n \nAccessTokenResponse\n \n{\n\n  \naccess_token\n: \nstring\n;\n\n  \nexpires_in\n: \nnumber\n;\n\n  \nusername\n: \nstring\n;\n\n  \nrefresh_token?\n: \nstring\n;\n\n\n}\n\n\n\n\n\n\n\n\nCommentConfig\n\n\nDefinition\n\n\nDefines a configuration object for \ncomment\n operation.\n\n\nImplementation\n\n\nexport\n \ninterface\n \nCommentConfig\n \n{\n\n  \nparent_permlink\n: \nstring\n;\n\n  \nauthor\n: \nstring\n;\n\n  \npermlink\n: \nstring\n;\n\n  \nbody\n: \nstring\n;\n\n  \nparent_author?\n: \nstring\n;\n\n  \ntitle?\n: \nstring\n;\n\n  \njson_metadata?\n: \nstring\n;\n\n\n}\n\n\n\n\n\n\n\n\nCommentOptionsConfig\n\n\nDefinition\n\n\nDefines a configuration object for \ncomment_options\n operation.\n\n\nImplementation\n\n\nexport\n \ninterface\n \nCommentOptionsConfig\n \n{\n\n  \nauthor\n: \nstring\n;\n\n  \npermlink\n: \nstring\n;\n\n  \nextensions?\n: \nArray\n<\nany\n>\n;\n\n  \nmax_accepted_payout?\n: \nstring\n;\n\n  \npercent_steem_dollars?\n: \nnumber\n;\n\n  \nallow_votes?\n: \nboolean\n;\n\n  \nallow_curation_rewards?\n: \nboolean\n;\n\n\n}\n\n\n\n\n\n\n\n\nCustomJsonConfig\n\n\nDefinition\n\n\nDefines a configuration object for \ncustom_json\n operation.\n\n\nImplementation\n\n\nexport\n \ninterface\n \nCustomJsonConfig\n \n{\n\n  \nrequired_posting_auths\n: \nArray\n<\nstring\n>\n;\n\n  \nid\n: \nstring\n;\n\n  \njson\n: \nstring\n;\n\n  \nrequired_auths?\n: \nArray\n<\nstring\n>\n;\n\n\n}\n\n\n\n\n\n\n\n\nDeleteCommentConfig\n\n\nDefinition\n\n\nDefines a configuration object for \ndelete_comment\n operation.\n\n\nImplementation\n\n\nexport\n \ninterface\n \nDeleteCommentConfig\n \n{\n\n  \nauthor\n: \nstring\n;\n\n  \npermlink\n: \nstring\n;\n\n\n}\n\n\n\n\n\n\n\n\nVoteConfig\n\n\nDefinition\n\n\nDefines a configuration object for \nvote\n operation.\n\n\nImplementation\n\n\nexport\n \ninterface\n \nVoteConfig\n \n{\n\n  \nvoter\n: \nstring\n;\n\n  \nauthor\n: \nstring\n;\n\n  \npermlink\n: \nstring\n;\n\n  \nweight\n: \nnumber\n;\n\n\n}\n\n\n\n\n\n\n\n\nUserData\n\n\nDefinition\n\n\nDefines an object containing user data from SteemConnect.\n\n\nImplementation\n\n\nexport\n \ninterface\n \nUserData\n \n{\n\n  \nuser\n: \nstring\n;\n\n  \n_id\n: \nstring\n;\n\n  \nname\n: \nstring\n;\n\n  \naccount\n: \nobject\n;\n\n  \nscope\n: \nArray\n<\nstring\n>\n;\n\n  \nuser_metadata\n: \nobject\n;\n\n\n}\n\n\n\n\n\n\n\n\nOAuth2Error\n\n\nDefinition\n\n\nDefines an OAuth2 error object.\n\n\nImplementation\n\n\nexport\n \ninterface\n \nOAuth2Error\n \n{\n\n  \nerror\n: \nstring\n;\n\n  \nerror_description\n: \nstring\n;\n\n\n}\n\n\n\n\n\n\n\n\nOperation\n\n\nDefniniton\n\n\nDefines an operation object (array).\n\n\nImplementation\n\n\nexport\n \ninterface\n \nOperation\n \nextends\n \nArray\n<\nstring\n \n|\n \nobject\n>\n \n{\n\n  \n// type of operation\n\n  \n0\n: \nstring\n;\n\n\n  \n// operation details\n\n  \n1\n: \nobject\n;\n\n\n}\n\n\n\n\n\n\nOperations\n\n\nDefinition\n\n\nA type which defines an array of operations.\n\n\nImplementation\n\n\nexport\n \ntype\n \nOperations\n \n=\n \nArray\n<\nOperation\n>\n;\n\n\n\n\n\n\nReferences\n\n\n\n\nOperation\n\n\n\n\n\n\nConstants\n\n\nACCESS_TOKEN_EXPIRED\n\n\nDefinition\n\n\nError message caused by expired \naccess_token\n.\n\n\nImplementation\n\n\nexport\n \nconst\n \nACCESS_TOKEN_EXPIRED\n: \nOAuth2Error\n \n=\n \nObject\n.\nfreeze\n({\n\n  \nerror\n:\n \n'invalid_grant'\n,\n\n  \nerror_description\n:\n \n'The token has invalid role'\n\n\n});\n\n\n\n\n\n\nReferences\n\n\n\n\nOAuth2Error\n\n\n\n\n\n\nACCESS_TOKEN_INVALID\n\n\nDefinition\n\n\nError message caused by invalid \naccess_token\n.\n\n\nImplementation\n\n\nexport\n \nconst\n \nACCESS_TOKEN_INVALID\n: \nOAuth2Error\n \n=\n \nObject\n.\nfreeze\n({\n\n  \nerror\n:\n \n'invalid_grant'\n,\n\n  \nerror_description\n:\n \n'The token has invalid role'\n\n\n});\n\n\n\n\n\n\nReferences\n\n\n\n\nOAuth2Error\n\n\n\n\n\n\nACCESS_TOKEN_REVOKED\n\n\nDefinition\n\n\nError message caused by revoked \naccess_token\n.\n\n\nImplementation\n\n\nexport\n \nconst\n \nACCESS_TOKEN_REVOKED\n: \nOAuth2Error\n \n=\n \nObject\n.\nfreeze\n({\n\n  \nerror\n:\n \n'invalid_grant'\n,\n\n  \nerror_description\n:\n \n'The access_token has been revoked'\n\n\n});\n\n\n\n\n\n\nReferences\n\n\n\n\nOAuth2Error\n\n\n\n\n\n\nCODE_INVALID\n\n\nDefinition\n\n\nError message caused by invalid \ncode\n.\n\n\nImplementation\n\n\nexport\n \nconst\n \nCODE_INVALID\n: \nOAuth2Error\n \n=\n \nObject\n.\nfreeze\n({\n\n  \nerror\n:\n \n'invalid_grant'\n,\n\n  \nerror_description\n:\n \n'The token has invalid role'\n\n\n});\n\n\n\n\n\n\nReferences\n\n\n\n\nOAuth2Error\n\n\n\n\n\n\nREFRESH_TOKEN_INVALID\n\n\nDefinition\n\n\nError message caused by invalid \nrefresh_token\n.\n\n\nImplementation\n\n\nexport\n \nconst\n \nREFRESH_TOKEN_INVALID\n: \nOAuth2Error\n \n=\n \nObject\n.\nfreeze\n({\n\n  \nerror\n:\n \n'invalid_grant'\n,\n\n  \nerror_description\n:\n \n'The token has invalid role'\n\n\n});\n\n\n\n\n\n\nReferences\n\n\n\n\nOAuth2Error",
            "title": "Shared"
        },
        {
            "location": "/shared/#what-is-this-module-for",
            "text": "This module stores these tools that didn't fit other modules or are used by multiple modules.  You'll find here two  utility functions , a bunch of  helper functions ,  error constants , and a lot of  interfaces  (+ one  type ).",
            "title": "What is this module for?"
        },
        {
            "location": "/shared/#api-reference",
            "text": "",
            "title": "API reference"
        },
        {
            "location": "/shared/#utilities",
            "text": "",
            "title": "Utilities"
        },
        {
            "location": "/shared/#pipe",
            "text": "",
            "title": "pipe"
        },
        {
            "location": "/shared/#definition",
            "text": "Generic function used to compose functions.",
            "title": "Definition"
        },
        {
            "location": "/shared/#implementation",
            "text": "export   const   pipe   =   < T > (... fns :  Array < Function > )   =>   ( x :  T )   => \n   fns . reduce (( v ,   f )   =>   f ( v ),   x );",
            "title": "Implementation"
        },
        {
            "location": "/shared/#example-usage",
            "text": "export   const   createBroadcastableVote   =   pipe < VoteConfig > ( \n   createVote , \n   Array . of , \n   broadcastOperations  );",
            "title": "Example Usage"
        },
        {
            "location": "/shared/#references",
            "text": "VoteConfig  createVote  broadcastOperations",
            "title": "References"
        },
        {
            "location": "/shared/#combine",
            "text": "",
            "title": "combine"
        },
        {
            "location": "/shared/#definition_1",
            "text": "Generic function used to combine multiple operation creators into one with a single configuration object.",
            "title": "Definition"
        },
        {
            "location": "/shared/#implementation_1",
            "text": "export   const   combine   =   < T ,   U > (... fns :  Array < Function > )   =>   ( \n   ... args :  Array < T >  ) :   Array < U >   => \n   fns . reduce ( \n     ( arr ,   f )   =>   { \n       arr . push ( f (... args )); \n       return   arr ; \n     }, \n     []   as   Array < U > \n   );",
            "title": "Implementation"
        },
        {
            "location": "/shared/#example-usage_1",
            "text": "export   const   combineCommentWithOptions   =   combine < \n   CommentConfig   &   CommentOptionsConfig , \n   Operation  > ( createComment ,   createCommentOptions );",
            "title": "Example Usage"
        },
        {
            "location": "/shared/#references_1",
            "text": "CommentConfig  CommentOptionsConfig  Operation  createComment  createCommentOptions",
            "title": "References"
        },
        {
            "location": "/shared/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/shared/#combinecommentwithoptions",
            "text": "export   declare   const   combineCommentWithOptions :   ( \n   configuration :  CommentConfig   &   CommentOptionsConfig  )   =>   Operation [];",
            "title": "combineCommentWithOptions"
        },
        {
            "location": "/shared/#definition_2",
            "text": "Combines  createComment  with  createCommentOptions , so you can create these two operations with a single configuration object.",
            "title": "Definition"
        },
        {
            "location": "/shared/#parameters",
            "text": "configuration  ( CommentConfig  &  CommentOptionsConfig ): combined configuration object",
            "title": "Parameters"
        },
        {
            "location": "/shared/#returns",
            "text": "Operations : two operations -  comment  and  comment_options  - in an array",
            "title": "Returns"
        },
        {
            "location": "/shared/#example-usage_2",
            "text": "import   {   combineCommentWithOptions   }   from   'steemconnect-firebase-functions' ;  const   combinedCommentWithOptions   =   combineCommentWithOptions ({ \n   parent_permlink :   'i-am-ned' , \n   author :   'jakipatryk' , \n   permlink :   'hello-ned-sup' , \n   body :   'Hello Ned! Whats up?' , \n   parent_author :   'ned' , \n   title :   '' , \n   extensions :   [ \n     [ \n       0 , \n       { \n         beneficiaries :   [ \n           { \n             account :   'strimi' , \n             weight :  1000 \n           } \n         ] \n       } \n     ] \n   ]  });  //  [  //    [  //      'comment', {  //        parent_permlink: 'i-am-ned',  //        author: 'jakipatryk',  //        permlink: 'hello-ned-sup',  //        body: 'Hello Ned! Whats up?',  //        parent_author: 'ned',  //        title: '',  //        json_metadata: ''  //       }  //    ],  //    [  //      'comment_options', {  //        author: 'jakipatryk',  //        permlink: 'hello-ned-sup',  //        max_accepted_payout: '1000000.000 SBD',  //        percent_steem_dollars: 10000,  //        allow_votes: true,  //        allow_curation_rewards: true,  //        extensions: [  //            [  //              0,  //              {  //                beneficiaries: [  //                  {  //                    account: 'strimi',  //                    weight: 1000  //                  }  //                ]  //              }  //            ]  //        ]  //      ]  //    ]",
            "title": "Example Usage"
        },
        {
            "location": "/shared/#createbroadcastablevote",
            "text": "export   declare   const   createBroadcastableVote :   ( \n   voteConfig :  VoteConfig  )   =>   Function ;",
            "title": "createBroadcastableVote"
        },
        {
            "location": "/shared/#definition_3",
            "text": "Creates  broadcastable  for a  vote  operation.",
            "title": "Definition"
        },
        {
            "location": "/shared/#parameters_1",
            "text": "voteConfig  ( VoteConfig ): the configuration object for a vote",
            "title": "Parameters"
        },
        {
            "location": "/shared/#returns_1",
            "text": "broadcastable : the broadcastable function for a  vote  operation",
            "title": "Returns"
        },
        {
            "location": "/shared/#example-usage_3",
            "text": "import   {   createBroadcastableVote   }   from   'steemconnect-firebase-functions' ;  const   broadcastableVote   =   createBroadcastableVote ({ \n   voter :   'jakipatryk' , \n   author :   'ned' , \n   permlink :   'i-am-ned' , \n   weight :  10000  });",
            "title": "Example Usage"
        },
        {
            "location": "/shared/#implementation_2",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/shared/#createbroadcastablecomment",
            "text": "export   declare   const   createBroadcastableComment :   ( \n   commentConfig :  CommentConfig  )   =>   Function ;",
            "title": "createBroadcastableComment"
        },
        {
            "location": "/shared/#definition_4",
            "text": "Creates  broadcastable  for a  comment  operation.",
            "title": "Definition"
        },
        {
            "location": "/shared/#parameters_2",
            "text": "commentConfig  ( CommentConfig ): the configuration object for a comment",
            "title": "Parameters"
        },
        {
            "location": "/shared/#returns_2",
            "text": "broadcastable : the broadcastable function for a  comment  operation",
            "title": "Returns"
        },
        {
            "location": "/shared/#example-usage_4",
            "text": "import   {   createBroadcastableComment   }   from   'steemconnect-firebase-functions' ;  const   broadcastableComment   =   createBroadcastableComment ({ \n   parent_author :   'ned' , \n   parent_permlink :   'i-am-ned' , \n   author :   'jakipatryk' , \n   permlink :   'i-am-jakipatryk-from-polska' , \n   body :   'Hello! Whats up Ned?'  });",
            "title": "Example Usage"
        },
        {
            "location": "/shared/#implementation_3",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/shared/#createbroadcastablecommentoptions",
            "text": "export   declare   const   createBroadcastableCommentOptions :   ( \n   commentOptionsConfig :  CommentOptionsConfig  )   =>   Function ;",
            "title": "createBroadcastableCommentOptions"
        },
        {
            "location": "/shared/#definition_5",
            "text": "Creates  broadcastable  for a  comment_options  operation.",
            "title": "Definition"
        },
        {
            "location": "/shared/#parameters_3",
            "text": "commentOptionsConfig  ( CommentOptionsConfig ): the configuration object for a comment options",
            "title": "Parameters"
        },
        {
            "location": "/shared/#returns_3",
            "text": "broadcastable : the broadcastable function for a  comment_options  operation",
            "title": "Returns"
        },
        {
            "location": "/shared/#example-usage_5",
            "text": "import   {   createBroadcastableCommentOptions   }   from   'steemconnect-firebase-functions' ;  const   broadcastableCommentOptions   =   createBroadcastableCommentOptions ({ \n   author :   'jakipatryk' , \n   permlink :   'i-am-jakipatryk-from-polska' , \n   percent_steem_dollars :  0  });",
            "title": "Example Usage"
        },
        {
            "location": "/shared/#implementation_4",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/shared/#createbroadcastablecustomjson",
            "text": "export   declare   const   createBroadcastableCustomJson :   ( \n   customJsonConfig :  CustomJsonConfig  )   =>   Function ;",
            "title": "createBroadcastableCustomJson"
        },
        {
            "location": "/shared/#definition_6",
            "text": "Creates  broadcastable  for a  custom_json  operation.",
            "title": "Definition"
        },
        {
            "location": "/shared/#parameters_4",
            "text": "customJsonConfig  ( CustomJsonConfig ): the configuration object for a custom json",
            "title": "Parameters"
        },
        {
            "location": "/shared/#returns_4",
            "text": "broadcastable : the broadcastable function for a  custom_json  operation",
            "title": "Returns"
        },
        {
            "location": "/shared/#example-usage_6",
            "text": "import   {   createBroadcastableCustomJson   }   from   'steemconnect-firebase-functions' ;  const   broadcastableCustomJson   =   createBroadcastableCustomJson ({ \n   required_posting_auths :   [ 'jakipatryk' ], \n   id :   'follow' , \n   json :  JSON.stringify ([ \n     'reblog' , \n     { \n       account :   'jakipatryk' , \n       author :   'ned' , \n       permlink :   'i-am-ned' \n     } \n   ])  });",
            "title": "Example Usage"
        },
        {
            "location": "/shared/#implementation_5",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/shared/#checkoauth2error",
            "text": "export   declare   const   checkOAuth2Error :   ( \n   {   error ,   error_description   } :   OAuth2Error , \n   errorToCheckAgainst :  OAuth2Error  )   =>   boolean ;",
            "title": "checkOAuth2Error"
        },
        {
            "location": "/shared/#definition_7",
            "text": "Checks if provided error object is equal the error object to check against.",
            "title": "Definition"
        },
        {
            "location": "/shared/#parameters_5",
            "text": "actualError  ( OAuth2Error ): the error object to be checked    errorToCheckAgainst  ( OAuth2Error ): the error object to check  actualError  against",
            "title": "Parameters"
        },
        {
            "location": "/shared/#returns_5",
            "text": "boolean : true if errors are equal, false otherwise",
            "title": "Returns"
        },
        {
            "location": "/shared/#example-usage_7",
            "text": "import   {   checkOAuth2Error ,   AccessTokenResponse ,   ACCESS_TOKEN_EXPIRED ,   broadcastUpvote ,   Vote   }   from   'steemconnect-firebase-functions' ;  const   accessToken :  AccessTokenResponse   =   { \n   access_token :   'smtnjknfjfnsk342.sddvdskgs' , \n   expires_in :  640000 \n   username :   'jakipatryk'  }  const   upvote :  Vote   =   { \n   author :   'ned' , \n   permlink :   'i-am-ned' \n   weight :  2000  }  broadcastUpvote ( upvote )( accessToken ) \n   . then ( response   =>   console . log ( response )) \n   . catch ( err   =>   checkOAuth2Error ( err ,   ACCESS_TOKEN_EXPIRED ) \n     ?   console . error ( 'Your access token has expired, please get a new one!' ) \n     :   console . log ( 'Oups, something went wrong' ));",
            "title": "Example Usage"
        },
        {
            "location": "/shared/#implementation_6",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/shared/#isaccesstokenexpirederror",
            "text": "export   declare   const   isAccessTokenExpiredError :   ( \n   {   error ,   error_description   } :   OAuth2Error  )   =>   boolean ;",
            "title": "isAccessTokenExpiredError"
        },
        {
            "location": "/shared/#definition_8",
            "text": "Checks if provided error object is equal to the error caused by expired access token.",
            "title": "Definition"
        },
        {
            "location": "/shared/#parameters_6",
            "text": "error  ( OAuth2Error ): the error object to be checked",
            "title": "Parameters"
        },
        {
            "location": "/shared/#returns_6",
            "text": "boolean : true if errors is equal to error caused by expired access token, false otherwise",
            "title": "Returns"
        },
        {
            "location": "/shared/#example-usage_8",
            "text": "import   {   isAccessTokenExpiredError ,   AccessTokenResponse ,   broadcastUpvote ,   Vote   }   from   'steemconnect-firebase-functions' ;  const   accessToken :  AccessTokenResponse   =   { \n   access_token :   'smtnjknfjfnsk342.sddvdskgs' , \n   expires_in :  640000 \n   username :   'jakipatryk'  }  const   upvote :  Vote   =   { \n   author :   'ned' , \n   permlink :   'i-am-ned' \n   weight :  2000  }  broadcastUpvote ( upvote )( accessToken ) \n   . then ( response   =>   console . log ( response )) \n   . catch ( err   =>   isAccessTokenExpiredError ( err ) \n     ?   console . error ( 'Your access token has expired, please get a new one!' ) \n     :   console . log ( 'Oups, something went wrong' ));",
            "title": "Example Usage"
        },
        {
            "location": "/shared/#implementation_7",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/shared/#isaccesstokeninvaliderror",
            "text": "export   declare   const   isAccessTokenInvalidError :   ( \n   {   error ,   error_description   } :   OAuth2Error  )   =>   boolean ;",
            "title": "isAccessTokenInvalidError"
        },
        {
            "location": "/shared/#definition_9",
            "text": "Checks if provided error object is equal to the error caused by invalid access token.",
            "title": "Definition"
        },
        {
            "location": "/shared/#parameters_7",
            "text": "error  ( OAuth2Error ): the error object to be checked",
            "title": "Parameters"
        },
        {
            "location": "/shared/#returns_7",
            "text": "boolean : true if errors is equal to error caused by invalid access token, false otherwise",
            "title": "Returns"
        },
        {
            "location": "/shared/#example-usage_9",
            "text": "import   {   isAccessTokenInvalidError ,   AccessTokenResponse ,   broadcastUpvote ,   Vote   }   from   'steemconnect-firebase-functions' ;  const   accessToken :  AccessTokenResponse   =   { \n   access_token :   'smtnjknfjfnsk342.sddvdskgs' , \n   expires_in :  640000 \n   username :   'jakipatryk'  }  const   upvote :  Vote   =   { \n   author :   'ned' , \n   permlink :   'i-am-ned' \n   weight :  2000  }  broadcastUpvote ( upvote )( accessToken ) \n   . then ( response   =>   console . log ( response )) \n   . catch ( err   =>   isAccessTokenInvalidError ( err ) \n     ?   console . error ( 'Your access token is invalid!' ) \n     :   console . log ( 'Oups, something went wrong' ));",
            "title": "Example Usage"
        },
        {
            "location": "/shared/#implementation_8",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/shared/#isaccesstokenrevokederror",
            "text": "export   declare   const   isAccessTokenRevokedError :   ( \n   {   error ,   error_description   } :   OAuth2Error  )   =>   boolean ;",
            "title": "isAccessTokenRevokedError"
        },
        {
            "location": "/shared/#definition_10",
            "text": "Checks if provided error object is equal to the error caused by revoked access token.",
            "title": "Definition"
        },
        {
            "location": "/shared/#parameters_8",
            "text": "error  ( OAuth2Error ): the error object to be checked",
            "title": "Parameters"
        },
        {
            "location": "/shared/#returns_8",
            "text": "boolean : true if errors is equal to error caused by revoked access token, false otherwise",
            "title": "Returns"
        },
        {
            "location": "/shared/#example-usage_10",
            "text": "import   {   isAccessTokenRevokedError ,   AccessTokenResponse ,   broadcastUpvote ,   Vote   }   from   'steemconnect-firebase-functions' ;  const   accessToken :  AccessTokenResponse   =   { \n   access_token :   'smtnjknfjfnsk342.sddvdskgs' , \n   expires_in :  640000 \n   username :   'jakipatryk'  }  const   upvote :  Vote   =   { \n   author :   'ned' , \n   permlink :   'i-am-ned' \n   weight :  2000  }  broadcastUpvote ( upvote )( accessToken ) \n   . then ( response   =>   console . log ( response )) \n   . catch ( err   =>   isAccessTokenRevokedError ( err ) \n     ?   console . error ( 'Your access token has been revoked, please get a new one!' ) \n     :   console . log ( 'Oups, something went wrong' ));",
            "title": "Example Usage"
        },
        {
            "location": "/shared/#implementation_9",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/shared/#isaccesstokenerror",
            "text": "export   declare   const   isAccessTokenError :   ( \n   {   error ,   error_description   } :   OAuth2Error  )   =>   boolean ;",
            "title": "isAccessTokenError"
        },
        {
            "location": "/shared/#definition_11",
            "text": "Checks if provided error object is equal to any of errors caused by access token.",
            "title": "Definition"
        },
        {
            "location": "/shared/#parameters_9",
            "text": "error  ( OAuth2Error ): the error object to be checked",
            "title": "Parameters"
        },
        {
            "location": "/shared/#returns_9",
            "text": "boolean : true if errors is equal to error caused by access token, false otherwise",
            "title": "Returns"
        },
        {
            "location": "/shared/#example-usage_11",
            "text": "import   {   isAccessTokenError ,   AccessTokenResponse ,   broadcastUpvote ,   Vote   }   from   'steemconnect-firebase-functions' ;  const   accessToken :  AccessTokenResponse   =   { \n   access_token :   'smtnjknfjfnsk342.sddvdskgs' , \n   expires_in :  640000 \n   username :   'jakipatryk'  }  const   upvote :  Vote   =   { \n   author :   'ned' , \n   permlink :   'i-am-ned' \n   weight :  2000  }  broadcastUpvote ( upvote )( accessToken ) \n   . then ( response   =>   console . log ( response )) \n   . catch ( \n     err   =>   isAccessTokenError ( err ) \n       ?   console . error ( 'Something is wrong with your access token, please get a new one!' ) \n       :   console . error ( 'Oups, something went wrong' ) \n   );",
            "title": "Example Usage"
        },
        {
            "location": "/shared/#implementation_10",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/shared/#isrefreshtokenerror",
            "text": "export   declare   const   isRefreshTokenError :   ( \n   {   error ,   error_description   } :   OAuth2Error  )   =>   boolean ;",
            "title": "isRefreshTokenError"
        },
        {
            "location": "/shared/#definition_12",
            "text": "Checks if provided error object is caused by refresh token.",
            "title": "Definition"
        },
        {
            "location": "/shared/#parameters_10",
            "text": "error  ( OAuth2Error ): the error object to be checked",
            "title": "Parameters"
        },
        {
            "location": "/shared/#returns_10",
            "text": "boolean : true if errors is equal to error caused by refresh token, false otherwise",
            "title": "Returns"
        },
        {
            "location": "/shared/#example-usage_12",
            "text": "import   { \n   isRefreshTokenError , \n   refreshAccessToken , \n   ClientCredentials  }   from   'steemconnect-firebase-functions' ;  const   clientCredentials :  ClientCredentials   =   { \n   clientId :   'strimi.app' , \n   clientSecret :   '4324mknknrk3nkjnkvfgd.434nrjk53'  };  const   refreshToken :  string   =   'smtfhdbgsnjr3nr34.34n5nk3' ;  refreshAccessToken ({   ... clientCredentials ,   refreshToken   }) \n   . then ( newTokens   =>   console . log ( newTokens )) \n   . catch ( \n     err   => \n       isRefreshTokenError ( err ) \n         ?   console . error ( 'Your refresh token is wrong!' ) \n         :   console . error ( 'Oups, someting went wrong' ) \n   );",
            "title": "Example Usage"
        },
        {
            "location": "/shared/#implementation_11",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/shared/#iscodeerror",
            "text": "export   declare   const   isCodeError :   ( \n   {   error ,   error_description   } :   OAuth2Error  )   =>   boolean ;",
            "title": "isCodeError"
        },
        {
            "location": "/shared/#definition_13",
            "text": "Checks if provided error object is caused by wrong code.",
            "title": "Definition"
        },
        {
            "location": "/shared/#parameters_11",
            "text": "error  ( OAuth2Error ): the error object to be checked",
            "title": "Parameters"
        },
        {
            "location": "/shared/#returns_11",
            "text": "boolean : true if errors is equal to error caused by code, false otherwise",
            "title": "Returns"
        },
        {
            "location": "/shared/#example-usage_13",
            "text": "import   { \n   isCodeError , \n   getAccessToken , \n   ClientCredentials  }   from   'steemconnect-firebase-functions' ;  const   clientCredentials :  ClientCredentials   =   { \n   clientId :   'strimi.app' , \n   clientSecret :   '4324mknknrk3nkjnkvfgd.434nrjk53'  };  const   redirectUri :  string   =   'https://strimi.pl/redirect' ;  const   code :  string   =   'msdofwef.34jkfnmsdkjfnsdkfksd' ;  getAccessToken ({   ... clientCredentials ,   redirectUri ,   code   }) \n   . then ( tokens   =>   console . log ( tokens )) \n   . catch ( \n     err   => \n       isCodeError ( err ) \n         ?   console . error ( 'Your code is wrong!' ) \n         :   console . error ( 'Oups, someting went wrong' ) \n   );",
            "title": "Example Usage"
        },
        {
            "location": "/shared/#implementation_12",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/shared/#createbroadcastabledeletecomment",
            "text": "export   declare   const   createBroadcastableDeleteComment :   ( \n   deleteCommentConfig :  DeleteCommentConfig  )   =>   Function ;",
            "title": "createBroadcastableDeleteComment"
        },
        {
            "location": "/shared/#definition_14",
            "text": "Creates  broadcastable  for a  delete_comment  operation.",
            "title": "Definition"
        },
        {
            "location": "/shared/#parameters_12",
            "text": "deleteCommentConfig  ( DeleteCommentConfig ): the configuration object for a comment deletion",
            "title": "Parameters"
        },
        {
            "location": "/shared/#returns_12",
            "text": "broadcastable : the broadcastable function for a  delete_comment  operation",
            "title": "Returns"
        },
        {
            "location": "/shared/#example-usage_14",
            "text": "import   {   createBroadcastableDeleteComment   }   from   'steemconnect-firebase-functions' ;  const   broadcastableDeleteComment   =   createBroadcastableDeleteComment ({ \n   author :   'jakipatryk' , \n   permlink :   'i-am-jakipatryk'  });",
            "title": "Example Usage"
        },
        {
            "location": "/shared/#implementation_13",
            "text": "The implementation is available on  Github .",
            "title": "Implementation"
        },
        {
            "location": "/shared/#interfaces-and-types",
            "text": "",
            "title": "Interfaces and Types"
        },
        {
            "location": "/shared/#accesstokenresponse",
            "text": "",
            "title": "AccessTokenResponse"
        },
        {
            "location": "/shared/#definition_15",
            "text": "Defines an object containing OAuth2 tokens details.",
            "title": "Definition"
        },
        {
            "location": "/shared/#implementation_14",
            "text": "export   interface   AccessTokenResponse   { \n   access_token :  string ; \n   expires_in :  number ; \n   username :  string ; \n   refresh_token? :  string ;  }",
            "title": "Implementation"
        },
        {
            "location": "/shared/#commentconfig",
            "text": "",
            "title": "CommentConfig"
        },
        {
            "location": "/shared/#definition_16",
            "text": "Defines a configuration object for  comment  operation.",
            "title": "Definition"
        },
        {
            "location": "/shared/#implementation_15",
            "text": "export   interface   CommentConfig   { \n   parent_permlink :  string ; \n   author :  string ; \n   permlink :  string ; \n   body :  string ; \n   parent_author? :  string ; \n   title? :  string ; \n   json_metadata? :  string ;  }",
            "title": "Implementation"
        },
        {
            "location": "/shared/#commentoptionsconfig",
            "text": "",
            "title": "CommentOptionsConfig"
        },
        {
            "location": "/shared/#definition_17",
            "text": "Defines a configuration object for  comment_options  operation.",
            "title": "Definition"
        },
        {
            "location": "/shared/#implementation_16",
            "text": "export   interface   CommentOptionsConfig   { \n   author :  string ; \n   permlink :  string ; \n   extensions? :  Array < any > ; \n   max_accepted_payout? :  string ; \n   percent_steem_dollars? :  number ; \n   allow_votes? :  boolean ; \n   allow_curation_rewards? :  boolean ;  }",
            "title": "Implementation"
        },
        {
            "location": "/shared/#customjsonconfig",
            "text": "",
            "title": "CustomJsonConfig"
        },
        {
            "location": "/shared/#definition_18",
            "text": "Defines a configuration object for  custom_json  operation.",
            "title": "Definition"
        },
        {
            "location": "/shared/#implementation_17",
            "text": "export   interface   CustomJsonConfig   { \n   required_posting_auths :  Array < string > ; \n   id :  string ; \n   json :  string ; \n   required_auths? :  Array < string > ;  }",
            "title": "Implementation"
        },
        {
            "location": "/shared/#deletecommentconfig",
            "text": "",
            "title": "DeleteCommentConfig"
        },
        {
            "location": "/shared/#definition_19",
            "text": "Defines a configuration object for  delete_comment  operation.",
            "title": "Definition"
        },
        {
            "location": "/shared/#implementation_18",
            "text": "export   interface   DeleteCommentConfig   { \n   author :  string ; \n   permlink :  string ;  }",
            "title": "Implementation"
        },
        {
            "location": "/shared/#voteconfig",
            "text": "",
            "title": "VoteConfig"
        },
        {
            "location": "/shared/#definition_20",
            "text": "Defines a configuration object for  vote  operation.",
            "title": "Definition"
        },
        {
            "location": "/shared/#implementation_19",
            "text": "export   interface   VoteConfig   { \n   voter :  string ; \n   author :  string ; \n   permlink :  string ; \n   weight :  number ;  }",
            "title": "Implementation"
        },
        {
            "location": "/shared/#userdata",
            "text": "",
            "title": "UserData"
        },
        {
            "location": "/shared/#definition_21",
            "text": "Defines an object containing user data from SteemConnect.",
            "title": "Definition"
        },
        {
            "location": "/shared/#implementation_20",
            "text": "export   interface   UserData   { \n   user :  string ; \n   _id :  string ; \n   name :  string ; \n   account :  object ; \n   scope :  Array < string > ; \n   user_metadata :  object ;  }",
            "title": "Implementation"
        },
        {
            "location": "/shared/#oauth2error",
            "text": "",
            "title": "OAuth2Error"
        },
        {
            "location": "/shared/#definition_22",
            "text": "Defines an OAuth2 error object.",
            "title": "Definition"
        },
        {
            "location": "/shared/#implementation_21",
            "text": "export   interface   OAuth2Error   { \n   error :  string ; \n   error_description :  string ;  }",
            "title": "Implementation"
        },
        {
            "location": "/shared/#operation",
            "text": "",
            "title": "Operation"
        },
        {
            "location": "/shared/#defniniton",
            "text": "Defines an operation object (array).",
            "title": "Defniniton"
        },
        {
            "location": "/shared/#implementation_22",
            "text": "export   interface   Operation   extends   Array < string   |   object >   { \n   // type of operation \n   0 :  string ; \n\n   // operation details \n   1 :  object ;  }",
            "title": "Implementation"
        },
        {
            "location": "/shared/#operations",
            "text": "",
            "title": "Operations"
        },
        {
            "location": "/shared/#definition_23",
            "text": "A type which defines an array of operations.",
            "title": "Definition"
        },
        {
            "location": "/shared/#implementation_23",
            "text": "export   type   Operations   =   Array < Operation > ;",
            "title": "Implementation"
        },
        {
            "location": "/shared/#references_2",
            "text": "Operation",
            "title": "References"
        },
        {
            "location": "/shared/#constants",
            "text": "",
            "title": "Constants"
        },
        {
            "location": "/shared/#access_token_expired",
            "text": "",
            "title": "ACCESS_TOKEN_EXPIRED"
        },
        {
            "location": "/shared/#definition_24",
            "text": "Error message caused by expired  access_token .",
            "title": "Definition"
        },
        {
            "location": "/shared/#implementation_24",
            "text": "export   const   ACCESS_TOKEN_EXPIRED :  OAuth2Error   =   Object . freeze ({ \n   error :   'invalid_grant' , \n   error_description :   'The token has invalid role'  });",
            "title": "Implementation"
        },
        {
            "location": "/shared/#references_3",
            "text": "OAuth2Error",
            "title": "References"
        },
        {
            "location": "/shared/#access_token_invalid",
            "text": "",
            "title": "ACCESS_TOKEN_INVALID"
        },
        {
            "location": "/shared/#definition_25",
            "text": "Error message caused by invalid  access_token .",
            "title": "Definition"
        },
        {
            "location": "/shared/#implementation_25",
            "text": "export   const   ACCESS_TOKEN_INVALID :  OAuth2Error   =   Object . freeze ({ \n   error :   'invalid_grant' , \n   error_description :   'The token has invalid role'  });",
            "title": "Implementation"
        },
        {
            "location": "/shared/#references_4",
            "text": "OAuth2Error",
            "title": "References"
        },
        {
            "location": "/shared/#access_token_revoked",
            "text": "",
            "title": "ACCESS_TOKEN_REVOKED"
        },
        {
            "location": "/shared/#definition_26",
            "text": "Error message caused by revoked  access_token .",
            "title": "Definition"
        },
        {
            "location": "/shared/#implementation_26",
            "text": "export   const   ACCESS_TOKEN_REVOKED :  OAuth2Error   =   Object . freeze ({ \n   error :   'invalid_grant' , \n   error_description :   'The access_token has been revoked'  });",
            "title": "Implementation"
        },
        {
            "location": "/shared/#references_5",
            "text": "OAuth2Error",
            "title": "References"
        },
        {
            "location": "/shared/#code_invalid",
            "text": "",
            "title": "CODE_INVALID"
        },
        {
            "location": "/shared/#definition_27",
            "text": "Error message caused by invalid  code .",
            "title": "Definition"
        },
        {
            "location": "/shared/#implementation_27",
            "text": "export   const   CODE_INVALID :  OAuth2Error   =   Object . freeze ({ \n   error :   'invalid_grant' , \n   error_description :   'The token has invalid role'  });",
            "title": "Implementation"
        },
        {
            "location": "/shared/#references_6",
            "text": "OAuth2Error",
            "title": "References"
        },
        {
            "location": "/shared/#refresh_token_invalid",
            "text": "",
            "title": "REFRESH_TOKEN_INVALID"
        },
        {
            "location": "/shared/#definition_28",
            "text": "Error message caused by invalid  refresh_token .",
            "title": "Definition"
        },
        {
            "location": "/shared/#implementation_28",
            "text": "export   const   REFRESH_TOKEN_INVALID :  OAuth2Error   =   Object . freeze ({ \n   error :   'invalid_grant' , \n   error_description :   'The token has invalid role'  });",
            "title": "Implementation"
        },
        {
            "location": "/shared/#references_7",
            "text": "OAuth2Error",
            "title": "References"
        }
    ]
}